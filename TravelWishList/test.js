(() => {
    var e = {
            299: function(e) {
                e.exports = function() {
                    "use strict";
                    (function() {
                        for (var e = 0, t = ["ms", "moz", "webkit", "o"], a = 0; a < t.length && !window.requestAnimationFrame; ++a) window.requestAnimationFrame = window[t[a] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[t[a] + "CancelAnimationFrame"] || window[t[a] + "CancelRequestAnimationFrame"];
                        window.requestAnimationFrame || (window.requestAnimationFrame = function(t, a) {
                            var s = (new Date).getTime(),
                                n = Math.max(0, 16 - (s - e)),
                                i = window.setTimeout((function() {
                                    t(s + n)
                                }), n);
                            return e = s + n, i
                        }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function(e) {
                            clearTimeout(e)
                        })
                    })(),
                    function() {
                        if ("function" == typeof window.CustomEvent) return !1;

                        function e(e, t) {
                            t = t || {
                                bubbles: !1,
                                cancelable: !1,
                                detail: void 0
                            };
                            var a = document.createEvent("CustomEvent");
                            return a.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), a
                        }
                        e.prototype = window.Event.prototype, window.CustomEvent = e
                    }(),
                    function(e) {
                        try {
                            return new CustomEvent("test"), !1
                        } catch (e) {}

                        function t(t, a) {
                            a = a || {
                                bubbles: !1,
                                cancelable: !1
                            };
                            var s = document.createEvent("MouseEvent");
                            return s.initMouseEvent(t, a.bubbles, a.cancelable, e, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null), s
                        }
                        t.prototype = Event.prototype, e.MouseEvent = t
                    }(window);
                    var e = function(e, t) {
                            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                        },
                        t = function() {
                            function e(e, t) {
                                for (var a = 0; a < t.length; a++) {
                                    var s = t[a];
                                    s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, s.key, s)
                                }
                            }
                            return function(t, a, s) {
                                return a && e(t.prototype, a), s && e(t, s), t
                            }
                        }(),
                        a = function e(t, a, s) {
                            null === t && (t = Function.prototype);
                            var n = Object.getOwnPropertyDescriptor(t, a);
                            if (void 0 === n) {
                                var i = Object.getPrototypeOf(t);
                                return null === i ? void 0 : e(i, a, s)
                            }
                            if ("value" in n) return n.value;
                            var o = n.get;
                            return void 0 !== o ? o.call(s) : void 0
                        },
                        s = function(e, t) {
                            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                            return !t || "object" != typeof t && "function" != typeof t ? e : t
                        },
                        n = function(e, t) {
                            if (Array.isArray(e)) return e;
                            if (Symbol.iterator in Object(e)) return function(e, t) {
                                var a = [],
                                    s = !0,
                                    n = !1,
                                    i = void 0;
                                try {
                                    for (var o, r = e[Symbol.iterator](); !(s = (o = r.next()).done) && (a.push(o.value), !t || a.length !== t); s = !0);
                                } catch (e) {
                                    n = !0, i = e
                                } finally {
                                    try {
                                        !s && r.return && r.return()
                                    } finally {
                                        if (n) throw i
                                    }
                                }
                                return a
                            }(e, t);
                            throw new TypeError("Invalid attempt to destructure non-iterable instance")
                        },
                        i = function t(a, s, n, i) {
                            e(this, t);
                            var o = this;

                            function r(e) {
                                e.stopPropagation(), document.removeEventListener("mouseup", r), document.removeEventListener("mousemove", l), o.eventBus.dispatchEvent(new CustomEvent("handleend", {
                                    detail: {
                                        handle: o
                                    }
                                }))
                            }

                            function l(e) {
                                e.stopPropagation(), o.eventBus.dispatchEvent(new CustomEvent("handlemove", {
                                    detail: {
                                        mouseX: e.clientX,
                                        mouseY: e.clientY
                                    }
                                }))
                            }
                            this.position = a, this.constraints = s, this.cursor = n, this.eventBus = i, this.el = document.createElement("div"), this.el.className = "croppr-handle", this.el.style.cursor = n, this.el.addEventListener("mousedown", (function(e) {
                                e.stopPropagation(), document.addEventListener("mouseup", r), document.addEventListener("mousemove", l), o.eventBus.dispatchEvent(new CustomEvent("handlestart", {
                                    detail: {
                                        handle: o
                                    }
                                }))
                            }))
                        },
                        o = function() {
                            function a(t, s, n, i) {
                                e(this, a), this.x1 = t, this.y1 = s, this.x2 = n, this.y2 = i
                            }
                            return t(a, [{
                                key: "set",
                                value: function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                        a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                        s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                                    return this.x1 = null == e ? this.x1 : e, this.y1 = null == t ? this.y1 : t, this.x2 = null == a ? this.x2 : a, this.y2 = null == s ? this.y2 : s, this
                                }
                            }, {
                                key: "width",
                                value: function() {
                                    return Math.abs(this.x2 - this.x1)
                                }
                            }, {
                                key: "height",
                                value: function() {
                                    return Math.abs(this.y2 - this.y1)
                                }
                            }, {
                                key: "resize",
                                value: function(e, t) {
                                    var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [0, 0],
                                        s = this.x1 + this.width() * a[0],
                                        n = this.y1 + this.height() * a[1];
                                    return this.x1 = s - e * a[0], this.y1 = n - t * a[1], this.x2 = this.x1 + e, this.y2 = this.y1 + t, this
                                }
                            }, {
                                key: "scale",
                                value: function(e) {
                                    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [0, 0],
                                        a = this.width() * e,
                                        s = this.height() * e;
                                    return this.resize(a, s, t), this
                                }
                            }, {
                                key: "move",
                                value: function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                        a = this.width(),
                                        s = this.height();
                                    return e = null === e ? this.x1 : e, t = null === t ? this.y1 : t, this.x1 = e, this.y1 = t, this.x2 = e + a, this.y2 = t + s, this
                                }
                            }, {
                                key: "getRelativePoint",
                                value: function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [0, 0];
                                    return [this.width() * e[0], this.height() * e[1]]
                                }
                            }, {
                                key: "getAbsolutePoint",
                                value: function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [0, 0];
                                    return [this.x1 + this.width() * e[0], this.y1 + this.height() * e[1]]
                                }
                            }, {
                                key: "constrainToRatio",
                                value: function(e) {
                                    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [0, 0],
                                        a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "height";
                                    if (null !== e) {
                                        switch (this.width(), this.height(), a) {
                                            case "height":
                                            default:
                                                this.resize(this.width(), this.width() * e, t);
                                                break;
                                            case "width":
                                                this.resize(1 * this.height() / e, this.height(), t)
                                        }
                                        return this
                                    }
                                }
                            }, {
                                key: "constrainToBoundary",
                                value: function(e, t) {
                                    var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [0, 0],
                                        s = this.getAbsolutePoint(a),
                                        i = n(s, 2),
                                        o = i[0],
                                        r = i[1],
                                        l = o,
                                        d = r,
                                        c = e - o,
                                        u = t - r,
                                        m = -2 * a[0] + 1,
                                        p = -2 * a[1] + 1,
                                        _ = null,
                                        w = null;
                                    switch (m) {
                                        case -1:
                                            _ = l;
                                            break;
                                        case 0:
                                            _ = 2 * Math.min(l, c);
                                            break;
                                        case 1:
                                            _ = c
                                    }
                                    switch (p) {
                                        case -1:
                                            w = d;
                                            break;
                                        case 0:
                                            w = 2 * Math.min(d, u);
                                            break;
                                        case 1:
                                            w = u
                                    }
                                    if (this.width() > _) {
                                        var v = _ / this.width();
                                        this.scale(v, a)
                                    }
                                    if (this.height() > w) {
                                        var h = w / this.height();
                                        this.scale(h, a)
                                    }
                                    return this
                                }
                            }, {
                                key: "constrainToSize",
                                value: function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                        a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                        s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                                        n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [0, 0],
                                        i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null;
                                    if (i && (i > 1 ? (e = 1 * t / i, s *= i) : i < 1 && (t = e * i, a = 1 * s / i)), e && this.width() > e) {
                                        var o = e,
                                            r = null === i ? this.height() : t;
                                        this.resize(o, r, n)
                                    }
                                    if (t && this.height() > t) {
                                        var l = null === i ? this.width() : e,
                                            d = t;
                                        this.resize(l, d, n)
                                    }
                                    if (a && this.width() < a) {
                                        var c = a,
                                            u = null === i ? this.height() : s;
                                        this.resize(c, u, n)
                                    }
                                    if (s && this.height() < s) {
                                        var m = null === i ? this.width() : a,
                                            p = s;
                                        this.resize(m, p, n)
                                    }
                                    return this
                                }
                            }]), a
                        }();

                    function r(e) {
                        e.preventDefault();
                        var t = e.changedTouches[0];
                        t.target.dispatchEvent(new MouseEvent({
                            touchstart: "mousedown",
                            touchmove: "mousemove",
                            touchend: "mouseup"
                        } [e.type], {
                            bubbles: !0,
                            cancelable: !0,
                            view: window,
                            clientX: t.clientX,
                            clientY: t.clientY,
                            screenX: t.screenX,
                            screenY: t.screenY
                        }))
                    }
                    var l = [{
                            position: [0, 0],
                            constraints: [1, 0, 0, 1],
                            cursor: "nw-resize"
                        }, {
                            position: [.5, 0],
                            constraints: [1, 0, 0, 0],
                            cursor: "n-resize"
                        }, {
                            position: [1, 0],
                            constraints: [1, 1, 0, 0],
                            cursor: "ne-resize"
                        }, {
                            position: [1, .5],
                            constraints: [0, 1, 0, 0],
                            cursor: "e-resize"
                        }, {
                            position: [1, 1],
                            constraints: [0, 1, 1, 0],
                            cursor: "se-resize"
                        }, {
                            position: [.5, 1],
                            constraints: [0, 0, 1, 0],
                            cursor: "s-resize"
                        }, {
                            position: [0, 1],
                            constraints: [0, 0, 1, 1],
                            cursor: "sw-resize"
                        }, {
                            position: [0, .5],
                            constraints: [0, 0, 0, 1],
                            cursor: "w-resize"
                        }],
                        d = function() {
                            function a(t, s) {
                                var n = this,
                                    i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                                if (e(this, a), this.options = a.parseOptions(s || {}), !t.nodeName && null == (t = document.querySelector(t))) throw "Unable to find element.";
                                if (!t.getAttribute("src")) throw "Image src not provided.";
                                this._initialized = !1, this._restore = {
                                    parent: t.parentNode,
                                    element: t
                                }, i || (0 === t.width || 0 === t.height ? t.onload = function() {
                                    n.initialize(t)
                                } : this.initialize(t))
                            }
                            return t(a, [{
                                key: "initialize",
                                value: function(e) {
                                    this.createDOM(e), this.options.convertToPixels(this.cropperEl), this.attachHandlerEvents(), this.attachRegionEvents(), this.attachOverlayEvents(), this.box = this.initializeBox(this.options), this.redraw(), this._initialized = !0, null !== this.options.onInitialize && this.options.onInitialize(this)
                                }
                            }, {
                                key: "createDOM",
                                value: function(e) {
                                    var t;
                                    this.containerEl = document.createElement("div"), this.containerEl.className = "croppr-container", this.eventBus = this.containerEl, (t = this.containerEl).addEventListener("touchstart", r), t.addEventListener("touchend", r), t.addEventListener("touchmove", r), this.cropperEl = document.createElement("div"), this.cropperEl.className = "croppr", this.imageEl = document.createElement("img"), this.imageEl.setAttribute("src", e.getAttribute("src")), this.imageEl.setAttribute("alt", e.getAttribute("alt")), this.imageEl.className = "croppr-image", this.imageClippedEl = this.imageEl.cloneNode(), this.imageClippedEl.className = "croppr-imageClipped", this.regionEl = document.createElement("div"), this.regionEl.className = "croppr-region", this.overlayEl = document.createElement("div"), this.overlayEl.className = "croppr-overlay";
                                    var a = document.createElement("div");
                                    a.className = "croppr-handleContainer", this.handles = [];
                                    for (var s = 0; s < l.length; s++) {
                                        var n = new i(l[s].position, l[s].constraints, l[s].cursor, this.eventBus);
                                        this.handles.push(n), a.appendChild(n.el)
                                    }
                                    this.cropperEl.appendChild(this.imageEl), this.cropperEl.appendChild(this.imageClippedEl), this.cropperEl.appendChild(this.regionEl), this.cropperEl.appendChild(this.overlayEl), this.cropperEl.appendChild(a), this.containerEl.appendChild(this.cropperEl), e.parentElement.replaceChild(this.containerEl, e)
                                }
                            }, {
                                key: "setImage",
                                value: function(e) {
                                    var t = this;
                                    return this.imageEl.onload = function() {
                                        t.box = t.initializeBox(t.options), t.redraw()
                                    }, this.imageEl.src = e, this.imageClippedEl.src = e, this
                                }
                            }, {
                                key: "destroy",
                                value: function() {
                                    this._restore.parent.replaceChild(this._restore.element, this.containerEl)
                                }
                            }, {
                                key: "initializeBox",
                                value: function(e) {
                                    var t = e.startSize.width,
                                        a = e.startSize.height,
                                        s = new o(0, 0, t, a);
                                    s.constrainToRatio(e.aspectRatio, [.5, .5]);
                                    var n = e.minSize,
                                        i = e.maxSize;
                                    s.constrainToSize(i.width, i.height, n.width, n.height, [.5, .5], e.aspectRatio);
                                    var r = this.cropperEl.offsetWidth,
                                        l = this.cropperEl.offsetHeight;
                                    s.constrainToBoundary(r, l, [.5, .5]);
                                    var d = this.cropperEl.offsetWidth / 2 - s.width() / 2,
                                        c = this.cropperEl.offsetHeight / 2 - s.height() / 2;
                                    return s.move(d, c), s
                                }
                            }, {
                                key: "redraw",
                                value: function() {
                                    var e = this,
                                        t = Math.round(this.box.width()),
                                        a = Math.round(this.box.height()),
                                        s = Math.round(this.box.x1),
                                        n = Math.round(this.box.y1),
                                        i = Math.round(this.box.x2),
                                        o = Math.round(this.box.y2);
                                    window.requestAnimationFrame((function() {
                                        e.regionEl.style.transform = "translate(" + s + "px, " + n + "px)", e.regionEl.style.width = t + "px", e.regionEl.style.height = a + "px", e.imageClippedEl.style.clip = "rect(" + n + "px, " + i + "px, " + o + "px, " + s + "px)";
                                        for (var r = e.box.getAbsolutePoint([.5, .5]), l = r[0] - e.cropperEl.offsetWidth / 2 >> 31, d = r[1] - e.cropperEl.offsetHeight / 2 >> 31, c = -2 * ((l ^ d) + d + d + 4) + 8, u = 0; u < e.handles.length; u++) {
                                            var m = e.handles[u],
                                                p = m.el.offsetWidth,
                                                _ = m.el.offsetHeight,
                                                w = s + t * m.position[0] - p / 2,
                                                v = n + a * m.position[1] - _ / 2;
                                            m.el.style.transform = "translate(" + Math.round(w) + "px, " + Math.round(v) + "px)", m.el.style.zIndex = c == u ? 5 : 4
                                        }
                                    }))
                                }
                            }, {
                                key: "attachHandlerEvents",
                                value: function() {
                                    var e = this.eventBus;
                                    e.addEventListener("handlestart", this.onHandleMoveStart.bind(this)), e.addEventListener("handlemove", this.onHandleMoveMoving.bind(this)), e.addEventListener("handleend", this.onHandleMoveEnd.bind(this))
                                }
                            }, {
                                key: "attachRegionEvents",
                                value: function() {
                                    var e = this.eventBus;

                                    function t(t) {
                                        t.stopPropagation(), e.dispatchEvent(new CustomEvent("regionmove", {
                                            detail: {
                                                mouseX: t.clientX,
                                                mouseY: t.clientY
                                            }
                                        }))
                                    }

                                    function a(s) {
                                        s.stopPropagation(), document.removeEventListener("mouseup", a), document.removeEventListener("mousemove", t), e.dispatchEvent(new CustomEvent("regionend", {
                                            detail: {
                                                mouseX: s.clientX,
                                                mouseY: s.clientY
                                            }
                                        }))
                                    }
                                    this.regionEl.addEventListener("mousedown", (function(s) {
                                        s.stopPropagation(), document.addEventListener("mouseup", a), document.addEventListener("mousemove", t), e.dispatchEvent(new CustomEvent("regionstart", {
                                            detail: {
                                                mouseX: s.clientX,
                                                mouseY: s.clientY
                                            }
                                        }))
                                    })), e.addEventListener("regionstart", this.onRegionMoveStart.bind(this)), e.addEventListener("regionmove", this.onRegionMoveMoving.bind(this)), e.addEventListener("regionend", this.onRegionMoveEnd.bind(this))
                                }
                            }, {
                                key: "attachOverlayEvents",
                                value: function() {
                                    var e = this,
                                        t = null;

                                    function a(t) {
                                        t.stopPropagation(), e.eventBus.dispatchEvent(new CustomEvent("handlemove", {
                                            detail: {
                                                mouseX: t.clientX,
                                                mouseY: t.clientY
                                            }
                                        }))
                                    }

                                    function s(n) {
                                        n.stopPropagation(), document.removeEventListener("mouseup", s), document.removeEventListener("mousemove", a), 1 !== e.box.width() || 1 !== e.box.height() ? e.eventBus.dispatchEvent(new CustomEvent("handleend", {
                                            detail: {
                                                mouseX: n.clientX,
                                                mouseY: n.clientY
                                            }
                                        })) : e.box = t
                                    }
                                    this.overlayEl.addEventListener("mousedown", (function(n) {
                                        n.stopPropagation(), document.addEventListener("mouseup", s), document.addEventListener("mousemove", a);
                                        var i = e.cropperEl.getBoundingClientRect(),
                                            r = n.clientX - i.left,
                                            l = n.clientY - i.top;
                                        t = e.box, e.box = new o(r, l, r + 1, l + 1), e.eventBus.dispatchEvent(new CustomEvent("handlestart", {
                                            detail: {
                                                handle: e.handles[4]
                                            }
                                        }))
                                    }))
                                }
                            }, {
                                key: "onHandleMoveStart",
                                value: function(e) {
                                    var t = e.detail.handle,
                                        a = [1 - t.position[0], 1 - t.position[1]],
                                        s = this.box.getAbsolutePoint(a),
                                        i = n(s, 2),
                                        o = i[0],
                                        r = i[1];
                                    this.activeHandle = {
                                        handle: t,
                                        originPoint: a,
                                        originX: o,
                                        originY: r
                                    }, null !== this.options.onCropStart && this.options.onCropStart(this.getValue())
                                }
                            }, {
                                key: "onHandleMoveMoving",
                                value: function(e) {
                                    var t = e.detail,
                                        a = t.mouseX,
                                        s = t.mouseY,
                                        n = this.cropperEl.getBoundingClientRect();
                                    a -= n.left, s -= n.top, a < 0 ? a = 0 : a > n.width && (a = n.width), s < 0 ? s = 0 : s > n.height && (s = n.height);
                                    var i = this.activeHandle.originPoint.slice(),
                                        r = this.activeHandle.originX,
                                        l = this.activeHandle.originY,
                                        d = this.activeHandle.handle,
                                        c = 1 === d.constraints[0],
                                        u = 1 === d.constraints[1],
                                        m = 1 === d.constraints[2],
                                        p = 1 === d.constraints[3],
                                        _ = (p || u) && (c || m),
                                        w = p || u ? r : this.box.x1,
                                        v = p || u ? r : this.box.x2,
                                        h = c || m ? l : this.box.y1,
                                        f = c || m ? l : this.box.y2;
                                    w = p ? a : w, v = u ? a : v, h = c ? s : h, f = m ? s : f;
                                    var g = !1,
                                        y = !1;
                                    if ((p || u) && (g = p ? a > r : a < r), (c || m) && (y = c ? s > l : s < l), g) {
                                        var b = w;
                                        w = v, v = b, i[0] = 1 - i[0]
                                    }
                                    if (y) {
                                        var k = h;
                                        h = f, f = k, i[1] = 1 - i[1]
                                    }
                                    var x = new o(w, h, v, f);
                                    if (this.options.aspectRatio) {
                                        var N = this.options.aspectRatio,
                                            q = !1;
                                        _ ? q = s > x.y1 + N * x.width() || s < x.y2 - N * x.width() : (c || m) && (q = !0);
                                        var O = q ? "width" : "height";
                                        x.constrainToRatio(N, i, O)
                                    }
                                    var I = this.options.minSize,
                                        C = this.options.maxSize;
                                    x.constrainToSize(C.width, C.height, I.width, I.height, i, this.options.aspectRatio);
                                    var S = this.cropperEl.offsetWidth,
                                        P = this.cropperEl.offsetHeight;
                                    x.constrainToBoundary(S, P, i), this.box = x, this.redraw(), null !== this.options.onCropMove && this.options.onCropMove(this.getValue())
                                }
                            }, {
                                key: "onHandleMoveEnd",
                                value: function(e) {
                                    null !== this.options.onCropEnd && this.options.onCropEnd(this.getValue())
                                }
                            }, {
                                key: "onRegionMoveStart",
                                value: function(e) {
                                    var t = e.detail,
                                        a = t.mouseX,
                                        s = t.mouseY,
                                        n = this.cropperEl.getBoundingClientRect();
                                    a -= n.left, s -= n.top, this.currentMove = {
                                        offsetX: a - this.box.x1,
                                        offsetY: s - this.box.y1
                                    }, null !== this.options.onCropStart && this.options.onCropStart(this.getValue())
                                }
                            }, {
                                key: "onRegionMoveMoving",
                                value: function(e) {
                                    var t = e.detail,
                                        a = t.mouseX,
                                        s = t.mouseY,
                                        n = this.currentMove,
                                        i = n.offsetX,
                                        o = n.offsetY,
                                        r = this.cropperEl.getBoundingClientRect();
                                    a -= r.left, s -= r.top, this.box.move(a - i, s - o), this.box.x1 < 0 && this.box.move(0, null), this.box.x2 > r.width && this.box.move(r.width - this.box.width(), null), this.box.y1 < 0 && this.box.move(null, 0), this.box.y2 > r.height && this.box.move(null, r.height - this.box.height()), this.redraw(), null !== this.options.onCropMove && this.options.onCropMove(this.getValue())
                                }
                            }, {
                                key: "onRegionMoveEnd",
                                value: function(e) {
                                    null !== this.options.onCropEnd && this.options.onCropEnd(this.getValue())
                                }
                            }, {
                                key: "getValue",
                                value: function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                                    if (null === e && (e = this.options.returnMode), "real" == e) {
                                        var t = this.imageEl.naturalWidth,
                                            a = this.imageEl.naturalHeight,
                                            s = this.imageEl.getBoundingClientRect(),
                                            n = t / s.width,
                                            i = a / s.height;
                                        return {
                                            x: Math.round(this.box.x1 * n),
                                            y: Math.round(this.box.y1 * i),
                                            width: Math.round(this.box.width() * n),
                                            height: Math.round(this.box.height() * i)
                                        }
                                    }
                                    if ("ratio" == e) {
                                        var o = this.imageEl.getBoundingClientRect(),
                                            r = o.width,
                                            l = o.height;
                                        return {
                                            x: c(this.box.x1 / r, 3),
                                            y: c(this.box.y1 / l, 3),
                                            width: c(this.box.width() / r, 3),
                                            height: c(this.box.height() / l, 3)
                                        }
                                    }
                                    if ("raw" == e) return {
                                        x: Math.round(this.box.x1),
                                        y: Math.round(this.box.y1),
                                        width: Math.round(this.box.width()),
                                        height: Math.round(this.box.height())
                                    }
                                }
                            }], [{
                                key: "parseOptions",
                                value: function(e) {
                                    var t = null,
                                        a = {
                                            width: null,
                                            height: null
                                        },
                                        s = {
                                            width: null,
                                            height: null
                                        },
                                        n = {
                                            width: 100,
                                            height: 100,
                                            unit: "%"
                                        },
                                        i = "real",
                                        o = null,
                                        r = null,
                                        l = null,
                                        d = null,
                                        c = null;
                                    void 0 !== e.aspectRatio && ("number" == typeof e.aspectRatio ? c = e.aspectRatio : e.aspectRatio instanceof Array && (c = e.aspectRatio[1] / e.aspectRatio[0]));
                                    var u = null;
                                    void 0 !== e.maxSize && null !== e.maxSize && (u = {
                                        width: e.maxSize[0] || null,
                                        height: e.maxSize[1] || null,
                                        unit: e.maxSize[2] || "px"
                                    });
                                    var m = null;
                                    void 0 !== e.minSize && null !== e.minSize && (m = {
                                        width: e.minSize[0] || null,
                                        height: e.minSize[1] || null,
                                        unit: e.minSize[2] || "px"
                                    });
                                    var p = null;
                                    void 0 !== e.startSize && null !== e.startSize && (p = {
                                        width: e.startSize[0] || null,
                                        height: e.startSize[1] || null,
                                        unit: e.startSize[2] || "%"
                                    });
                                    var _ = null;
                                    "function" == typeof e.onInitialize && (_ = e.onInitialize);
                                    var w = null;
                                    "function" == typeof e.onCropStart && (w = e.onCropStart);
                                    var v = null;
                                    "function" == typeof e.onCropEnd && (v = e.onCropEnd);
                                    var h = null;
                                    "function" == typeof e.onUpdate && (console.warn("Croppr.js: `onUpdate` is deprecated and will be removed in the next major release. Please use `onCropMove` or `onCropEnd` instead."), h = e.onUpdate), "function" == typeof e.onCropMove && (h = e.onCropMove);
                                    var f = null;
                                    if (void 0 !== e.returnMode) {
                                        var g = e.returnMode.toLowerCase();
                                        if (-1 === ["real", "ratio", "raw"].indexOf(g)) throw "Invalid return mode.";
                                        f = g
                                    }
                                    var y = function(e, t) {
                                        return null !== e ? e : t
                                    };
                                    return {
                                        aspectRatio: y(c, t),
                                        maxSize: y(u, a),
                                        minSize: y(m, s),
                                        startSize: y(p, n),
                                        returnMode: y(f, i),
                                        onInitialize: y(_, o),
                                        onCropStart: y(w, r),
                                        onCropMove: y(h, l),
                                        onCropEnd: y(v, d),
                                        convertToPixels: function(e) {
                                            for (var t = e.offsetWidth, a = e.offsetHeight, s = ["maxSize", "minSize", "startSize"], n = 0; n < s.length; n++) {
                                                var i = s[n];
                                                null !== this[i] && ("%" == this[i].unit && (null !== this[i].width && (this[i].width = this[i].width / 100 * t), null !== this[i].height && (this[i].height = this[i].height / 100 * a)), delete this[i].unit)
                                            }
                                        }
                                    }
                                }
                            }]), a
                        }();

                    function c(e, t) {
                        return Number(Math.round(e + "e" + t) + "e-" + t)
                    }
                    var u = function(n) {
                        function i(t, a) {
                            var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                            return e(this, i), s(this, (i.__proto__ || Object.getPrototypeOf(i)).call(this, t, a, n))
                        }
                        return function(e, t) {
                            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                            e.prototype = Object.create(t && t.prototype, {
                                constructor: {
                                    value: e,
                                    enumerable: !1,
                                    writable: !0,
                                    configurable: !0
                                }
                            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
                        }(i, n), t(i, [{
                            key: "getValue",
                            value: function(e) {
                                return a(i.prototype.__proto__ || Object.getPrototypeOf(i.prototype), "getValue", this).call(this, e)
                            }
                        }, {
                            key: "setImage",
                            value: function(e) {
                                return a(i.prototype.__proto__ || Object.getPrototypeOf(i.prototype), "setImage", this).call(this, e)
                            }
                        }, {
                            key: "destroy",
                            value: function() {
                                return a(i.prototype.__proto__ || Object.getPrototypeOf(i.prototype), "destroy", this).call(this)
                            }
                        }, {
                            key: "moveTo",
                            value: function(e, t) {
                                return this.box.move(e, t), this.redraw(), null !== this.options.onCropEnd && this.options.onCropEnd(this.getValue()), this
                            }
                        }, {
                            key: "resizeTo",
                            value: function(e, t) {
                                var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [.5, .5];
                                return this.box.resize(e, t, a), this.redraw(), null !== this.options.onCropEnd && this.options.onCropEnd(this.getValue()), this
                            }
                        }, {
                            key: "scaleBy",
                            value: function(e) {
                                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [.5, .5];
                                return this.box.scale(e, t), this.redraw(), null !== this.options.onCropEnd && this.options.onCropEnd(this.getValue()), this
                            }
                        }, {
                            key: "reset",
                            value: function() {
                                return this.box = this.initializeBox(this.options), this.redraw(), null !== this.options.onCropEnd && this.options.onCropEnd(this.getValue()), this
                            }
                        }]), i
                    }(d);
                    return u
                }()
            }
        },
        t = {};

    function a(s) {
        var n = t[s];
        if (void 0 !== n) return n.exports;
        var i = t[s] = {
            exports: {}
        };
        return e[s].call(i.exports, i, i.exports, a), i.exports
    }
    a.n = e => {
        var t = e && e.__esModule ? () => e.default : () => e;
        return a.d(t, {
            a: t
        }), t
    }, a.d = (e, t) => {
        for (var s in t) a.o(t, s) && !a.o(e, s) && Object.defineProperty(e, s, {
            enumerable: !0,
            get: t[s]
        })
    }, a.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), (() => {
        "use strict";
        const {
            createElement: e,
            useState: t,
            useEffect: s,
            Fragment: n,
            render: o,
            useRef: r
        } = wp.element, {
            dispatch: l,
            select: d
        } = wp.data;

        function c(e) {
            if (void 0 === e) return !0;
            if ("undefined" === e) return !0;
            if (null == e) return !0;
            if ("number" == typeof e) return !1;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }
        const u = () => {
                let e = d("vibebp").getUser();
                return !(c(e) || !e.hasOwnProperty("caps") || !e.caps.hasOwnProperty("manage_options") || !e.caps.manage_options)
            },
            m = e => {
                if (void 0 === e) return "";
                var t = document.createElement("span");
                return t.innerHTML = e, t.textContent || t.innerText
            },
            p = (e, t, a = []) => {
                const n = r(Date.now());
                s((() => {
                    const a = setTimeout((function() {
                        Date.now() - n.current >= t && (e(), n.current = Date.now())
                    }), t - (Date.now() - n.current));
                    return () => {
                        clearTimeout(a)
                    }
                }), [t, ...a])
            };

        function _(e) {
            if (void 0 === e) return !0;
            if ("undefined" === e) return !0;
            if (null == e) return !0;
            if ("number" == typeof e) return !0;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }

        function w(e, t, a = null) {
            if (Array.isArray(t))
                if (a) {
                    for (let s = 0; s < t.length; s++)
                        if (t[s][a] === e[a]) return s
                } else
                    for (let a = 0; a < t.length; a++)
                        if (t[a].id === e.id) return a;
            return -1
        }
        const v = c,
            {
                createContext: h
            } = wp.element,
            f = h({
                course: {},
                activeTab: "create_course",
                update: e => {}
            }),
            {
                createElement: g,
                render: y,
                useState: b,
                useEffect: k,
                useContext: x,
                Fragment: N,
                RawHTML: q
            } = wp.element,
            O = e => {
                x(f);
                const [t, a] = b({});
                k((() => {
                    a(e.field)
                }), [e.field]);
                const s = s => {
                    let n = {
                        ...t
                    };
                    n.value = s, a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                };
                return g("div", {
                    className: "switch"
                }, "S" == t.value ? g("input", {
                    type: "checkbox",
                    id: t.id,
                    checked: !0,
                    onClick: () => s("H")
                }) : g("input", {
                    type: "checkbox",
                    id: t.id,
                    onClick: () => s("S")
                }), g("label", {
                    for: t.id,
                    className: "slider"
                }))
            },
            {
                createElement: I,
                render: C,
                useState: S,
                useEffect: P,
                useContext: E,
                Fragment: z,
                RawHTML: T
            } = wp.element,
            L = e => {
                E(f);
                const [t, a] = S({});
                return P((() => {
                    a(e.field)
                }), [e.field]), I("div", {
                    className: "textarea_field"
                }, I("textarea", {
                    id: t.id,
                    value: t.value,
                    onChange: s => (s => {
                        let n = {
                            ...t
                        };
                        n.value = s.target.value, a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                    })(s),
                    placeholder: t.default
                }, t.value))
            },
            {
                createElement: M,
                render: $,
                useState: j,
                useEffect: A,
                useContext: D,
                Fragment: H,
                RawHTML: U
            } = wp.element,
            F = e => {
                D(f);
                const [t, a] = j(!1), [s, n] = j({});
                return A((() => {
                    let t = {
                        ...e.field
                    };
                    c(e.field.value) && !c(e.field.default) && (t.value = e.field.default), n(t)
                }), [e.field]), M("div", {
                    className: "number"
                }, t || 9999 !== s.value ? M("input", {
                    type: "number",
                    id: s.id,
                    value: s.value,
                    onChange: t => (t => {
                        let a = {
                            ...s
                        };
                        a.value = t.target.value, n(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                    })(t),
                    placeholder: s.default
                }) : M("span", {
                    onClick: () => a(!t)
                }, window.wplms_create_course_data.translations.unlimited))
            };

        function J() {
            return J = Object.assign ? Object.assign.bind() : function(e) {
                for (var t = 1; t < arguments.length; t++) {
                    var a = arguments[t];
                    for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (e[s] = a[s])
                }
                return e
            }, J.apply(this, arguments)
        }
        const {
            createElement: R,
            render: B,
            useState: V,
            useEffect: X,
            useContext: W,
            Fragment: Y,
            RawHTML: Q
        } = wp.element, K = e => {
            W(f);
            const [t, a] = V({});
            X((() => {
                a(e.field)
            }), [e.field]);
            let s = {};
            return t.hasOwnProperty("min") && (s.min = parseInt(t.min)), t.hasOwnProperty("id") ? R("div", {
                className: "number"
            }, R("input", J({}, s, {
                type: "number",
                id: t.id,
                value: t.value,
                onChange: s => {
                    if (t.hasOwnProperty("min") && parseInt(s.target.value) < parseInt(t.min)) return !1;
                    (s => {
                        let n = {
                            ...t
                        };
                        n.value = s.target.value, a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                    })(s)
                },
                placeholder: t.default
            }))) : ""
        }, {
            createElement: G,
            render: Z,
            useState: ee,
            useEffect: te,
            useContext: ae,
            Fragment: se,
            RawHTML: ne
        } = wp.element, ie = e => {
            const [t, a] = ee({});
            return ae(f), te((() => {
                a(e.field)
            }), [e.field]), G("div", {
                className: "vibe_form_field " + t.id
            }, G("input", {
                type: "text",
                id: t.id,
                value: t.value,
                onChange: s => (s => {
                    let n = {
                        ...t
                    };
                    n.value = s.target.value, a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                })(s),
                placeholder: t.default
            }))
        }, {
            createElement: oe,
            render: re,
            useState: le,
            useEffect: de,
            useContext: ce,
            useRef: ue,
            Fragment: me,
            RawHTML: pe
        } = wp.element, _e = e => {
            const t = ue(null),
                [a, s] = le(e.field),
                [n, i] = le("vibe_form_field " + e.field.id);
            return ce(f), de((() => {
                s(e.field)
            }), [e.field]), de((() => {
                if (a.hasOwnProperty("isEmpty") && a.isEmpty) {
                    let e = n;
                    e = n + " erroremptyvalue", i(e);
                    var s = window.scrollX,
                        o = window.scrollY;
                    window.scrollTo(s, o), t.current.focus()
                } else {
                    let t = "vibe_form_field " + e.field.id;
                    i(t)
                }
            }), [a, a.isEmpty, a.random]), oe("div", {
                className: n
            }, oe("input", {
                ref: t,
                type: "text",
                className: "text_field",
                onChange: t => {
                    (t => {
                        let n = {
                            ...a
                        };
                        n.value = t, t.length && (n.isEmpty = !1), s(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                    })(t.target.value)
                },
                placeholder: a.default,
                value: a.value,
                onBlur: t => {
                    e.update(a, e.fieldIndex, "enabledrafting")
                }
            }))
        }, {
            createElement: we,
            render: ve,
            useState: he,
            useEffect: fe,
            useContext: ge,
            Fragment: ye,
            RawHTML: be
        } = wp.element, ke = e => {
            ge(f);
            const [t, a] = he({});
            return fe((() => {
                a(e.field)
            }), [e.field]), we("div", {
                className: "select"
            }, we("select", {
                id: t.id,
                onChange: s => (s => {
                    let n = {
                        ...t
                    };
                    n.value = s.target.value, a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                })(s)
            }, t.options && t.options.length ? t.options.map(((e, a) => {
                let s = !1;
                return e.value == t.value && (s = !0), we("option", {
                    value: e.value,
                    selected: s
                }, e.label)
            })) : ""))
        }, {
            createElement: xe,
            render: Ne,
            useState: qe,
            useEffect: Oe,
            useContext: Ie,
            Fragment: Ce,
            RawHTML: Se,
            useRef: Pe
        } = wp.element, Ee = e => {
            const [t, a] = qe(e.field), [s, n] = qe(null), i = Pe(null);
            Oe((() => {
                if (a(e.field), i.current) {
                    if (s) return void s.set("onChange", o);
                    let t = {
                        altInput: !0,
                        dateFormat: "Y-m-d",
                        defaultDate: e.field.hasOwnProperty("value") && e.field.value.length ? e.field.value : [],
                        onChange: o
                    };
                    window.vibebp.settings.flatpickrLang && (t.locale = window.vibebp.settings.flatpickrLang);
                    let a = flatpickr(i.current, t);
                    n(a)
                }
            }));
            const o = s => {
                let n = {
                    ...t
                };
                if (s && s.length) {
                    var i = s[0].getDate();
                    (i = i.toString()).length < 2 && (i = "0" + i);
                    var o = s[0].getMonth() + 1;
                    (o = o.toString()).length < 2 && (o = "0" + o);
                    var r = s[0].getFullYear() + "-" + o + "-" + i;
                    n.value = r
                } else n.value = "";
                a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
            };
            return xe("div", {
                className: "date"
            }, xe("input", {
                type: "text",
                ref: i
            }), t.hasOwnProperty("value") && t.value && t.value.length ? xe("span", {
                className: "vicon vicon-close",
                onClick: () => {
                    let a = {
                        ...t
                    };
                    a.value = null, e.update(a, e.fieldIndex, "fieldvaluechanged"), s && s.clear()
                }
            }) : "")
        }, {
            createElement: ze,
            render: Te,
            useState: Le,
            useEffect: Me,
            useContext: $e,
            Fragment: je,
            RawHTML: Ae,
            useRef: De
        } = wp.element, He = e => {
            const [t, a] = Le(e.field), [s, n] = Le(null), i = De(null);
            Me((() => {
                if (a(e.field), i.current) {
                    if (s) return void s.set("onChange", o);
                    let t = {
                            enableTime: !0,
                            noCalendar: !0,
                            dateFormat: "H:i",
                            defaultDate: e.field.hasOwnProperty("value") && e.field.value.length ? e.field.value : [],
                            onChange: o
                        },
                        a = flatpickr(i.current, t);
                    window.vibebp.settings.flatpickrLang && (t.locale = window.vibebp.settings.flatpickrLang), n(a)
                }
            }));
            const o = s => {
                let n = {
                    ...t
                };
                if (s && s.length) {
                    var i = s[0].getHours() + ":" + s[0].getMinutes();
                    n.value = i
                } else n.value = "";
                a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
            };
            return ze("div", {
                className: "date time"
            }, ze("input", {
                type: "text",
                ref: i
            }), t.hasOwnProperty("value") && t.value && t.value.length ? ze("span", {
                className: "vicon vicon-close",
                onClick: () => {
                    let a = {
                        ...t
                    };
                    a.value = null, e.update(a, e.fieldIndex, "fieldvaluechanged"), s && s.clear()
                }
            }) : "")
        }, {
            createElement: Ue,
            render: Fe,
            useState: Je,
            useEffect: Re,
            useContext: Be,
            Fragment: Ve,
            RawHTML: Xe
        } = wp.element, {
            dispatch: We,
            select: Ye
        } = wp.data, Qe = e => {
            const t = Be(f),
                [a, s] = Je(!1),
                [n, i] = Je({}),
                [o, r] = Je(-1),
                {
                    dispatch: l,
                    select: d
                } = wp.data;
            let c = d("vibebp").getUser();
            c.token = d("vibebp").getToken(), Re((() => {
                i(e.field), s(!0)
            }), [e.field]);
            const u = (t, a) => {
                if ("fieldvaluechanged" == a) {
                    let a = {
                        ...n
                    };
                    a.settings[t.index] = t.field, e.update({
                        field: a,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex,
                        index: e.index,
                        child_index: t.index
                    }, "fieldvaluechanged")
                }
            };
            return a ? Ue(Ve, null, Ue("strong", {
                className: "title"
            }, Ue("i", {
                className: "icon-attachment"
            }), n.data.text), Ue("ul", {
                className: "data_links"
            }, Ue("li", null, Ue("a", {
                className: "edit",
                title: "Edit Assignment",
                onClick: a => {
                    var s;
                    s = n.data.id, v(n.settings) ? fetch(`${window.wplms_create_course_data.api_url}/curriculum/${s}?force`, {
                        method: "post",
                        body: JSON.stringify({
                            type: n.type,
                            token: c.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        if (console.log(t), t.status) {
                            let a = {
                                ...n
                            };
                            a.settings = t.data, i(a), e.update({
                                field: a,
                                fieldIndex: e.fieldIndex,
                                cindex: e.cindex,
                                index: e.index
                            }, "assignmentsettingsadded"), r(e.index)
                        }
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), l("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })) : r(e.cindex), t.update({
                        field: e.index,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "currentEditingassignmentIndex")
                }
            }, Ue("span", {
                className: "dashicons dashicons-edit"
            }))), Ue("li", null, Ue("a", {
                className: "preview",
                title: "Preview",
                target: "_blank"
            }, Ue("span", {
                className: "dashicons dashicons-visibility"
            }))), Ue("li", null, Ue("a", {
                className: "remove",
                title: "Remove",
                onClick: a => {
                    t.course[e.tabIndex].fields[e.fieldIndex].curriculum[e.cindex].settings[e.ufieldIndex].value && t.course[e.tabIndex].fields[e.fieldIndex].curriculum[e.cindex].settings[e.ufieldIndex].value.length && t.update({
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex,
                        index: e.index,
                        ufieldIndex: e.ufieldIndex
                    }, "removeassigmentfromunit")
                }
            }, Ue("span", {
                className: "dashicons dashicons-no-alt"
            }))), Ue("li", null, Ue("a", {
                className: "delete",
                title: "Delete"
            }, Ue("span", {
                className: "dashicons dashicons-trash"
            })))), n.settings && n.settings.length && !v(t.course[e.tabIndex].fields[e.fieldIndex].curriculum[e.cindex].settings[e.ufieldIndex].currentEditingassignmentIndex) && t.course[e.tabIndex].fields[e.fieldIndex].curriculum[e.cindex].settings[e.ufieldIndex].currentEditingassignmentIndex === e.index ? Ue("div", {
                className: "element_overlay overlay"
            }, Ue("span", {
                class: "close-pop dashicons dashicons-no-alt",
                onClick: () => {
                    r(-1), t.update({
                        field: -1,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "currentEditingassignmentIndex")
                }
            }), Ue("div", {
                className: "list-group"
            }, n.settings && n.settings.length ? n.settings.map(((t, a) => Ue("div", {
                className: "list-group-item"
            }, Ue(fm, {
                field: t,
                fieldIndex: a,
                tabIndex: e.fieldIndex,
                update: u,
                cindex: e.cindex,
                aindex: e.index,
                index: a
            })))) : "")) : "") : ""
        }, {
            createElement: Ke,
            render: Ge
        } = wp.element, Ze = e => Ke("div", {
            class: "lds-ellipsis"
        }, Ke("div", null), Ke("div", null), Ke("div", null), Ke("div", null)), {
            createElement: et,
            render: tt,
            useState: at,
            useEffect: st,
            useContext: nt,
            Fragment: it,
            RawHTML: ot
        } = wp.element, rt = e => {
            const [t, a] = at(e.field), [s, n] = at(""), [i, o] = at([]), [r, l] = at({}), [d, c] = at(!1), {
                dispatch: u,
                select: m
            } = wp.data;
            let p = m("vibebp").getUser();
            return p.token = m("vibebp").getToken(), st((() => {
                let s = {
                    ...t
                };
                r.id && (s.value = r.id, s.show_value = r, a(s), e.update(s, "fieldvaluechanged"))
            }), [r]), st((() => {
                if (s.length > 3) {
                    c(!0);
                    let t = "",
                        a = "";
                    e.field.cpt && (t = e.field.cpt, a = "selectcpt"), e.field.taxonomy && (t = e.field.taxonomy, a = "taxonomy"), fetch(`${window.wplms_create_course_data.api_url}/${a}/${t}?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            search: s,
                            token: p.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        console.log(e), e.status && Array.isArray(e.posts) && (e.posts.map((e => {
                            localStorage.setItem("post_" + e.id, JSON.stringify(e))
                        })), o(e.posts)), c(!1)
                    })).catch((e => {
                        c(!1), console.error("Uh oh, an error!", e), u("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }), [s]), et("div", {
                className: "selectcptfield"
            }, et("div", {
                className: "selectcptfield_list"
            }, r && r.text ? et("div", {
                className: "selectcptfield_items"
            }, et("span", {
                type: t.cpt,
                onClick: () => {
                    l({})
                },
                dangerouslySetInnerHTML: {
                    __html: r.text
                }
            })) : et("div", {
                className: d ? "control is-loading" : "control"
            }, et("input", {
                type: "text",
                value: s,
                placeholder: window.wplms_create_course_data.translations.type_keyword,
                onChange: e => {
                    n(e.target.value)
                }
            }))), i.length ? et("div", {
                className: "search_results"
            }, i.map(((e, t) => et("div", {
                className: "search_result selectcpt",
                onClick: () => {
                    n("");
                    let a = {
                        ...r
                    };
                    a = e, i.splice(t, 1), l(a), o([])
                }
            }, et("span", {
                dangerouslySetInnerHTML: {
                    __html: e.text
                }
            }))))) : "")
        }, {
            createElement: lt,
            render: dt,
            useState: ct,
            useEffect: ut,
            useContext: mt,
            Fragment: pt
        } = wp.element, {
            dispatch: _t,
            select: wt
        } = wp.data, vt = e => {
            const t = mt(f),
                [a, s] = ct({}),
                [n, i] = ct(!1),
                [o, r] = ct(""),
                [l, d] = ct({}),
                [c, u] = ct(!1),
                [m, p] = ct(!1),
                [_, w] = ct("");
            let v = wt("vibebp").getUser();
            v.token = wt("vibebp").getToken(), ut((() => {
                s(e.field), i(!0), r("assignment")
            }), [e.field]);
            const h = (s, n) => {
                    if (console.log(s, n), "fieldvaluechanged" == n) {
                        let n = {
                            ...a
                        };
                        n && n.value && n.value[s.index] && (n.value[s.index] = s.field, t.update({
                            field: n,
                            ufieldIndex: e.ufieldIndex,
                            fieldIndex: e.fieldIndex,
                            cindex: e.cindex,
                            child_index: s.child_index,
                            value_index: s.index
                        }, "curriculumchangedunitdata"))
                    }
                    if (n = "assignmentsettingsadded") {
                        let n = {
                            ...a
                        };
                        n.value[s.index].settings || (n.value[s.index].settings = []), n && n.value && n.value[s.index] && s.field.settings && (n.value[s.index].settings = s.field.settings, t.update({
                            field: n,
                            ufieldIndex: e.ufieldIndex,
                            fieldIndex: e.fieldIndex,
                            cindex: e.cindex
                        }, "curriculumchangedunitdata"))
                    }
                },
                g = (s, n = null) => {
                    let i = {};
                    l && l.id && (n = l), i = {
                        type: s,
                        data: n
                    };
                    let o = {
                        ...a
                    };
                    o.value || (o.value = []), o.value.push(i), console.log(o), t.update({
                        field: o,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "curriculumchangedunitdata")
                };
            return n ? lt("div", {
                className: "unitassignments unit_field"
            }, a && a.value && a.value.length ? a.value.map(((t, a) => lt("div", {
                className: "list-group-item assignment_block"
            }, lt(Qe, {
                field: t,
                fieldIndex: e.fieldIndex,
                cindex: e.cindex,
                index: a,
                update: h,
                tabIndex: e.tabIndex,
                ufieldIndex: e.ufieldIndex
            })))) : "", lt("div", {
                className: "add_cpt_wrapper"
            }, lt("div", {
                className: "select_cpt_wrapper"
            }, lt("a", {
                className: "more",
                onClick: () => {
                    u(!c), p(!1)
                }
            }, lt("i", {
                className: "icon-users"
            }), " Select existing ", o), c ? lt("div", {
                className: "select_existing_cpt"
            }, lt(rt, {
                field: {
                    cpt: o
                },
                update: (e, t) => {
                    "fieldvaluechanged" == t && d(e.show_value)
                }
            }), lt("div", null, lt("a", {
                class: "use_selected_curriculum button",
                onClick: () => {
                    g(o)
                }
            }, "Set ", o))) : ""), lt("div", {
                className: "create_cpt_wrapper"
            }, lt("a", {
                class: "more",
                onClick: () => {
                    p(!m), u(!1)
                }
            }, lt("i", {
                class: "icon-user"
            }), " Create new ", o), m ? lt("div", {
                className: "new_cpt"
            }, lt("input", {
                type: "text",
                className: "form_field vibe_curriculum_title",
                value: _,
                placeholder: o + " title",
                onChange: e => {
                    w(e.target.value)
                }
            }), lt("a", {
                className: "button small create_new_curriculum",
                onClick: () => {
                    var e;
                    e = o, _.length && fetch(`${window.wplms_create_course_data.api_url}/create/${e}?post`, {
                        method: "post",
                        body: JSON.stringify({
                            name: _,
                            token: v.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        console.log(t), t.status && (d(t.data), g(e, t.data))
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), _t("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })), w("")
                }
            }, "Create ", o)) : ""))) : ""
        }, {
            createElement: ht,
            render: ft,
            useState: gt,
            useEffect: yt,
            useContext: bt,
            Fragment: kt,
            RawHTML: xt
        } = wp.element, {
            dispatch: Nt,
            select: qt
        } = wp.data, Ot = e => {
            const [t, a] = gt(e.timestamp), [s, n] = gt(0);
            let i = Math.floor(Date.now() / 1e3);
            return yt((() => {
                if (a(parseInt(e.timestamp)), e.timestamp)
                    if (e.hasOwnProperty("notimediff")) n(parseInt(e.timestamp));
                    else {
                        let t = e.timestamp,
                            a = e.timestamp.toString();
                        a.includes("-") && (t = function(e) {
                            const t = Date.parse(e);
                            return isNaN(t) ? "string" == typeof e ? Date.parse(e.replace(/-/g, "/").replace(/[a-z]+/gi, " ")) : e : t
                        }(a), t /= 1e3), parseInt(t) > i ? n(parseInt(t) - i) : n(i - parseInt(t))
                    }
            }), [e.timestamp]), ht("span", {
                className: "friendly_time"
            }, (() => {
                if (s < 0) return window.wplms_course_data.translations.expired;
                let t, a, n, i = 0,
                    o = 0,
                    r = 0,
                    l = [{
                        label: window.wplms_course_data.time_labels.year.single,
                        multi: window.wplms_course_data.time_labels.year.multi,
                        value: 31536e3
                    }, {
                        label: window.wplms_course_data.time_labels.month.single,
                        multi: window.wplms_course_data.time_labels.month.multi,
                        value: 2592e3,
                        max: 12
                    }, {
                        label: window.wplms_course_data.time_labels.week.single,
                        multi: window.wplms_course_data.time_labels.week.multi,
                        value: 604800,
                        max: 7
                    }, {
                        label: window.wplms_course_data.time_labels.day.single,
                        multi: window.wplms_course_data.time_labels.day.multi,
                        value: 86400,
                        max: 31
                    }, {
                        label: window.wplms_course_data.time_labels.hour.single,
                        multi: window.wplms_course_data.time_labels.hour.multi,
                        value: 3600,
                        max: 24
                    }, {
                        label: window.wplms_course_data.time_labels.minute.single,
                        multi: window.wplms_course_data.time_labels.minute.multi,
                        value: 60,
                        max: 60
                    }, {
                        label: window.wplms_course_data.time_labels.second.single,
                        multi: window.wplms_course_data.time_labels.second.multi,
                        value: 1,
                        max: 60
                    }];
                if (s >= 776736e3) return window.wplms_course_data.translations.unlimited_time;
                if (s <= 0) return e.hasOwnProperty("notimediff") ? s + " " + window.wplms_course_data.time_labels.second.multi : window.wplms_course_data.translations.just_now;
                for (let e = 0; e < l.length; e++)
                    if (a = l[e], o = e, a.value < s) {
                        i = Math.floor(s / a.value), i > a.max && (i = a.max);
                        break
                    } return t = i + " " + (i > 1 ? a.multi : a.label), a.value > 1 && (n = l[o + 1], r = Math.floor(s % a.value / n.value), r && (t += ", " + r + " " + (r > 1 ? n.multi : n.label))), t
            })())
        }, {
            createElement: It,
            render: Ct,
            useState: St,
            useEffect: Pt,
            useContext: Et,
            Fragment: zt
        } = wp.element, {
            dispatch: Tt,
            select: Lt
        } = wp.data, Mt = e => {
            const t = Et(f),
                [a, s] = St(!1),
                [n, i] = St(e.field),
                [o, r] = St(!1),
                [l, d] = St(""),
                [c, u] = St({}),
                [m, p] = St(!1),
                [_, w] = St(!1),
                [h, g] = St({}),
                [y, b] = St({}),
                [k, x] = St(!1),
                N = (Lt("vibebp").getUser(), Lt("vibebp").getToken());
            Pt((() => {
                e.field && e.field.hasOwnProperty("show_value") && u(e.field.show_value), i(e.field), d("groups")
            }), [e.field]), Pt((() => {
                if (n.hasOwnProperty("value") && n.value) {
                    x(!0);
                    let e = n.value;
                    "object" == typeof n.value && (e = n.value.id), fetch(`${window.wplms_create_course_data.api_url}/component/get_group/?force`, {
                        method: "post",
                        body: JSON.stringify({
                            token: N,
                            id: e
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        x(!1), s(!1), e.status ? b(e.group) : Tt("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        x(!1), console.error("Uh oh, an error!", e), Tt("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }), [n.value]);
            const q = (a = null) => {
                    c && c.id && v(a) && (a = c);
                    let s = {
                        ...n
                    };
                    s.value || (s.value = {}), s.value = a, t.update({
                        field: s,
                        index: e.fieldIndex
                    }, "fieldvaluechanged")
                },
                O = (e, t) => {
                    let a = {
                        ...h
                    };
                    a[e] = t, g(a)
                };
            return It("div", {
                className: "coursegroups unit_field"
            }, a ? It("div", {
                className: "add_cpt"
            }, m ? It("span", null, It("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => p(!1)
            }), It("span", {
                className: "vicon vicon-close",
                onClick: () => s(!1)
            })) : "", "select" == m ? It("div", {
                className: "select_existing_cpt"
            }, It(rt, {
                field: {
                    cpt: l
                },
                update: (e, t) => {
                    "fieldvaluechanged" == t && u(e.show_value)
                }
            }), It("div", null, It("a", {
                class: "use_selected_curriculum button is-primary",
                onClick: () => {
                    q()
                }
            }, window.wplms_create_course_data.translations.select_group))) : "create" == m ? It("div", {
                className: "new_cpt"
            }, It("input", {
                type: "text",
                className: "form_field vibe_curriculum_title",
                value: h.name,
                placeholder: l + " title",
                onChange: e => {
                    O("name", e.target.value)
                }
            }), It("select", {
                onChange: e => {
                    O("privacy", e.target.value)
                }
            }, n.privacy_options && n.privacy_options.length ? n.privacy_options.map(((e, t) => {
                let a = !1;
                return e.value === h.privacy && (a = !0), It("option", {
                    value: e.value,
                    selected: a
                }, e.label)
            })) : ""), It("textarea", {
                value: h.description,
                onChange: e => {
                    O("description", e.target.value)
                },
                placeholder: window.wplms_create_course_data.translations.description
            }, h.description), It("a", {
                className: _ ? "is-loading button is-primary" : "button is-primary",
                onClick: () => {
                    var e;
                    e = l, h && h.name.length ? (w(!0), fetch(`${window.wplms_create_course_data.api_url}/create/component/${e}?post`, {
                        method: "post",
                        body: JSON.stringify({
                            token: N,
                            name: h.name,
                            privacy: h.privacy,
                            description: h.description
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        w(!1), e.status && (u(e.data), q(e.data))
                    })).catch((e => {
                        w(!1), console.error("Uh oh, an error!", e), Tt("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))) : Tt("vibebp").addNotification({
                        text: window.wplms_course_data.translations.missing_data
                    })
                }
            }, window.wplms_create_course_data.translations.create_group)) : It(zt, null, It("div", null, It("a", {
                className: "link",
                onClick: () => {
                    p("select")
                }
            }, It("i", {
                className: "vicon vicon-user"
            }), " ", window.wplms_create_course_data.translations.select_group), It("a", {
                class: "link",
                onClick: () => {
                    p("create")
                }
            }, It("i", {
                class: "vicon vicon-user"
            }), " ", window.wplms_create_course_data.translations.create_group)))) : n.value ? It("div", {
                className: "course_group"
            }, k ? It(Ze, null) : It(zt, null, It("span", {
                className: "vicon vicon-pencil-alt",
                onClick: () => {
                    s(!0)
                }
            }), It("img", {
                src: y.image
            }), It("strong", null, It("span", null, window.wplms_create_course_data.translations[y.status]), y.title), It("p", null, y.description), It("div", {
                className: "group_meta"
            }, It("span", null, It("span", {
                className: "vicon vicon-users"
            }), y.member_count), It("span", null, It("span", {
                className: "vicon vicon-time"
            }), It(Ot, {
                timestamp: y.last_activity
            }))))) : It("span", {
                onClick: () => {
                    s(!0)
                }
            }, It("span", {
                className: "vicon vicon-user"
            }), It("strong", null, n.label)))
        }, {
            createElement: $t,
            render: jt,
            useState: At,
            useEffect: Dt,
            useContext: Ht,
            Fragment: Ut
        } = wp.element, {
            select: Ft,
            dispatch: Jt
        } = wp.data, Rt = e => {
            const {
                dispatch: t,
                select: a
            } = wp.data;
            let s = a("vibebp").getUser();
            s.token = a("vibebp").getToken();
            const n = Ht(f),
                [i, o] = At(!1),
                [r, l] = At(e.field),
                [d, c] = At(!1),
                [u, m] = At(""),
                [p, _] = At({}),
                [w, h] = At(!1),
                [g, y] = At({}),
                [b, k] = At({}),
                [x, N] = At(!1),
                q = a("vibebp").getToken();
            Dt((() => {
                e.field && e.field.hasOwnProperty("show_value") && _(e.field.show_value), l(e.field), m("forum")
            }), [e.field]), Dt((() => {
                if (r.hasOwnProperty("value") && r.value) {
                    c(!0);
                    let e = r.value;
                    "object" == typeof r.value && (e = r.value.id), fetch(`${window.wplms_create_course_data.api_url}/component/get_forum/?force`, {
                        method: "post",
                        body: JSON.stringify({
                            token: q,
                            id: e
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        c(!1), o(!1), e.status ? k(e.forum) : t("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        c(!1), console.error("Uh oh, an error!", e), t("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }), [r.value]);
            const O = (t = null) => {
                    p && p.id && v(t) && (t = p);
                    let a = {
                        ...r
                    };
                    a.value || (a.value = {}), a.value = t, n.update({
                        field: a,
                        index: e.fieldIndex
                    }, "fieldvaluechanged")
                },
                I = (e, t) => {
                    let a = {
                        ...g
                    };
                    a[e] = t, console.log(a), y(a)
                };
            return $t("div", {
                className: "courseforums unit_field"
            }, i ? $t(Ut, null, $t("div", {
                className: "add_cpt"
            }, w ? $t("span", null, $t("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => h(!1)
            }), $t("span", {
                className: "vicon vicon-close",
                onClick: () => o(!1)
            })) : "", "select" == w ? $t("div", {
                className: "select_existing_cpt"
            }, $t(rt, {
                field: {
                    cpt: u
                },
                update: (e, t) => {
                    "fieldvaluechanged" == t && _(e.show_value)
                }
            }), $t("div", null, $t("a", {
                class: "use_selected_curriculum is-primary  button",
                onClick: () => {
                    O()
                }
            }, window.wplms_create_course_data.translations.select_forum))) : "create" == w ? $t("div", {
                className: "new_cpt"
            }, $t("input", {
                type: "text",
                className: "form_field vibe_curriculum_title",
                value: g.name,
                placeholder: u + " title",
                onChange: e => {
                    I("name", e.target.value)
                }
            }), $t("select", {
                onChange: e => {
                    I("privacy", e.target.value)
                }
            }, r.privacy_options && r.privacy_options.length ? r.privacy_options.map(((e, t) => {
                let a = !1;
                return e.value === g.privacy && (a = !0), $t("option", {
                    value: e.value,
                    selected: a
                }, e.label)
            })) : ""), $t("textarea", {
                value: g.description,
                onChange: e => {
                    I("description", e.target.value)
                },
                placeholder: window.wplms_create_course_data.translations.description
            }, g.description), $t("a", {
                className: x ? "is-loading button is-primary create_new_curriculum" : "button  is-primary create_new_curriculum",
                onClick: () => {
                    var e;
                    e = u, g && g.name.length && (N(!0), fetch(`${window.wplms_create_course_data.api_url}/create/component/${e}?post`, {
                        method: "post",
                        body: JSON.stringify({
                            token: s.token,
                            ...g
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        N(!1), e.status && (_(e.data), o(!1), O(e.data))
                    })).catch((e => {
                        N(!1), console.error("Uh oh, an error!", e), t("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })))
                }
            }, window.wplms_create_course_data.translations.create_forum)) : $t(Ut, null, $t("div", null, $t("a", {
                className: "link",
                onClick: () => {
                    h("select")
                }
            }, $t("i", {
                className: "vicon vicon-comments"
            }), " ", window.wplms_create_course_data.translations.select_forum), $t("a", {
                class: "link",
                onClick: () => {
                    h("create")
                }
            }, $t("i", {
                class: "vicon vicon-comment"
            }), " ", window.wplms_create_course_data.translations.create_forum))))) : r.value ? $t("div", {
                className: "course_forum"
            }, d ? $t(Ze, null) : $t(Ut, null, $t("div", null, $t("span", {
                className: "vicon vicon-pencil-alt",
                onClick: () => {
                    o(!0)
                }
            }), $t("strong", null, $t("span", null, b.private ? window.wplms_create_course_data.translations.private : window.wplms_create_course_data.translations.public), b.title), $t("p", null, b.description)), $t("div", {
                className: "forum_meta"
            }, $t("span", null, $t("span", {
                className: "vicon vicon-comments"
            }), " ", b.topic_count), $t("span", null, $t("span", {
                className: "vicon vicon-time"
            }), "  ", b.last_active)))) : $t("span", {
                onClick: () => {
                    o(!0)
                }
            }, $t("span", {
                className: "vicon vicon-comments"
            }), $t("strong", null, r.label)))
        }, {
            createElement: Bt,
            render: Vt,
            useState: Xt,
            useEffect: Wt,
            useContext: Yt,
            Fragment: Qt
        } = wp.element, {
            dispatch: Kt,
            select: Gt
        } = wp.data, Zt = e => {
            let t = Gt("vibebp").getUser();
            t.token = Gt("vibebp").getToken();
            const a = Yt(f),
                [s, n] = Xt(e.field),
                [i, o] = Xt(!1),
                [r, l] = Xt(!1),
                [d, c] = Xt(!1),
                [u, m] = Xt(!1),
                [p, _] = Xt(!1),
                [w, h] = Xt({});
            Wt((() => {
                let t = {
                    ...e.field
                };
                !v(e.field.value) && v(e.field.show_value) ? s.value !== e.field.value && (l(!0), fetch(`${window.wplms_create_course_data.api_url}/selectcpt/${t.cpt}?nocache`, {
                    method: "post",
                    body: JSON.stringify({
                        field: e.field,
                        token: Gt("vibebp").getToken()
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    l(!1), e.status ? (t.show_value = e.posts.show_value, n(t)) : (t.value = 0, e.hasOwnProperty("message") && Kt("vibebp").setNotification({
                        text: e.message
                    }), n(t))
                })).catch((e => {
                    l(!1), console.error("Uh oh, an error!", e), Kt("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))) : (t.hasOwnProperty("is_bundle") && t.is_bundle && _(!0), n(t))
            }), [e.field]);
            const g = (t, i) => {
                    let r = {
                        ...s
                    };
                    "fieldvaluechanged" == i && (r.value = t.show_value.id, r.show_value = t.show_value, "bundle" == d ? (_(!0), r.is_bundle = !0) : (_(!1), r.is_bundle = !1), Object.keys(t.show_value.fields).map(((e, a) => {
                        if ("meta" == e) t.show_value.fields.meta.map((e => {
                            r.fields.findIndex((t => t.id == e.meta_key)) > -1 && (r.fields[r.fields.findIndex((t => t.id == e.meta_key))].value = e.meta_value)
                        }));
                        else {
                            let a = r.fields.findIndex((t => t.id == e));
                            a > -1 ? r.fields[a].value = t.show_value.fields[e] : r.fields.push({
                                id: e,
                                value: t.show_value.fields[e]
                            })
                        }
                    }))), a.update({
                        field: r,
                        index: e.fieldIndex
                    }, "fieldvaluechanged"), n(r), o(!1)
                },
                y = e => {
                    console.log(s.fields.findIndex((t => t.id == e.field.id)), s, e);
                    let t = {
                        ...s
                    };
                    t.fields[s.fields.findIndex((t => t.id == e.field.id))] = e.field, n(t)
                };
            return Bt("div", {
                className: "course_product_price"
            }, i ? Bt(Qt, null, Bt("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => {
                    o(!1)
                }
            }), Bt("div", {
                className: "add_cpt"
            }, "create" != d && "bundle" != d ? Bt("div", {
                className: "select_cpt_wrapper"
            }, "select" == d ? Bt("div", {
                className: "select_existing_cpt"
            }, Bt(rt, {
                field: {
                    cpt: s.cpt
                },
                update: e => {
                    h(e)
                }
            }), Bt("div", {
                className: "selectcptactions"
            }, Bt("a", {
                className: "button is-primary",
                onClick: () => {
                    g(w, "fieldvaluechanged")
                }
            }, Bt("i", {
                class: "vicon vicon-plus"
            }), " ", window.wplms_create_course_data.translations.add_cpt.product.add), Bt("a", {
                className: "link",
                onClick: () => {
                    c(!1)
                }
            }, window.wplms_create_course_data.translations.cancel))) : Bt("a", {
                onClick: () => {
                    c("select")
                }
            }, Bt("i", {
                className: "vicon vicon-search"
            }), " ", window.wplms_create_course_data.translations.add_cpt.product.search)) : "", "select" != d && "bundle" != d ? Bt("div", {
                className: "create_cpt_wrapper"
            }, "create" == d ? Bt("div", {
                className: "new_cpt_wrapper"
            }, Bt("div", {
                className: "new_cpt_wrapper"
            }, s.fields.map(((e, t) => {
                if (!(e && e.hasOwnProperty("is_child") && e.is_child)) return Bt(Qt, null, Bt(fm, {
                    field: e,
                    fieldIndex: t,
                    update: y
                }), e.hasOwnProperty("children") && e.children.length && !v(e.value) && "H" != e.value ? e.children.map((e => {
                    let t = s.fields.findIndex((t => t && t.hasOwnProperty("id") && t.id == e));
                    return Bt(fm, {
                        field: s.fields[t],
                        fieldIndex: t,
                        update: y
                    })
                })) : "")
            }))), Bt("div", null, Bt("a", {
                className: u ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    (() => {
                        let n = {
                            ...s
                        };
                        m(!0);
                        let i = {
                            post_title: "",
                            meta: []
                        };
                        if (n.hasOwnProperty("show_value") && !v(n.show_value) && n.show_value.hasOwnProperty("id")) i = {
                            id: n.show_value.id,
                            meta: []
                        };
                        else {
                            let e = a.course[0].fields;
                            void 0 === e[e.findIndex((e => "post_title" == e.id))].value && (m(!1), Kt("vibebp").addNotification({
                                text: window.wplms_create_course_data.translations.missing_title
                            })), i = {
                                post_title: e[e.findIndex((e => "post_title" == e.id))].value,
                                post_content: e[e.findIndex((e => "post_content" == e.id))].value,
                                meta: []
                            }
                        }
                        s.fields.map((e => {
                            "meta" == e.from && i.meta.push({
                                meta_key: e.id,
                                meta_value: e.value
                            })
                        })), fetch(`${window.wplms_create_course_data.api_url}/createElement/${n.cpt}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...i,
                                token: t.token
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            m(!1), t.status ? (n.value = t.data.id, n.hasOwnProperty("show_value") || (n.show_value = {}), n.show_value = t.data, _(!1), n.is_bundle = !1, a.update({
                                field: n,
                                index: e.fieldIndex
                            }, "fieldvaluechanged"), o(!1)) : t.hasOwnProperty("message") && Kt("vibebp").addNotification({
                                text: t.message
                            })
                        })).catch((e => {
                            m(!1), console.error("Uh oh, an error!", e), Kt("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    })()
                }
            }, window.wplms_create_course_data.translations.add_cpt.product.create), Bt("a", {
                className: "link",
                onClick: () => {
                    c(!1)
                }
            }, window.wplms_create_course_data.translations.cancel))) : Bt("a", {
                class: "more",
                onClick: () => {
                    c("create")
                }
            }, Bt("i", {
                class: "vicon vicon-plus"
            }), window.wplms_create_course_data.translations.add_cpt.product.create)) : "", "create" != d && "select" != d && t.hasOwnProperty("caps") && !v(t.caps) && t.caps.hasOwnProperty("manage_options") && t.caps.manage_options ? Bt("div", {
                className: "select_cpt_wrapper"
            }, "bundle" == d ? Bt("div", {
                className: "select_existing_cpt"
            }, Bt(rt, {
                field: {
                    cpt: "product"
                },
                update: e => {
                    h(e)
                }
            }), Bt("div", {
                className: "selectcptactions"
            }, Bt("a", {
                className: "button is-primary",
                onClick: () => {
                    g(w, "fieldvaluechanged")
                }
            }, Bt("i", {
                class: "vicon vicon-plus"
            }), " ", window.wplms_create_course_data.translations.add_cpt.product.add), Bt("a", {
                className: "link",
                onClick: () => {
                    c(!1)
                }
            }, window.wplms_create_course_data.translations.cancel))) : Bt("a", {
                onClick: () => {
                    c("bundle")
                }
            }, Bt("i", {
                className: "vicon vicon-bag"
            }), " ", window.wplms_create_course_data.translations.add_cpt.product.add_bundle)) : "")) : v(s.value) ? Bt("span", null, window.wplms_create_course_data.translations.no_price, Bt("span", {
                onClick: () => {
                    o(!0)
                },
                className: "vicon vicon-pencil"
            })) : Bt("div", {
                className: "product_price_wrapper"
            }, r ? Bt(Ze, null) : s.hasOwnProperty("show_value") ? Bt("div", null, Bt("div", null, Bt("div", {
                className: "product_price",
                dangerouslySetInnerHTML: {
                    __html: s.show_value.text
                }
            }), p ? Bt("a", {
                class: "tag link",
                target: "_blank",
                href: s.hasOwnProperty("show_value") && s.show_value.hasOwnProperty("link") ? s.show_value.link : "#"
            }, window.wplms_create_course_data.translations.add_cpt.product.bundle) : ""), Bt("span", null, Bt("span", {
                onClick: () => {
                    o(!0), c("create")
                },
                className: "vicon vicon-pencil"
            }), Bt("span", {
                onClick: () => {
                    let t = {
                        ...s
                    };
                    t.value = null, t.show_value = null, _(!1), t.is_bundle = !1, c(!0), a.update({
                        field: t,
                        index: e.fieldIndex
                    }, "fieldvaluechanged")
                },
                className: "vicon vicon-trash"
            }))) : Bt("span", null, window.wplms_create_course_data.translations.no_price, Bt("span", {
                onClick: () => {
                    o(!0)
                },
                className: "vicon vicon-pencil"
            }))))
        }, {
            createElement: ea,
            render: ta,
            useState: aa,
            useEffect: sa,
            useContext: na,
            Fragment: ia
        } = wp.element, oa = (e, t = "#0b0000", a = "#fff") => "truefalse" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinejoin: "round",
            strokeMiterlimit: "2",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("path", {
            fill: a,
            fillRule: "nonzero",
            d: "M10.863 48.264c4.794.998 10.959 2.93 15.625 5.969 5.481-7.344 15.327-14.214 26.042-19.858-10.175 10.026-18.595 21.403-24.305 32.842-4.603-6.538-9.631-12.623-17.362-18.953z"
        }), ea("clipPath", {
            id: "a"
        }, ea("path", {
            d: "M52.522 33.333H85.85499999999999V66.666H52.522z"
        })), ea("g", {
            "clip-path": "url(#a)"
        }, ea("path", {
            fill: a,
            fillRule: "nonzero",
            d: "M85.856 61.372L74.307 49.971l11.389-11.503-5.135-5.135-11.405 11.553-11.542-11.393-5.092 5.092 11.557 11.444-11.397 11.546 5.092 5.092 11.44-11.553 11.507 11.393 5.135-5.135z"
        }))) : "single" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinejoin: "round",
            strokeMiterlimit: "2",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("g", {
            fill: a
        }, ea("path", {
            d: "M18.75 22.917H31.25V35.417H18.75z"
        }), ea("path", {
            d: "M39.583 22.917H81.25V35.417H39.583z"
        }), ea("path", {
            d: "M39.583 43.75H81.25V56.25H39.583z"
        }), ea("path", {
            d: "M18.75 64.583H31.25V77.083H18.75z"
        }), ea("path", {
            d: "M39.583 64.583H81.25V77.083H39.583z"
        })), ea("path", {
            fill: a,
            fillRule: "nonzero",
            d: "M19.197 48.031c1.438.299 3.287.879 4.687 1.79 1.645-2.203 4.598-4.264 7.813-5.957-3.053 3.008-5.579 6.421-7.292 9.853-1.381-1.962-2.889-3.787-5.208-5.686z"
        })) : "multiple" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinejoin: "round",
            strokeMiterlimit: "2",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("g", {
            fill: a
        }, ea("path", {
            d: "M39.583 22.917H81.25V35.417H39.583z"
        }), ea("path", {
            d: "M39.583 43.75H81.25V56.25H39.583z"
        }), ea("path", {
            d: "M18.75 64.583H31.25V77.083H18.75z"
        }), ea("path", {
            d: "M39.583 64.583H81.25V77.083H39.583z"
        })), ea("path", {
            fill: a,
            fillRule: "nonzero",
            d: "M19.197 48.031c1.438.299 3.287.879 4.687 1.79 1.645-2.203 4.598-4.264 7.813-5.957-3.053 3.008-5.579 6.421-7.292 9.853-1.381-1.962-2.889-3.787-5.208-5.686zM19.197 27.197c1.438.3 3.287.88 4.687 1.791 1.645-2.203 4.598-4.264 7.813-5.957-3.053 3.008-5.579 6.421-7.292 9.852-1.381-1.961-2.889-3.787-5.208-5.686z"
        })) : "match" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinejoin: "round",
            strokeMiterlimit: "2",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("g", {
            fill: a
        }, ea("path", {
            d: "M56.25 22.917H81.25V35.417H56.25z"
        }), ea("path", {
            d: "M18.75 22.917H43.75V35.417H18.75z"
        }), ea("path", {
            d: "M56.25 43.75H81.25V56.25H56.25z"
        }), ea("path", {
            d: "M18.75 43.75H43.75V56.25H18.75z"
        }), ea("path", {
            d: "M56.25 64.583H81.25V77.083H56.25z"
        }), ea("path", {
            d: "M18.75 64.583H43.75V77.083H18.75z"
        })), ea("path", {
            fill: "#ddddd7",
            d: "M45.833 51.458v2.709L41.667 50l4.166-4.167v2.709h8.334v-2.709L58.333 50l-4.166 4.167v-2.709h-8.334zM45.833 30.625v2.708l-4.166-4.166L45.833 25v2.708h8.334V25l4.166 4.167-4.166 4.166v-2.708h-8.334zM45.833 72.292V75l-4.166-4.167 4.166-4.166v2.708h8.334v-2.708l4.166 4.166L54.167 75v-2.708h-8.334z"
        })) : "fillblank" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: "1.5",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("path", {
            d: "M72.912 37.502l-6.243-8.34 12.505.014-6.262 8.326z"
        }), ea("path", {
            fill: a,
            stroke: a,
            strokeWidth: "0.21",
            d: "M16.667 66.667H87.5V70.834H16.667z"
        }), ea("text", {
            x: "13.936",
            y: "55.838",
            fill: a,
            fontFamily: "'VentiCF-Black', 'Venti CF'",
            fontSize: "41.667",
            fontWeight: "900"
        }, "FILL")) : "select" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: "1.5",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("path", {
            fill: "#ddddd7",
            d: "M20.833 25H83.333V41.667H20.833z"
        }), ea("path", {
            d: "M72.912 37.502l-6.243-8.34 12.505.014-6.262 8.326z"
        }), ea("path", {
            fill: a,
            stroke: a,
            strokeWidth: "0.21",
            d: "M20.833 41.667H83.333V54.167H20.833z"
        }), ea("path", {
            fill: a,
            stroke: a,
            strokeWidth: "0.21",
            d: "M20.833 54.167H83.333V66.667H20.833z"
        })) : "sort" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinejoin: "round",
            strokeMiterlimit: "2",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("g", {
            fill: a
        }, ea("path", {
            d: "M39.583 22.917H81.25V35.417H39.583z"
        }), ea("path", {
            fillOpacity: "0.72",
            d: "M39.583 43.75H81.25V56.25H39.583z"
        }), ea("path", {
            d: "M35.417 39.583H77.084V52.083H35.417z"
        }), ea("path", {
            d: "M39.583 64.583H81.25V77.083H39.583z"
        })), ea("g", {
            fill: a
        }, ea("path", {
            d: "M22.917 39.583l6.25 8.334h-12.5l6.25-8.334zM22.949 60.417l-6.314-8.286 12.5-.095-6.186 8.381z"
        }))) : "smalltext" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinejoin: "round",
            strokeMiterlimit: "2",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("path", {
            d: "M72.912 37.502l-6.243-8.34 12.505.014-6.262 8.326z"
        }), ea("path", {
            d: "M12.5 29.167H87.5V66.667H12.5z"
        }), ea("path", {
            fill: a,
            d: "M87.5 66.667h-75v-37.5h75v37.5zm-72.5-35v32.5h70v-32.5H15z"
        }), ea("text", {
            x: "17.547",
            y: "57.204",
            fill: a,
            fontFamily: "'VentiCF-Black', 'Venti CF'",
            fontSize: "29.167",
            fontWeight: "900"
        }, "TEXT")) : "largetext" == e ? ea("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            fillRule: "evenodd",
            strokeLinejoin: "round",
            strokeMiterlimit: "2",
            clipRule: "evenodd",
            viewBox: "0 0 100 100"
        }, ea("path", {
            fill: t,
            d: "M95.833 27.083c0-12.648-10.268-22.916-22.916-22.916H27.083c-12.648 0-22.916 10.268-22.916 22.916v45.834c0 12.648 10.268 22.916 22.916 22.916h45.834c12.648 0 22.916-10.268 22.916-22.916V27.083z"
        }), ea("path", {
            d: "M72.912 37.502l-6.243-8.34 12.505.014-6.262 8.326z"
        }), ea("path", {
            d: "M12.5 25H87.5V79.167H12.5z"
        }), ea("path", {
            fill: a,
            d: "M87.5 79.167h-75V25h75v54.167zm-72.5-2.5h70V27.5H15v49.167z"
        }), ea("g", {
            fill: a,
            fontFamily: "'VentiCF-Black', 'Venti CF'",
            fontSize: "7",
            fontWeight: "900"
        }, ea("text", {
            x: "8.211",
            y: "11.729",
            transform: "translate(-16.667 -4.843) scale(4.16667)"
        }, "...."), ea("text", {
            x: "8.211",
            y: "13.729",
            transform: "translate(-16.667 -4.843) scale(4.16667)"
        }, "....."), ea("text", {
            x: "8.211",
            y: "15.729",
            transform: "translate(-16.667 -4.843) scale(4.16667)"
        }, "......."))) : ea("div", {
            className: e
        }), {
            createElement: ra,
            render: la,
            useState: da,
            useEffect: ca,
            useContext: ua,
            Fragment: ma,
            RawHTML: pa
        } = wp.element, {
            dispatch: _a,
            select: wa
        } = wp.data, va = e => {
            let t = wa("vibebp").getUser();
            t.token = wa("vibebp").getToken(), ua(f);
            const [a, s] = da(!1), [n, i] = da(e.field), [o, r] = da({}), [l, d] = da(-1), [c, u] = da(!1), [m, p] = da([]);
            ca((() => {
                i(e.field), s(!0), e.field.hasOwnProperty("data") && e.field.data && r(e.question.buttons.question_types[e.question.buttons.question_types.findIndex((t => t.value == e.field.data.type))].fields)
            }), [e.field]);
            const _ = (e, t) => {
                if ("fieldvaluechanged" == t) {
                    let t = [...o],
                        a = t.findIndex((t => t.id == e.field.id));
                    t[a] = e.field, r(t)
                }
            };
            return a ? ra(ma, null, ra("div", {
                className: "question_block"
            }, ra("div", {
                className: "question_heading"
            }, ra("strong", {
                className: "title"
            }, ra("span", null, oa(n.data.type)), " ", n.data.text), ra("ul", {
                className: "data_links"
            }, ra("li", null, ra("a", {
                className: "edit",
                title: "Edit Question",
                onClick: a => {
                    var s;
                    s = n.data.id, fetch(`${window.wplms_create_course_data.api_url}/curriculum/getElementFields/?force`, {
                        method: "post",
                        body: JSON.stringify({
                            type: n.type,
                            id: s,
                            fields: o,
                            token: t.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        t.status && (r(t.fields), d(e.index))
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), _a("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, ra("span", {
                className: "vicon vicon-pencil-alt"
            }))), ra("li", null, ra("a", {
                className: "remove",
                title: "Remove",
                onClick: t => {
                    e.update({
                        index: e.index,
                        question: n
                    }, "questionremoved")
                }
            }, ra("span", {
                className: "vicon vicon-close"
            }))))), ra("div", {
                className: "question_marks"
            }, ra("input", {
                type: "number",
                className: "small_box question_marks",
                onChange: t => {
                    let a = {
                        ...n
                    };
                    a.marks = parseInt(t.target.value), e.update({
                        field: a,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex,
                        index: e.index
                    }, "fieldvaluechanged")
                },
                value: n.marks ? n.marks : "",
                placeholder: window.wplms_create_course_data.translations.enter_question_marks
            }))), o.length && l > -1 ? ra("div", {
                className: "question_wrapper"
            }, ra("div", {
                className: "list-group"
            }, o.map(((t, a) => ra("div", {
                className: "list-group-item"
            }, ra(fm, {
                question: e.question,
                field: t,
                fieldIndex: a,
                tabIndex: e.fieldIndex,
                update: _,
                cindex: e.cindex,
                aindex: e.index,
                index: a
            }))))), ra("div", {
                className: "question_actions"
            }, ra("a", {
                className: c ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    let t = {
                        post_title: "",
                        post_content: "",
                        meta: [],
                        taxonomy: []
                    };
                    o.map((e => {
                        if ("post" == e.from)
                            if ("post_content" == e.id) {
                                if (t[e.id] = e.value, e.hasOwnProperty("raw") && e.raw) {
                                    let a = t.meta.findIndex((e => "raw" == e.meta_key));
                                    a > -1 ? t.meta[a].meta_value = e.raw : t.meta.push({
                                        meta_key: "raw",
                                        meta_value: e.raw
                                    })
                                }
                            } else t[e.id] = e.value;
                        if ("meta" == e.from) {
                            let a = t.meta.findIndex((t => t.meta_key == e.id));
                            if ("editor" == e.type && e.hasOwnProperty("raw")) {
                                let a = t.meta.findIndex((t => t.meta_key == e.id + "_raw"));
                                a > -1 ? t.meta[a].meta_value = e.raw : t.meta.push({
                                    meta_key: e.id + "_raw",
                                    meta_value: e.raw
                                }), t.meta.push({
                                    meta_key: e.id,
                                    meta_value: e.value
                                })
                            } else - 1 === a && (e.hasOwnProperty("raw") ? (t.meta.push({
                                meta_key: e.id,
                                meta_value: e.value,
                                raw: e.raw
                            }), t.meta.push({
                                meta_key: e.id + "_raw",
                                meta_value: e.raw
                            })) : t.meta.push({
                                meta_key: e.id,
                                meta_value: e.value
                            }))
                        }
                        if ("taxonomy" == e.from) {
                            let a = t.taxonomy.findIndex((t => t.taxonomy == e.id));
                            a > -1 ? t.taxonomy[a].value = e.value : t.taxonomy.push({
                                taxonomy: e.id,
                                value: e.value
                            })
                        }
                    })), fetch(`${window.wplms_create_course_data.api_url}/createElement/${n.type}?post`, {
                        method: "post",
                        body: JSON.stringify({
                            type: n.type,
                            id: n.data.id,
                            ...t,
                            token: wa("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((a => {
                        if (u(!1), a.status) {
                            _a("vibebp").addNotification({
                                text: a.text
                            });
                            let s = {
                                ...n
                            };
                            s.data.text = t.post_title, e.update({
                                field: s,
                                ufieldIndex: e.ufieldIndex,
                                fieldIndex: e.fieldIndex,
                                cindex: e.cindex,
                                index: e.index
                            }, "fieldvaluechanged"), d(-1)
                        }
                    })).catch((e => {
                        u(!1), console.error("Uh oh, an error!", e), _a("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, window.wplms_create_course_data.translations.save), ra("a", {
                className: "link",
                onClick: () => {
                    d(-1)
                }
            }, window.wplms_create_course_data.translations.cancel))) : "") : ""
        }, {
            createElement: ha,
            render: fa,
            useState: ga,
            useEffect: ya,
            useContext: ba,
            Fragment: ka,
            RawHTML: xa
        } = wp.element, {
            dispatch: Na,
            select: qa
        } = wp.data, Oa = e => {
            const [t, a] = ga({}), [s, n] = ga(""), [i, o] = ga([]), [r, l] = ga([]), [d, c] = ga(!0), [u, m] = ga(!1), [p, _] = ga(!1);
            let v = qa("vibebp").getUser();
            v.token = qa("vibebp").getToken(), ya((() => {
                a(e.field), _(!0)
            }), [e.field]), ya((() => {
                if (p && !d) {
                    let s = {
                            ...t
                        },
                        n = [];
                    r && r.length ? (r.map((e => {
                        n.push(e.id)
                    })), s.value = n, a(s), e.update(s, e.fieldIndex, "fieldvaluechanged")) : (s.value = n, a(s), e.update(s, e.fieldIndex, "fieldvaluechanged"))
                }
            }), [r]), ya((() => {
                c(!0), setTimeout((() => {
                    if (t.hasOwnProperty("taxonomy") && t.taxonomy.length) {
                        let a = sessionStorage.getItem(t.taxonomy);
                        if (void 0 !== a && a) {
                            if (a = JSON.parse(a), a.map((e => {
                                    localStorage.setItem("post_" + e.id, JSON.stringify(e))
                                })), e.field.hasOwnProperty("value") && a.length && e.field.value.length) {
                                let t = a.filter((t => e.field.value.indexOf(t.id) > -1 || e.field.value.indexOf(t.id.toString()) > -1));
                                e.field.value.map((e => {
                                    "string" == typeof e && e.includes("new_") && t.push({
                                        id: e
                                    })
                                })), l(t)
                            }
                            o(a), c(!1)
                        } else {
                            let a = "",
                                s = "";
                            t.taxonomy && (a = t.taxonomy, s = "taxonomy"), fetch(`${window.wplms_create_course_data.api_url}/taxonomy/?post`, {
                                method: "post",
                                body: JSON.stringify({
                                    taxonomy: t.taxonomy,
                                    token: v.token
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((a => {
                                if (a.status && Array.isArray(a.posts)) {
                                    if (a.posts.map((e => {
                                            localStorage.setItem("post_" + e.id, JSON.stringify(e))
                                        })), e.field.hasOwnProperty("value") && a.posts.length && e.field.value.length) {
                                        let t = a.posts.filter((t => (e.field.value.indexOf(t.id) > -1 || e.field.value.indexOf(t.id.toString()) > -1) && -1 === r.findIndex((e => e.id == t.id))));
                                        e.field.value.map((e => {
                                            "string" == typeof e && e.includes("new_") && t.push({
                                                id: e
                                            })
                                        })), l(t)
                                    }
                                    sessionStorage.setItem(t.taxonomy, JSON.stringify(a.posts)), o(a.posts)
                                }
                                c(!1)
                            })).catch((e => {
                                c(!1), console.error("Uh oh, an error!", e), Na("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    }
                }), 200)
            }), [p]);
            let h = [...i];
            return s.length && (h = i.filter((e => e.text.toLowerCase().indexOf(s.toLowerCase()) > -1))), ha("div", {
                className: "taxonomy_field"
            }, r.length ? ha("div", {
                className: "selected_term_list_wrapper"
            }, ha("div", {
                className: "selected_term_list"
            }, r.map(((e, a) => {
                let s = t.cpt ? t.taxonomy : "";
                return "number" == typeof e.id ? ha("div", {
                    className: "term_select"
                }, ha("span", {
                    type: s,
                    onClick: () => {
                        let t = [...r],
                            s = [...i];
                        t.splice(a, 1), s.push(e), o(s), l(t)
                    }
                }, e.text)) : ha("div", {
                    className: "term_select"
                }, ha("input", {
                    type: "text",
                    value: r[a].id.split("new_")[1],
                    placeholder: window.wplms_create_course_data.translations.type_here,
                    onChange: e => {
                        let t = [...r];
                        t[a] = {
                            id: "new_" + e.target.value
                        }, l(t)
                    }
                }), ha("span", {
                    className: "vicon vicon-close",
                    onClick: () => {
                        let e = [...r];
                        a > -1 && e.splice(a, 1), l(e)
                    }
                }))
            })))) : "", ha("div", {
                className: "term_select"
            }, ha("div", {
                class: "term_select_label",
                onClick: () => {
                    m(!u)
                }
            }, t.label, ha("i", u ? {
                class: "vicon vicon-angle-down",
                "aria-hidden": "true"
            } : {
                class: "vicon vicon-plus",
                "aria-hidden": "true"
            })), u ? ha("div", {
                className: "search_term_list"
            }, ha("div", {
                className: "search_term",
                onClick: () => {
                    let e = [...r];
                    e.push({
                        id: "new_"
                    }), l(e), m(!1)
                }
            }, (() => {
                if ("object" != typeof v.caps || Array.isArray(v.caps)) {
                    if (v.caps.indexOf(window.wplms_create_course_data.settings.create_taxonomy_term_caps) > -1) return ha("span", null, window.wplms_create_course_data.translations.add_new)
                } else if (Object.keys(v.caps).indexOf(window.wplms_create_course_data.settings.create_taxonomy_term_caps) > -1) return ha("span", null, window.wplms_create_course_data.translations.add_new)
            })()), i.length > 8 ? ha("div", {
                className: "searchbox"
            }, ha("input", {
                type: "text",
                value: s,
                onChange: e => n(e.target.value)
            }), ha("span", {
                className: "vicon vicon-search"
            })) : "", h.length ? ha(ka, null, h.map(((e, t) => {
                if (-1 === w(e, r)) return ha("div", {
                    className: "search_term",
                    onClick: () => {
                        n("");
                        let a = [...r]; - 1 === w(e, a) && (a.push(e), i.splice(t, 1), l(a), m(!1))
                    }
                }, ha("span", null, e.text))
            }))) : "") : ""))
        }, {
            createElement: Ia,
            render: Ca,
            useState: Sa,
            useEffect: Pa,
            useContext: Ea,
            Fragment: za,
            useRef: Ta
        } = wp.element, {
            dispatch: La,
            select: Ma
        } = wp.data, $a = e => {
            const t = Ea(f),
                [a, s] = Sa({}),
                [n, i] = Sa(!1),
                [o, r] = Sa(!1),
                [l, d] = Sa("question"),
                [c, u] = Sa({
                    post_content: "",
                    raw: []
                }),
                [m, p] = Sa({
                    meta_key: "vibe_question_explaination",
                    meta_value: "",
                    raw: []
                }),
                [_, w] = Sa({
                    ID: "",
                    post_title: "",
                    post_content: "",
                    taxonomy: [{
                        taxonomy: "question-tag",
                        value: []
                    }],
                    meta: [{
                        meta_key: "vibe_question_type",
                        meta_value: ""
                    }]
                }),
                [h, g] = Sa({}),
                [y, b] = Sa(!1),
                [k, x] = Sa("");
            Ma("vibebp").getUser().token = Ma("vibebp").getToken();
            const N = Ta(null);
            Pa((() => {
                if ("object" == typeof e.field.value && e.field.value.hasOwnProperty("ques") && e.field.value.ques.length) {
                    let t = {
                        ...e.field
                    };
                    fetch(`${window.wplms_create_course_data.api_url}/getQuizQuestions?force`, {
                        method: "post",
                        body: JSON.stringify({
                            questions: e.field.value.ques,
                            token: Ma("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((a => {
                        a.status && (t.value = [], a.questions.map(((a, s) => {
                            t.value.push({
                                type: "question",
                                data: a,
                                marks: e.field.value.marks[s]
                            })
                        }))), r(!0), s(t), e.update(t, e.fieldIndex, "fieldvaluechanged"), console.log()
                    })).catch((e => {
                        r(!0), console.error("Uh oh, an error!", e), La("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                } else e.field.hasOwnProperty("value") && Array.isArray(e.field.value) && e.field.value.length || (e.field.value = []), s(e.field), r(!0)
            }), [e.field]);
            const q = (n, i) => {
                    let o = {
                        ...a
                    };
                    console.log("SetQuestionValue", n, i), "fieldvaluechanged" == i && (o.value[n.index] = n.field, s(o), e.update(o, e.fieldIndex, "fieldvaluechanged"), t.update({
                        field: o,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "curriculumchangedunitdata")), "questionremoved" == i && (n.hasOwnProperty("index") && o.value.splice(n.index, 1), s(o), e.update(o, e.fieldIndex, "fieldvaluechanged"), t.update({
                        field: o,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "curriculumchangedunitdata"))
                },
                O = (e, t) => {
                    "fieldvaluechanged" == t && g(e.show_value)
                },
                I = (n, i = null) => {
                    let o = {};
                    v(i) && h && h.id && (i = h), o = {
                        type: n,
                        data: i,
                        marks: 0
                    };
                    let r = {
                        ...a
                    };
                    v(r.value) && (r.value = []), r.value.push(o), t.update({
                        field: r,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "curriculumchangedunitdata"), w({
                        ID: "",
                        post_title: "",
                        post_content: "",
                        taxonomy: [{
                            taxonomy: "question-tag",
                            value: []
                        }],
                        meta: [{
                            meta_key: "vibe_question_type",
                            meta_value: ""
                        }]
                    }), p({
                        meta_key: "vibe_question_explaination",
                        meta_value: "",
                        raw: []
                    }), s(r), e.update(r, e.fieldIndex, "fieldvaluechanged")
                },
                C = async (e, t, a = null) => {
                    console.log(e);
                    let s = e.field,
                        n = {
                            ..._
                        };
                    if ("taxonomy" == s.type) {
                        let e = n.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? n.taxonomy.push({
                            taxonomy: s.taxonomy,
                            value: s.value
                        }) : n.taxonomy[e].value = s.value
                    } else {
                        if ("post_content" == s.id && s.value.length) return void u({
                            post_content: s.value,
                            raw: s.raw
                        });
                        if ("vibe_question_explaination" == s.id && s.value.length) return void p({
                            meta_key: "vibe_question_explaination",
                            meta_value: s.value,
                            raw: s.raw
                        });
                        if ("post" == s.from && (n[s.id] = s.value), "meta" == s.from)
                            if ("duration" == s.type) {
                                let e = n.meta.findIndex((e => e.meta_key == s.id));
                                e > -1 ? n.meta[e].meta_value = s.value.value : n.meta.push({
                                    meta_key: s.id,
                                    meta_value: s.value.value
                                });
                                let t = n.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                                t > -1 ? n.meta[t].meta_value = s.value.parameter : n.meta.push({
                                    meta_key: s.id,
                                    meta_value: s.value.parameter
                                })
                            } else {
                                let e = n.meta.findIndex((e => e.meta_key == s.id));
                                if (e > -1 ? n.meta[e].meta_value = s.value : n.meta.push({
                                        meta_key: s.id,
                                        meta_value: s.value
                                    }), s.hasOwnProperty("raw")) {
                                    let e = await sessionStorage.getItem("questionOptions_" + s.id);
                                    e = JSON.parse(e), sessionStorage.removeItem("questionOptions_" + s.id), e ? n.meta.push({
                                        meta_key: s.id + "_raw",
                                        meta_value: e
                                    }) : n.meta.push({
                                        meta_key: s.id + "_raw",
                                        meta_value: s.raw
                                    })
                                }
                                "editor" == s.type && s.hasOwnProperty("raw") && (e = n.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? n.meta[e].meta_value = s.raw : n.meta.push({
                                    meta_key: s.id + "_raw",
                                    meta_value: s.raw
                                }))
                            }
                    }
                    w(n)
                };
            return o ? Ia(za, null, Ia("div", {
                className: "unitquestions unit_field"
            }, a && a.value && a.value.length ? a.value.map(((t, s) => Ia("div", {
                className: "question_block_wrapper"
            }, Ia(va, {
                question: a,
                field: t,
                fieldIndex: e.fieldIndex,
                cindex: e.cindex,
                index: s,
                update: q,
                tabIndex: e.tabIndex,
                ufieldIndex: e.ufieldIndex
            })))) : "", Ia("div", {
                className: "add_cpt"
            }, "select" == y ? Ia("div", {
                className: "select_existing_cpt"
            }, Ia("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => b(!1)
            }), Ia(rt, {
                field: {
                    cpt: l
                },
                update: O
            }), Object.keys(h).length ? Ia("a", {
                class: "use_selected_curriculum button is-primary",
                onClick: () => {
                    I(l)
                }
            }, Ia("i", {
                className: "vicon vicon-plus"
            }), " ", window.wplms_create_course_data.translations.add_cpt.question.add) : "") : "upload" == y ? Ia("div", {
                className: "upload_wrapper"
            }, Ia("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => b(!1)
            }), Ia(rt, {
                field: {
                    cpt: l
                },
                update: O
            }), Ia("div", {
                className: "uploadbox"
            }, Ia("label", {
                for: "questions_fileupload",
                className: "upload_file"
            }, Ia("input", {
                id: "questions_fileupload",
                ref: N,
                type: "file",
                onChange: e => {}
            })), k ? Ia("a", {
                className: isUploading ? "is-primary button is-loading" : "is-primary button"
            }, window.wplms_create_course_data.translations.upload_file) : ""), Ia("a", {
                class: "use_selected_curriculum button is-primary",
                onClick: () => {
                    I(l)
                }
            }, Ia("i", {
                className: "vicon vicon-plus"
            }), " ", window.wplms_create_course_data.translations.add_cpt.question.add)) : "create" == y ? Ia("div", {
                className: "new_cpt"
            }, Ia("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => b(!1)
            }), Ia("div", {
                className: "question_type_wrapper"
            }, _.meta.findIndex((e => "vibe_question_type" == e.meta_key)) > -1 ? a.buttons.question_types.map(((e, t) => Ia("div", {
                className: e.value == _.meta[_.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value ? "question_type active" : "question_type",
                onClick: () => {
                    let t = {
                            ..._
                        },
                        a = t.meta.findIndex((e => "vibe_question_type" == e.meta_key));
                    t.meta[a].meta_value = e.value, w(t)
                }
            }, Ia("span", null, e.value == _.meta[_.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value ? oa(e.value, "#00A1FF", "#fff") : oa(e.value, "#fff", "#222")), Ia("span", null, e.label)))) : ""), _.meta[_.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value.length ? Ia(za, null, a.buttons.question_types[a.buttons.question_types.findIndex((e => e.value == _.meta[_.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value))].fields.map(((e, a) => Ia(fm, {
                field: e,
                fieldIndex: a,
                update: C,
                tabIndex: t.activeTab
            }))), Ia("div", {
                className: "question_actions"
            }, Ia("a", {
                onClick: () => {
                    if (_.post_title.length) {
                        i(!0);
                        let e = {
                            ..._
                        };
                        m.meta_value.length && (e.meta.push({
                            meta_key: m.meta_key,
                            meta_value: m.meta_value
                        }), e.meta.push({
                            meta_key: m.meta_key + "_raw",
                            meta_value: m.raw
                        }));
                        let t = a.buttons.question_types.findIndex((t => t.value == e.meta[e.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value)); - 1 !== t && a.buttons.question_types[t].hasOwnProperty("fields") && a.buttons.question_types[t].fields.length && a.buttons.question_types[t].fields.map((async (t, a) => {
                            if ("meta" == t.from)
                                if ("duration" == t.type) e.meta.findIndex((e => e.meta_key == t.id)) < 0 && e.meta.push({
                                    meta_key: t.id,
                                    meta_value: t.value.value
                                }), e.meta.findIndex((e => e.meta_key == t.id + "_parameter")) < 0 && e.meta.push({
                                    meta_key: t.id,
                                    meta_value: t.value.parameter
                                });
                                else if (e.meta.findIndex((e => e.meta_key == t.id)) < 0) {
                                if (t.hasOwnProperty("raw")) {
                                    let a = await sessionStorage.getItem("questionOptions_" + t.id);
                                    a = JSON.parse(a), sessionStorage.removeItem("questionOptions_" + t.id), a ? e.meta.push({
                                        meta_key: t.id + "_raw",
                                        meta_value: a
                                    }) : e.meta.push({
                                        meta_key: t.id + "_raw",
                                        meta_value: t.raw
                                    })
                                }
                                e.meta.push({
                                    meta_key: t.id,
                                    meta_value: t.value
                                })
                            }
                        })), fetch(`${window.wplms_create_course_data.api_url}/createElement/question?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...e,
                                ...c,
                                token: Ma("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            i(!1), e.status && (I("question", e.data), g(e.data))
                        })).catch((e => {
                            i(!1), console.error("Uh oh, an error!", e), La("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    } else La("vibebp").addNotification({
                        text: window.wplms_create_course_data.translations.missing_data
                    })
                },
                className: n ? "button is-primary is-loading" : "button is-primary"
            }, Ia("i", {
                class: "vicon vicon-plus"
            }), window.wplms_create_course_data.translations.add_cpt.question.create), Ia("a", {
                className: "link",
                onClick: () => {
                    b(!1)
                }
            }, window.wplms_create_course_data.translations.cancel))) : "") : Ia(za, null, Ia("div", {
                className: "add_cpt_option"
            }, Ia("a", {
                onClick: () => {
                    b("select")
                }
            }, Ia("i", {
                className: "vicon vicon-search"
            }), " ", window.wplms_create_course_data.translations.add_cpt.question.search)), Ia("div", {
                className: "add_cpt_option"
            }, Ia("a", {
                onClick: () => {
                    b("create")
                }
            }, Ia("i", {
                class: "vicon vicon-plus"
            }), window.wplms_create_course_data.translations.add_cpt.question.create))))), Ia("span", {
                className: "total_marks"
            }, window.wplms_create_course_data.translations.total_marks, " ", a && a.value && a.value.length ? a.value.reduce(((e, t, s) => parseInt(a.value[s].marks) + parseInt(e)), 0) : 0)) : ""
        }, {
            createElement: ja,
            render: Aa,
            useState: Da,
            useEffect: Ha,
            useContext: Ua,
            Fragment: Fa,
            RawHTML: Ja
        } = wp.element, {
            dispatch: Ra,
            select: Ba
        } = wp.data, Va = e => {
            let t = Ba("vibebp").getUser();
            t.token = Ba("vibebp").getToken(), Ua(f);
            const [a, s] = Da(!1), [n, i] = Da(e.field), [o, r] = Da({}), [l, d] = Da(-1), [c, u] = Da(!1);
            Ha((() => {
                i(e.field), s(!0), r(e.question.buttons.question_types[e.question.buttons.question_types.findIndex((t => t.value == e.field.data.type))].fields)
            }), [e.field]);
            const m = (e, t) => {
                if (console.log(e, t), "fieldvaluechanged" == t) {
                    let t = [...o];
                    t[t.findIndex((t => t.id == e.field.id))] = e.field, r(t)
                }
            };
            return a ? ja(Fa, null, ja("div", {
                className: "question_block"
            }, ja("div", {
                className: "question_heading"
            }, ja("strong", {
                className: "title"
            }, ja("span", null, oa(n.data.type)), " ", n.data.text), ja("ul", {
                className: "data_links"
            }, ja("li", null, ja("a", {
                className: "edit",
                title: "Edit Question",
                onClick: a => {
                    var s;
                    s = n.data.id, fetch(`${window.wplms_create_course_data.api_url}/curriculum/getElementFields/?force`, {
                        method: "post",
                        body: JSON.stringify({
                            type: n.type,
                            id: s,
                            fields: o,
                            token: t.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        t.status && (r(t.fields), d(e.index))
                    })).catch((e => {
                        u(!1), console.error("Uh oh, an error!", e), Ra("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, ja("span", {
                className: "vicon vicon-pencil-alt"
            }))), ja("li", null, ja("a", {
                className: "remove",
                title: "Remove",
                onClick: t => {
                    e.update({
                        index: e.index,
                        question: n
                    }, "questionremoved")
                }
            }, ja("span", {
                className: "vicon vicon-close"
            })))))), o.length && l > -1 ? ja("div", {
                className: "question_wrapper"
            }, ja("div", {
                className: "list-group"
            }, o.map(((t, a) => ja("div", {
                className: "list-group-item"
            }, ja(fm, {
                question: e.question,
                field: t,
                fieldIndex: a,
                tabIndex: e.fieldIndex,
                update: m,
                cindex: e.cindex,
                aindex: e.index,
                index: a
            }))))), ja("div", {
                className: "question_actions"
            }, ja("a", {
                className: c ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    let t = {
                        post_title: "",
                        post_content: "",
                        meta: [],
                        taxonomy: []
                    };
                    o.map((e => {
                        if ("post" == e.from)
                            if ("post_content" == e.id) {
                                if (t[e.id] = e.value, e.hasOwnProperty("raw") && e.raw) {
                                    let a = t.meta.findIndex((e => "raw" == e.meta_key));
                                    a > -1 ? t.meta[a].meta_value = e.raw : t.meta.push({
                                        meta_key: "raw",
                                        meta_value: e.raw
                                    })
                                }
                            } else t[e.id] = e.value;
                        if ("meta" == e.from) {
                            let a = t.meta.findIndex((t => t.meta_key == e.id));
                            if (a > -1 ? t.meta[a].meta_value = e.value : t.meta.push({
                                    meta_key: e.id,
                                    meta_value: e.value
                                }), "editor" == e.type && e.hasOwnProperty("raw")) {
                                let a = t.meta.findIndex((t => t.meta_key == e.id + "_raw"));
                                a > -1 ? t.meta[a].meta_value = e.raw : t.meta.push({
                                    meta_key: e.id + "_raw",
                                    meta_value: e.raw
                                })
                            }
                        }
                        if ("taxonomy" == e.from) {
                            let a = t.taxonomy.findIndex((t => t.taxonomy == e.id));
                            a > -1 ? t.taxonomy[a].value = e.value : t.taxonomy.push({
                                taxonomy: e.id,
                                value: e.value
                            })
                        }
                    })), fetch(`${window.wplms_create_course_data.api_url}/createElement/${n.type}?post`, {
                        method: "post",
                        body: JSON.stringify({
                            type: n.type,
                            id: n.data.id,
                            ...t,
                            token: Ba("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((a => {
                        if (u(!1), a.status) {
                            Ra("vibebp").addNotification({
                                text: a.text
                            });
                            let s = {
                                ...n
                            };
                            s.data.text = t.post_title, e.update({
                                field: s,
                                ufieldIndex: e.ufieldIndex,
                                fieldIndex: e.fieldIndex,
                                cindex: e.cindex,
                                index: e.index
                            }, "fieldvaluechanged"), d(-1)
                        }
                    })).catch((e => {
                        u(!1), console.error("Uh oh, an error!", e), Ra("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, window.wplms_create_course_data.translations.save), ja("a", {
                className: "link",
                onClick: () => {
                    d(-1)
                }
            }, window.wplms_create_course_data.translations.cancel))) : "") : ""
        }, {
            createElement: Xa,
            render: Wa,
            useState: Ya,
            useEffect: Qa,
            useContext: Ka,
            Fragment: Ga,
            useRef: Za
        } = wp.element, {
            dispatch: es,
            select: ts
        } = wp.data, as = e => {
            const t = Ka(f),
                [a, s] = Ya({}),
                [n, i] = Ya(!1),
                [o, r] = Ya(!1),
                [l, d] = Ya("question"),
                [c, u] = Ya({
                    post_content: "",
                    raw: []
                }),
                [m, p] = Ya({
                    meta_key: "vibe_question_explaination",
                    meta_value: "",
                    raw: []
                }),
                [_, w] = Ya({
                    ID: "",
                    post_title: "",
                    post_content: "",
                    taxonomy: [{
                        taxonomy: "question-tag",
                        value: []
                    }],
                    meta: [{
                        meta_key: "vibe_question_type",
                        meta_value: ""
                    }]
                }),
                [h, g] = Ya({}),
                [y, b] = Ya(!1),
                [k, x] = Ya("");
            ts("vibebp").getUser().token = ts("vibebp").getToken();
            const N = Za(null);
            Qa((() => {
                if ("object" == typeof e.field.value && e.field.value.length && "object" != typeof e.field.value[0]) {
                    let t = {
                        ...e.field
                    };
                    fetch(`${window.wplms_create_course_data.api_url}/getQuizQuestions?force`, {
                        method: "post",
                        body: JSON.stringify({
                            questions: e.field.value,
                            token: ts("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((a => {
                        a.status && (t.value = [], a.questions.map(((e, a) => {
                            t.value.push({
                                type: "question",
                                data: e
                            })
                        }))), r(!0), s(t), e.update(t, e.fieldIndex, "fieldvaluechanged")
                    })).catch((e => {
                        r(!0), console.error("Uh oh, an error!", e), es("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                } else e.field.hasOwnProperty("value") && Array.isArray(e.field.value) && e.field.value.length || (e.field.value = []), s(e.field), r(!0)
            }), [e.field]);
            const q = (n, i) => {
                    let o = {
                        ...a
                    };
                    "fieldvaluechanged" == i && (o.value[n.index] = n.field, s(o), e.update(o, e.fieldIndex, "fieldvaluechanged"), t.update({
                        field: o,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "curriculumchangedunitdata")), "questionremoved" == i && (n.hasOwnProperty("index") && o.value.splice(n.index, 1), s(o), e.update(o, e.fieldIndex, "fieldvaluechanged"), t.update({
                        field: o,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "curriculumchangedunitdata"))
                },
                O = (e, t) => {
                    "fieldvaluechanged" == t && g(e.show_value)
                },
                I = (n, i = null) => {
                    let o = {};
                    v(i) && h && h.id && (i = h), o = {
                        type: n,
                        data: i
                    };
                    let r = {
                        ...a
                    };
                    v(r.value) && (r.value = []), r.value.push(o), t.update({
                        field: r,
                        ufieldIndex: e.ufieldIndex,
                        fieldIndex: e.fieldIndex,
                        cindex: e.cindex
                    }, "curriculumchangedunitdata"), w({
                        ID: "",
                        post_title: "",
                        post_content: "",
                        taxonomy: [{
                            taxonomy: "question-tag",
                            value: []
                        }],
                        meta: [{
                            meta_key: "vibe_question_type",
                            meta_value: ""
                        }]
                    }), p({
                        meta_key: "vibe_question_explaination",
                        meta_value: "",
                        raw: []
                    }), s(r), e.update(r, e.fieldIndex, "fieldvaluechanged")
                },
                C = (e, t, a = null) => {
                    console.log(e);
                    let s = e.field,
                        n = {
                            ..._
                        };
                    if ("taxonomy" == s.type) {
                        let e = n.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? n.taxonomy.push({
                            taxonomy: s.taxonomy,
                            value: s.value
                        }) : n.taxonomy[e].value = s.value
                    } else {
                        if ("post_content" == s.id && s.value.length) return void u({
                            post_content: s.value,
                            raw: s.raw
                        });
                        if ("vibe_question_explaination" == s.id && s.value.length) return void p({
                            meta_key: "vibe_question_explaination",
                            meta_value: s.value,
                            raw: s.raw
                        });
                        if ("post" == s.from && (n[s.id] = s.value), "meta" == s.from)
                            if ("duration" == s.type) {
                                let e = n.meta.findIndex((e => e.meta_key == s.id));
                                e > -1 ? n.meta[e].meta_value = s.value.value : n.meta.push({
                                    meta_key: s.id,
                                    meta_value: s.value.value
                                });
                                let t = n.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                                t > -1 ? n.meta[t].meta_value = s.value.parameter : n.meta.push({
                                    meta_key: s.id,
                                    meta_value: s.value.parameter
                                })
                            } else {
                                let e = n.meta.findIndex((e => e.meta_key == s.id));
                                e > -1 ? n.meta[e].meta_value = s.value : n.meta.push({
                                    meta_key: s.id,
                                    meta_value: s.value
                                }), "editor" == s.type && s.hasOwnProperty("raw") && (e = n.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? n.meta[e].meta_value = s.raw : n.meta.push({
                                    meta_key: s.id + "_raw",
                                    meta_value: s.raw
                                }))
                            }
                    }
                    w(n)
                };
            return o ? Xa("div", {
                className: "field_quiz_questions"
            }, Xa("div", {
                className: " unitquestions unit_field"
            }, a && a.value && a.value.length ? a.value.map(((t, s) => {
                if (t) return Xa("div", {
                    className: "question_block_wrapper"
                }, Xa(Va, {
                    question: a,
                    field: t,
                    fieldIndex: e.fieldIndex,
                    cindex: e.cindex,
                    index: s,
                    update: q,
                    tabIndex: e.tabIndex,
                    ufieldIndex: e.ufieldIndex
                }))
            })) : "", Xa("div", {
                className: "add_cpt"
            }, "select" == y ? Xa("div", {
                className: "select_existing_cpt"
            }, Xa("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => b(!1)
            }), Xa(rt, {
                field: {
                    cpt: l
                },
                update: O
            }), Xa("a", {
                class: "use_selected_curriculum button is-primary",
                onClick: () => {
                    I(l)
                }
            }, Xa("i", {
                className: "vicon vicon-plus"
            }), " ", window.wplms_create_course_data.translations.add_cpt.question.add)) : "upload" == y ? Xa("div", {
                className: "upload_wrapper"
            }, Xa("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => b(!1)
            }), Xa(rt, {
                field: {
                    cpt: l
                },
                update: O
            }), Xa("div", {
                className: "uploadbox"
            }, Xa("label", {
                for: "questions_fileupload",
                className: "upload_file"
            }, Xa("input", {
                id: "questions_fileupload",
                ref: N,
                type: "file",
                onChange: e => {}
            })), k ? Xa("a", {
                className: isUploading ? "is-primary button is-loading" : "is-primary button"
            }, window.wplms_create_course_data.translations.upload_file) : ""), Xa("a", {
                class: "use_selected_curriculum button is-primary",
                onClick: () => {
                    I(l)
                }
            }, Xa("i", {
                className: "vicon vicon-plus"
            }), " ", window.wplms_create_course_data.translations.add_cpt.question.add)) : "create" == y ? Xa("div", {
                className: "new_cpt"
            }, Xa("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => b(!1)
            }), Xa("div", {
                className: "question_type_wrapper"
            }, _.meta.findIndex((e => "vibe_question_type" == e.meta_key)) > -1 ? a.buttons.question_types.map(((e, t) => Xa("div", {
                className: e.value == _.meta[_.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value ? "question_type active" : "question_type",
                onClick: () => {
                    let t = {
                            ..._
                        },
                        a = t.meta.findIndex((e => "vibe_question_type" == e.meta_key));
                    t.meta[a].meta_value = e.value, w(t)
                }
            }, Xa("span", null, e.value == _.meta[_.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value ? oa(e.value, "#00A1FF", "#fff") : oa(e.value, "#fff", "#222")), Xa("span", null, e.label)))) : ""), _.meta[_.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value.length ? Xa(Ga, null, a.buttons.question_types[a.buttons.question_types.findIndex((e => e.value == _.meta[_.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value))].fields.map(((e, a) => Xa(fm, {
                field: e,
                fieldIndex: a,
                update: C,
                tabIndex: t.activeTab
            }))), Xa("div", {
                className: "question_actions"
            }, Xa("a", {
                onClick: () => {
                    if (_.post_title.length) {
                        i(!0);
                        let e = {
                            ..._
                        };
                        m.meta_value.length && (e.meta.push({
                            meta_key: m.meta_key,
                            meta_value: m.meta_value
                        }), e.meta.push({
                            meta_key: m.meta_key + "_raw",
                            meta_value: m.raw
                        }));
                        let t = a.buttons.question_types.findIndex((t => t.value == e.meta[e.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value)); - 1 !== t && a.buttons.question_types[t].hasOwnProperty("fields") && a.buttons.question_types[t].fields.length && a.buttons.question_types[t].fields.map(((t, a) => {
                            "meta" == t.from && ("duration" == t.type ? (e.meta.findIndex((e => e.meta_key == t.id)) < 0 && e.meta.push({
                                meta_key: t.id,
                                meta_value: t.value.value
                            }), e.meta.findIndex((e => e.meta_key == t.id + "_parameter")) < 0 && e.meta.push({
                                meta_key: t.id,
                                meta_value: t.value.parameter
                            })) : e.meta.findIndex((e => e.meta_key == t.id)) < 0 && e.meta.push({
                                meta_key: t.id,
                                meta_value: t.value
                            }))
                        })), fetch(`${window.wplms_create_course_data.api_url}/createElement/question?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...e,
                                ...c,
                                token: ts("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            i(!1), e.status && (I("question", e.data), g(e.data))
                        })).catch((e => {
                            i(!1), console.error("Uh oh, an error!", e), es("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    } else es("vibebp").addNotification({
                        text: window.wplms_create_course_data.translations.missing_data
                    })
                },
                className: n ? "button is-primary is-loading" : "button is-primary"
            }, Xa("i", {
                class: "vicon vicon-plus"
            }), window.wplms_create_course_data.translations.add_cpt.question.create), Xa("a", {
                className: "link",
                onClick: () => {
                    b(!1)
                }
            }, window.wplms_create_course_data.translations.cancel))) : "") : Xa(Ga, null, Xa("div", {
                className: "add_cpt_option"
            }, Xa("a", {
                onClick: () => {
                    b("select")
                }
            }, Xa("i", {
                className: "vicon vicon-search"
            }), " ", window.wplms_create_course_data.translations.add_cpt.question.search)), Xa("div", {
                className: "add_cpt_option"
            }, Xa("a", {
                onClick: () => {
                    b("create")
                }
            }, Xa("i", {
                class: "vicon vicon-plus"
            }), window.wplms_create_course_data.translations.add_cpt.question.create)))))) : ""
        }, {
            createElement: ss,
            render: ns,
            useState: is,
            useEffect: os,
            useContext: rs,
            Fragment: ls,
            RawHTML: ds
        } = wp.element, {
            dispatch: cs,
            select: us
        } = wp.data, ms = e => {
            const [t, a] = is(e.field), [s, n] = is(""), [i, o] = is([]), [r, l] = is([]), [d, c] = is(!1), [u, m] = is(!1), [p, _] = is(!1);
            us("vibebp").getUser().token = us("vibebp").getToken(), os((() => {
                if (a(e.field), e.field.hasOwnProperty("value") && e.field.value.length && e.hasOwnProperty("results") && null !== e.results && e.results.length) {
                    let t = [];
                    e.results.map(((a, s) => {
                        -1 !== e.field.value.indexOf(a.id) && t.push(a)
                    })), l(t)
                }
                _(!0)
            }), [e.field]), os((() => {
                e.hasOwnProperty("results") && null !== e.results && e.results.length && (o([...e.results]), e.field.hasOwnProperty("value") && e.field.value.length && l(e.results.filter((t => (e.field.value.indexOf(t.id) > -1 || e.field.value.indexOf(t.id.toString()) > -1) && -1 === r.findIndex((e => e.id == t.id))))))
            }), [e.results]);
            let v = [...i];
            return s.length && (v = i.filter((e => e.text.indexOf(s) > -1))), ss("div", {
                className: "taxonomy_field"
            }, r.length ? ss("div", {
                className: "selected_term_list_wrapper"
            }, ss("div", {
                className: "selected_term_list"
            }, r.map(((s, n) => {
                let l = t.cpt ? t.taxonomy : "";
                return ss("div", {
                    className: "term_select"
                }, ss("span", {
                    type: l,
                    onClick: () => {
                        let l = [...r],
                            d = [...i];
                        l.splice(n, 1), d.push(s), o(d);
                        let c = {
                                ...t
                            },
                            u = [];
                        l && l.length ? (l.map((e => {
                            u.push(e.id)
                        })), c.value = u, a(c), e.update(c, e.fieldIndex, "fieldvaluechanged")) : (c.value = u, a(c), e.update(c, e.fieldIndex, "fieldvaluechanged"))
                    }
                }, s.text))
            })))) : "", ss("div", {
                className: "term_select"
            }, ss("div", {
                class: "term_select_label"
            }, t.label, ss("i", u ? {
                class: "vicon vicon-angle-down",
                "aria-hidden": "true",
                onClick: () => {
                    m(!u)
                }
            } : {
                class: "vicon vicon-plus",
                "aria-hidden": "true",
                onClick: () => {
                    m(!u)
                }
            })), u ? ss("div", {
                className: "search_term_list"
            }, i.length ? ss(ls, null, i.length > 2 ? ss("div", {
                className: "searchbox"
            }, ss("input", {
                type: "text",
                value: s,
                onChange: e => n(e.target.value)
            }), ss("span", {
                className: "vicon vicon-search"
            })) : "", v.map(((s, l) => {
                if (-1 === w(s, r)) return ss("div", {
                    className: "search_term",
                    onClick: () => {
                        n("");
                        let d = [...r];
                        if (-1 === w(s, d)) {
                            d.push(s);
                            let n = [...i];
                            n.splice(l, 1), o(n);
                            let r = {
                                    ...t
                                },
                                c = [];
                            d && d.length ? (d.map((e => {
                                c.push(e.id)
                            })), r.value = c, a(r), e.update(r, e.fieldIndex, "fieldvaluechanged")) : (r.value = c, a(r), e.update(r, e.fieldIndex, "fieldvaluechanged"))
                        }
                    }
                }, ss("span", null, s.text))
            }))) : "") : ""))
        }, {
            createElement: ps,
            render: _s,
            useState: ws,
            useEffect: vs,
            useContext: hs,
            Fragment: fs,
            RawHTML: gs
        } = wp.element, {
            dispatch: ys,
            select: bs
        } = wp.data, ks = e => {
            const [t, a] = ws(e.field), [s, n] = ws(-1), [i, o] = ws(null);
            let r = bs("vibebp").getUser();
            r.token = bs("vibebp").getToken(), vs((() => {
                a(e.field)
            }), [e.field]), vs((() => {
                fetch(`${window.wplms_create_course_data.api_url}/taxonomy/?nocache`, {
                    method: "post",
                    body: JSON.stringify({
                        taxonomy: "question-tag",
                        token: r.token
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    e.status ? Array.isArray(e.posts) && (e.posts.map((e => {
                        localStorage.setItem("post_" + e.id, JSON.stringify(e))
                    })), o(e.posts)) : o([])
                })).catch((e => {
                    console.error("Uh oh, an error!", e), ys("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            }), []), console.log(t);
            const l = (s, n, i) => {
                let o = {
                    ...t
                };
                o.value && (o.value[n].tagfield = s, a(o), e.update(o, e.fieldIndex, "fieldvaluechanged"))
            };
            return ps("div", {
                className: "repeatable",
                id: t.id
            }, ps("div", {
                className: "add_quiz_tag_button"
            }, ps("a", {
                className: "button is-primary add_repeatable_count_option",
                onClick: () => {
                    let s = {
                        ...t
                    };
                    console.log(t), Array.isArray(s.value) || (s.value = []), s.value.push({
                        count: 0,
                        tagfield: {
                            taxonomy: "question-tag",
                            id: s.value.length - 1,
                            value: []
                        }
                    }), a(s), e.update(s, e.fieldIndex, "fieldvaluechanged")
                }
            }, window.wplms_create_course_data.translations.add_dynamic_questions_tag)), ps("ul", {
                className: "vibequiztags"
            }, ps("li", {
                class: "dynamic_quiz_tags_headings"
            }, ps("strong", null, window.wplms_create_course_data.translations.question_tags), ps("span", null, window.wplms_create_course_data.translations.number)), ps(fs, null, t.value && t.value.length && Array.isArray(t.value) ? t.value.map(((o, r) => ps("li", null, ps(ms, {
                results: i,
                reset: s,
                field: {
                    ...o.tagfield,
                    id: r,
                    value: o.tagfield.value
                },
                fieldIndex: r,
                update: l
            }), ps("input", {
                type: "text",
                className: "count",
                value: o.count,
                onChange: s => {
                    ((s, n) => {
                        let i = {
                            ...t
                        };
                        console.log(i), i.value && (i.value[n].count = s.target.value, a(i), e.update(i, e.fieldIndex, "fieldvaluechanged"))
                    })(s, r)
                }
            }), ps("span", {
                className: "vicon vicon-close",
                onClick: () => {
                    (s => {
                        let i = {
                            ...t
                        };
                        n(s), i.value.splice(s, 1), a(i), e.update(i, e.fieldIndex, "fieldvaluechanged")
                    })(r)
                }
            })))) : "")))
        }, {
            createElement: xs,
            render: Ns,
            useState: qs,
            useEffect: Os,
            useContext: Is,
            Fragment: Cs,
            RawHTML: Ss
        } = wp.element, {
            dispatch: Ps,
            select: Es
        } = wp.data, zs = e => {
            Es("vibebp").getUser().token = Es("vibebp").getToken(), Is(f);
            const [t, a] = qs(!1), [s, n] = qs(e.field), [i, o] = qs(null), [r, l] = qs([]), [d, c] = qs(!1);
            Os((() => {
                if (e.field.hasOwnProperty("value") && e.field.value && e.field.value.hasOwnProperty("value") && e.field.value.value.length) {
                    let t = {
                        ...e.field
                    };
                    t.value = [...e.field.value.value], o(e.field.value.type), console.log("useEffect", t), l(t)
                }
                console.log(e.field), n(e.field), a(!0)
            }), [e.field]);
            const u = (t, a, i) => {
                    if (console.log("setFieldValue", t), "fieldvaluechanged" == i) {
                        let a = {
                            ...s
                        };
                        a.hasOwnProperty("value") || (a.value = {}), a.value.value = t.value, n(a), l(t), console.log(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                    }
                },
                m = t => {
                    let a = {
                        ...s
                    };
                    a.value = {}, a.value.type = t, a.value.value = [];
                    let i = {
                        ...a
                    };
                    i.value = [], o(t), console.log("changeType", i), l(i), n(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                };
            return t ? xs(Cs, null, i ? "questions" == i ? xs("div", null, xs("span", {
                className: "practice_question_back"
            }, xs("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => {
                    m(null)
                }
            }), xs("span", {
                className: "vicon vicon-control-shuffle tip",
                title: window.wplms_course_data.translations.switch_type,
                onClick: () => {
                    m("tags")
                }
            })), xs(as, {
                field: r,
                update: u,
                fieldIndex: e.fieldIndex
            })) : "tags" == i ? xs("div", null, xs("span", {
                className: "practice_question_back"
            }, xs("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => {
                    m(null)
                }
            }), xs("span", {
                className: "vicon vicon-control-shuffle tip",
                title: window.wplms_course_data.translations.switch_type,
                onClick: () => {
                    m("questions")
                }
            })), xs(ks, {
                field: r,
                update: u,
                fieldIndex: e.fieldIndex
            })) : "" : xs("div", {
                className: "field_quiz_questions"
            }, xs("div", {
                className: "unitquestions"
            }, xs("div", {
                class: "add_cpt"
            }, xs("div", {
                class: "add_cpt_option",
                onClick: () => {
                    m("tags")
                }
            }, xs("a", null, " ", xs("i", {
                class: "vicon  vicon-control-shuffle"
            }), window.wplms_course_data.translations.select_question_tags)), xs("div", {
                class: "add_cpt_option",
                onClick: () => {
                    m("questions")
                }
            }, xs("a", null, xs("i", {
                class: "vicon vicon-exchange-vertical"
            }), window.wplms_course_data.translations.select_create_questions)))))) : ""
        }, {
            createElement: Ts,
            render: Ls,
            useState: Ms,
            useEffect: $s,
            useContext: js,
            Fragment: As,
            RawHTML: Ds
        } = wp.element, Hs = e => {
            const [t, a] = Ms(e.field), [s, n] = (js(f), Ms({
                post_content: "",
                raw: {}
            })), [i, o] = Ms(Math.round(1e5 * Math.random()));
            $s((() => {
                if (e.field && e.field.id) {
                    var t = new CustomEvent("load_vibe_editor", {
                        detail: {
                            id: e.field.post_id ? e.field.post_id : "",
                            selector: ".vibe_" + e.field.id + i + "_editor",
                            content: e.field.hasOwnProperty("value") ? e.field.value : "",
                            raw: e.field.hasOwnProperty("raw") ? e.field.raw : "",
                            components: e.field.components ? e.field.components : "",
                            updater: e.field.id + i
                        }
                    });
                    document.dispatchEvent(t)
                }
            }), [e.field]), $s((() => (e.field && e.field.id && document.addEventListener("vibe_editor_content_update_" + e.field.id + i, r, !1), () => {
                e.field && e.field.id && document.removeEventListener("vibe_editor_content_update_" + e.field.id + i, r)
            })));
            const r = t => {
                n({
                    post_content: t.detail.raw_html,
                    raw: t.detail.editor_content
                });
                let s = {
                    ...e.field
                };
                s.value = t.detail.raw_html, s.raw = t.detail.editor_content, JSON.stringify(s.raw) !== JSON.stringify(e.field.raw) && (a(s), e.update(s, e.fieldIndex, "fieldvaluechanged"))
            };
            return Ts("div", {
                className: "vibev_editor"
            }, Ts("div", {
                className: "vibe_" + t.id + i + "_editor"
            }, Ts("textarea", {
                value: t.value
            })))
        }, {
            createElement: Us,
            render: Fs,
            useState: Js,
            useEffect: Rs,
            useContext: Bs,
            Fragment: Vs,
            RawHTML: Xs
        } = wp.element, {
            select: Ws,
            dispatch: Ys
        } = wp.data, Qs = e => {
            const [t, a] = Js({});
            Rs((() => {
                a(e.field)
            }), [e.field]);
            const s = async (s, n) => {
                let i = {
                    ...t
                };
                i.value[n] = s.value, i.hasOwnProperty("raw") && Array.isArray(i.raw) || (i.raw = []), i.raw[n] = s.raw, a(i), e.update(i, e.fieldIndex, "fieldvaluechanged")
            };
            return Us("div", {
                className: "repeatable",
                id: t.id
            }, Us("a", {
                className: "button small is-primary add_repeatable_count_option",
                onClick: () => {
                    let s = {
                        ...t
                    };
                    v(s.value) && (s.value = []), s.value.push("Option " + (s.value.length + 1)), a(s), e.update(s, e.fieldIndex, "fieldvaluechanged")
                }
            }, window.wplms_create_course_data.translations.add_option), Us("ul", {
                className: "repeatableoption"
            }, t.value && t.value.length ? t.value.map(((n, i) => Us("li", null, Us("span", null, i + 1 + " "), Us(Hs, {
                field: n ? {
                    id: "field_text_" + i,
                    value: n,
                    raw: t.hasOwnProperty("raw") && t.raw[i] ? t.raw[i] : [],
                    components: ["editor"]
                } : {
                    id: "field_text_" + i,
                    components: ["editor"]
                },
                update: (e, t, a) => {
                    s(e, i)
                }
            }), Us("span", {
                class: "vicon vicon-close",
                onClick: () => {
                    (s => {
                        let n = {
                            ...t
                        };
                        n.value.splice(s, 1), a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                    })(i)
                }
            })))) : ""))
        }, {
            createElement: Ks,
            render: Gs,
            useState: Zs,
            useEffect: en,
            useContext: tn,
            Fragment: an,
            RawHTML: sn
        } = wp.element, {
            dispatch: nn,
            select: on
        } = wp.data, rn = e => {
            const [t, a] = Zs(e.field), [s, n] = Zs(-1), [i, o] = Zs(null);
            let r = on("vibebp").getUser();
            r.token = on("vibebp").getToken(), en((() => {
                a(e.field)
            }), [e.field]), en((() => {
                fetch(`${window.wplms_create_course_data.api_url}/taxonomy/?force`, {
                    method: "post",
                    body: JSON.stringify({
                        taxonomy: "question-tag",
                        token: r.token
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    e.status ? Array.isArray(e.posts) && (e.posts.map((e => {
                        localStorage.setItem("post_" + e.id, JSON.stringify(e))
                    })), o(e.posts)) : o([])
                })).catch((e => {
                    console.error("Uh oh, an error!", e), nn("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            }), []);
            const l = (s, n, i) => {
                let o = {
                    ...t
                };
                o.value && (o.value[n].tagfield = s, a(o), e.update(o, e.fieldIndex, "fieldvaluechanged"))
            };
            let d = 0;
            return Array.isArray(t.value) && t.value.length && t.value.map((e => {
                d += e.count * e.marks
            })), Ks("div", {
                className: "repeatable",
                id: t.id
            }, Ks("div", {
                className: "add_quiz_tag_button"
            }, Ks("a", {
                className: "button is-primary add_repeatable_count_option",
                onClick: () => {
                    let s = {
                        ...t
                    };
                    Array.isArray(s.value) || (s.value = []), s.value.push({
                        marks: 0,
                        count: 0,
                        tagfield: {
                            taxonomy: "question-tag",
                            id: s.value.length - 1,
                            value: []
                        }
                    }), a(s), e.update(s, e.fieldIndex, "fieldvaluechanged")
                }
            }, window.wplms_create_course_data.translations.add_dynamic_questions_tag), Ks("span", null, window.wplms_create_course_data.translations.total_marks, " ", d)), Ks("ul", {
                className: "vibequiztags"
            }, Ks("li", {
                class: "dynamic_quiz_tags_headings"
            }, Ks("strong", null, window.wplms_create_course_data.translations.question_tags), Ks("span", null, window.wplms_create_course_data.translations.number), Ks("span", null, window.wplms_create_course_data.translations.per_marks)), Ks(an, null, t.value && t.value.length && Array.isArray(t.value) ? t.value.map(((o, r) => Ks("li", null, Ks(ms, {
                results: i,
                reset: s,
                field: {
                    ...o.tagfield,
                    id: r,
                    value: o.tagfield.value
                },
                fieldIndex: r,
                update: l
            }), Ks("input", {
                type: "text",
                className: "count",
                value: o.count,
                onChange: s => {
                    ((s, n) => {
                        let i = {
                            ...t
                        };
                        i.value && (i.value[n].count = s.target.value, a(i), e.update(i, e.fieldIndex, "fieldvaluechanged"))
                    })(s, r)
                }
            }), Ks("input", {
                type: "text",
                className: "marks",
                value: o.marks,
                onChange: s => {
                    ((s, n) => {
                        let i = {
                            ...t
                        };
                        i.value && (i.value[n].marks = s.target.value, a(i), e.update(i, e.fieldIndex, "fieldvaluechanged"))
                    })(s, r)
                }
            }), Ks("span", {
                className: "vicon vicon-close",
                onClick: () => {
                    (s => {
                        let i = {
                            ...t
                        };
                        n(s), i.value.splice(s, 1), a(i), e.update(i, e.fieldIndex, "fieldvaluechanged")
                    })(r)
                }
            })))) : "")))
        }, {
            createElement: ln,
            render: dn,
            useState: cn,
            useEffect: un,
            useContext: mn,
            Fragment: pn,
            RawHTML: _n
        } = wp.element, {
            dispatch: wn,
            select: vn
        } = wp.data, hn = e => {
            mn(f);
            const [t, a] = cn({}), [s, n] = cn(""), [i, o] = cn([]), [r, l] = cn({}), [d, c] = cn(!1);
            let u = vn("vibebp").getUser();
            return u.token = vn("vibebp").getToken(), un((() => {
                e.field && e.field.hasOwnProperty("show_value") && l(e.field.show_value), a(e.field)
            }), [e.field]), un((() => {
                let s = {
                    ...t
                };
                r.id && (s.value = r.id, s.show_value = r, a(s), e.update(s, e.fieldIndex, "fieldvaluechanged"))
            }), [r]), un((() => {
                if (s.length > 3) {
                    c(!0);
                    let e = "",
                        a = "";
                    t.cpt && (e = t.cpt, a = "selectcpt"), t.post_type && (e = t.post_type, a = "selectcpt"), t.taxonomy && (e = t.taxonomy, a = "taxonomy"), fetch(`${window.wplms_create_course_data.api_url}/${a}/${e}?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            search: s,
                            token: u.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status && Array.isArray(e.posts) && (e.posts.map((e => {
                            localStorage.setItem("post_" + e.id, JSON.stringify(e))
                        })), o(e.posts)), c(!1)
                    })).catch((e => {
                        setIsSaving(!1), console.error("Uh oh, an error!", e), wn("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }), [s]), ln("div", {
                className: "selectcptfield"
            }, ln("div", {
                className: "selectcptfield_list"
            }, r && r.text ? ln("div", {
                className: "selectcptfield_items"
            }, ln("span", {
                type: t.cpt,
                onClick: () => {
                    l({})
                }
            }, r.text)) : ""), r && r.text ? "" : ln(pn, null, ln("div", {
                className: d ? "control is-loading" : "control"
            }, ln("input", {
                type: "text",
                value: s,
                placeholder: window.wplms_create_course_data.translations.type_keyword,
                onChange: e => {
                    n(e.target.value)
                }
            })), i.length ? ln("div", {
                className: "search_results"
            }, i.map(((e, t) => ln("div", {
                className: "search_result selectcpt",
                onClick: () => {
                    n("");
                    let a = {
                        ...r
                    };
                    a = e, i.splice(t, 1), l(a)
                }
            }, ln("span", {
                dangerouslySetInnerHTML: {
                    __html: e.text
                }
            }))))) : ""))
        }, {
            createElement: fn,
            render: gn,
            useState: yn,
            useEffect: bn,
            useContext: kn,
            Fragment: xn,
            RawHTML: Nn
        } = wp.element, {
            dispatch: qn,
            select: On
        } = wp.data, In = e => {
            kn(f);
            const [t, a] = yn({}), [s, n] = yn(""), [i, o] = yn([]), [r, l] = yn([]), [d, c] = yn(!1), [u, m] = yn(!1);
            return On("vibebp").getUser().token = On("vibebp").getToken(), bn((() => {
                e.field && e.field.hasOwnProperty("show_value") && l(e.field.show_value), a(e.field)
            }), [e.field]), bn((() => {
                if (s.length > 3) {
                    m(!0);
                    let e = "",
                        a = "";
                    t.cpt && (e = t.cpt, a = "selectcpt"), t.post_type && (e = t.post_type, a = "selectcpt"), t.taxonomy && (e = t.taxonomy, a = "taxonomy"), fetch(`${window.wplms_create_course_data.api_url}/${a}/${e}?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            search: s,
                            token: On("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        console.log(e), e.status ? Array.isArray(e.posts) && (e.posts.map((e => {
                            localStorage.setItem("post_" + e.id, JSON.stringify(e))
                        })), o(e.posts)) : qn("vibebp").addNotification({
                            text: e.message
                        }), m(!1)
                    })).catch((e => {
                        m(!1), console.error("Uh oh, an error!", e), qn("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }), [s]), fn("div", {
                className: "selectcptfield"
            }, fn("div", {
                className: "selectcptfield_list"
            }, r.length ? fn("div", {
                className: "selectcptfield_items"
            }, r.map((s => {
                let n = t.cpt ? t.taxonomy : "";
                return fn("span", {
                    type: n,
                    onClick: () => {
                        let n = [...r];
                        n.splice(w(s, r), 1), l(n);
                        let i = {
                            ...t
                        };
                        if (n && n.length) {
                            let t = [];
                            n.map((e => {
                                t.push(e.id)
                            })), i.value = t, i.show_value = n, a(i), e.update(i, e.fieldIndex, "fieldvaluechanged")
                        } else i.value = [], i.show_value = [], e.update(i, e.fieldIndex, "fieldvaluechanged")
                    }
                }, s.text)
            }))) : ""), d ? fn("span", {
                className: "add_wrapper"
            }, fn("div", {
                className: u ? "control is-loading" : "control"
            }, fn("input", {
                type: "text",
                value: s,
                placeholder: t.hasOwnProperty("placeholder") ? t.placeholder : window.wplms_create_course_data.translations.type_keyword,
                onChange: e => {
                    n(e.target.value)
                }
            })), fn("span", {
                onClick: () => {
                    c(!d)
                },
                className: "vicon vicon-close"
            })) : fn("span", {
                className: "add_wrapper",
                onClick: () => {
                    c(!d)
                }
            }, window.wplms_create_course_data.translations.add, fn("span", {
                className: "vicon vicon-plus"
            })), i.length ? fn("div", {
                className: "search_results"
            }, i.map(((s, o) => {
                if (-1 === w(s, r)) return fn("div", {
                    className: "search_result selectcpt",
                    onClick: () => {
                        n("");
                        let d = [...r];
                        if (-1 === w(s, d)) {
                            d.push(s), i.splice(o, 1), l(d);
                            let n = {
                                ...t
                            };
                            if (d && d.length) {
                                let t = [];
                                d.map((e => {
                                    t.push(e.id)
                                })), n.value = t, n.show_value = d, a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                            }
                        }
                    }
                }, fn("span", null, s.text))
            }))) : "")
        }, {
            createElement: Cn,
            render: Sn,
            useState: Pn,
            useEffect: En,
            useContext: zn,
            Fragment: Tn,
            RawHTML: Ln
        } = wp.element, Mn = e => {
            zn(f);
            const [t, a] = Pn({}), [s, n] = Pn(""), [i, o] = Pn([]), [r, l] = Pn([]), [d, c] = Pn(!1), [u, m] = Pn(!1), [p, _] = Pn(!1);
            En((() => {
                if (e.field && e.field.hasOwnProperty("value") && e.field.value.length) {
                    let t = [];
                    e.field.value.map((a => {
                        e.field.options.map((e => {
                            e.value != a && e.id != a || t.push(e)
                        }))
                    })), console.log(t), l(t)
                }
                a(e.field), _(!0)
            }), [e.field]), En((() => {
                p && (c(!0), o([...t.options]), c(!1))
            }), [p]);
            let v = "search_results";
            return u && (v = "search_results active"), Cn("div", {
                className: "selectcptfield multiselect"
            }, Cn("div", {
                className: "selectcptfield_list"
            }, r.length ? Cn("div", {
                className: "selectcptfield_items"
            }, r.map((s => {
                let n = t.cpt ? t.multiselect : "";
                return Cn("span", {
                    type: n,
                    onClick: () => {
                        let n = [...r],
                            d = [...i];
                        n.splice(w(s, r, "value"), 1), d.push(s), o(d), l(n);
                        let c = {
                            ...t
                        };
                        if (n && n.length) {
                            let t = [];
                            n.map((e => {
                                e.hasOwnProperty("id") ? t.push(e.id) : e.hasOwnProperty("value") && t.push(e.value)
                            })), c.value = t, c.show_value = n, a(c), e.update(c, e.fieldIndex, "fieldvaluechanged")
                        } else c.value = [], c.show_value = [], a(c), e.update(c, e.fieldIndex, "fieldvaluechanged")
                    }
                }, s.label)
            }))) : ""), Cn("div", {
                className: "selectimitate",
                onClick: () => {
                    m(!u)
                }
            }, Cn("i", u ? {
                class: "vicon vicon-angle-up",
                "aria-hidden": "true"
            } : {
                class: "vicon vicon-angle-down",
                "aria-hidden": "true"
            }), i.length ? Cn("div", {
                className: v
            }, i.map(((s, o) => {
                if (-1 === w(s, r, "value")) return Cn("div", {
                    className: "search_result selectcpt",
                    onClick: () => {
                        n("");
                        let d = [...r];
                        if (-1 === w(s, d, "value")) {
                            d.push(s), i.splice(o, 1), l(d);
                            let n = {
                                ...t
                            };
                            if (d && d.length) {
                                let t = [];
                                d.map((e => {
                                    e.hasOwnProperty("id") ? t.push(e.id) : e.hasOwnProperty("value") && t.push(e.value)
                                })), n.value = t, n.show_value = d, a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                            }
                        }
                    }
                }, Cn("span", null, s.label))
            }))) : d ? Cn("div", {
                className: "search_results"
            }, Cn(Ze, null)) : ""))
        }, {
            createElement: $n,
            render: jn,
            useState: An,
            useEffect: Dn,
            useContext: Hn,
            Fragment: Un,
            RawHTML: Fn
        } = wp.element, Jn = e => {
            const t = Hn(f),
                [a, s] = An({});
            Dn((() => {
                s(e.field)
            }), [e.field]);
            const n = t => {
                let s = {
                    ...a
                };
                s.data = t.target.value, e.update({
                    field: s,
                    fieldIndex: e.fieldIndex,
                    cindex: e.cindex
                }, "curriculumchanged")
            };
            return $n("div", {
                className: "new_section"
            }, $n("input", {
                type: "text",
                className: "section",
                onChange: e => n(e),
                onBlur: e => n(e),
                placeholder: window.wplms_create_course_data.translations.section_name,
                value: a.data
            }), t.adHocSettings && t.adHocSettings.collapse_into_sections && (void 0 === t.adHocSettings.uncollapsed_section || t.adHocSettings.uncollapsed_section >= 0 && t.adHocSettings.uncollapsed_section != e.cindex) ? $n("span", {
                className: "vicon vicon-plus",
                onClick: () => {
                    t.update(e.cindex, "uncollapsed_section")
                }
            }) : "", $n("a", {
                class: "remove",
                onClick: a => {
                    t.course[e.tabIndex].fields[e.fieldIndex].curriculum && t.course[e.tabIndex].fields[e.fieldIndex].curriculum.length && t.update({
                        index: e.cindex,
                        fieldIndex: e.fieldIndex
                    }, "removecurriculum")
                }
            }, $n("span", {
                class: "vicon vicon-close"
            })))
        }, {
            createElement: Rn,
            render: Bn,
            useState: Vn,
            useEffect: Xn,
            useContext: Wn,
            Fragment: Yn,
            RawHTML: Qn
        } = wp.element, Kn = e => {
            const t = Wn(f),
                [a, s] = Vn(e.field);
            Xn((() => {
                s(e.field)
            }), [e.field]);
            let n = "";
            if ("section" !== a.type) {
                let e = t.course[t.course.findIndex((e => "course_curriculum" == e.id))].fields[0].curriculum_elements;
                if (e[e.findIndex((e => e.type == a.type))].hasOwnProperty("types")) {
                    let t = e[e.findIndex((e => e.type == a.type))].types;
                    t.findIndex((e => e.id == a.data.type)) > -1 && (n = t[t.findIndex((e => e.id == a.data.type))].icon)
                }
            }
            return Rn("div", {
                className: "curriculum_element"
            }, Rn("strong", {
                onClick: e.show
            }, n.length ? -1 == n.indexOf("<svg") ? Rn("i", {
                className: n
            }) : Rn("i", {
                dangerouslySetInnerHTML: {
                    __html: n
                }
            }) : "", Rn("div", {
                dangerouslySetInnerHTML: {
                    __html: a.data.text
                }
            })), Rn("a", {
                className: "remove",
                onClick: e.remove
            }, Rn("span", {
                className: "vicon vicon-close"
            })))
        }, {
            createElement: Gn,
            render: Zn,
            useState: ei,
            useEffect: ti,
            useContext: ai,
            Fragment: si,
            RawHTML: ni
        } = wp.element, {
            createElement: ii,
            render: oi,
            useState: ri,
            useEffect: li,
            useContext: di,
            Fragment: ci,
            RawHTML: ui
        } = wp.element, {
            select: mi,
            dispatch: pi
        } = wp.data, _i = e => {
            const [t, a] = ri("");
            return li((() => {
                fetch(`${window.wplms_create_course_data.api_url}/unit/elementorLink/?nocache`, {
                    method: "post",
                    body: JSON.stringify({
                        token: mi("vibebp").getToken(),
                        id: e.id
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    e.status && a(e.link)
                })).catch((e => {
                    console.error("Uh oh, an error!", e), pi("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            }), []), t && t.length ? ii("a", {
                href: t,
                target: "_blank",
                className: "edit_with_elementor_wrapper"
            }, ii("svg", {
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 32 32",
                width: "72",
                height: "72"
            }, ii("path", {
                d: "M 5 5 L 5 27 L 27 27 L 27 5 L 5 5 z M 7 7 L 25 7 L 25 25 L 7 25 L 7 7 z M 11 11 L 11 21 L 13 21 L 13 11 L 11 11 z M 15 11 L 15 13 L 21 13 L 21 11 L 15 11 z M 15 15 L 15 17 L 21 17 L 21 15 L 15 15 z M 15 19 L 15 21 L 21 21 L 21 19 L 15 19 z"
            }))) : ""
        }, {
            Component: wi,
            createElement: vi,
            render: hi,
            useState: fi,
            useEffect: gi,
            Fragment: yi
        } = wp.element, bi = e => {
            const [t, a] = fi(e.duration), [s, n] = fi({
                d: 0,
                h: 0,
                m: 0,
                s: 0
            });
            gi((() => {
                e.start ? setTimeout((() => {
                    let s = t - 1;
                    s <= -1 ? e.update(e.question, "expired") : s >= 0 && (a(s), i())
                }), 1e3) : (a(e.duration), i())
            }), [t, e.start, e.duration]);
            const i = () => {
                let e = {
                        ...s
                    },
                    a = t;
                a > 86400 ? (e.d = Math.floor(a / 86400), a -= 86400 * e.d) : e.d = 0, a > 3600 ? (e.h = Math.floor(a / 3600), a -= 3600 * e.h) : e.h = 0, a > 60 ? (e.m = Math.floor(a / 60), a -= 60 * e.m) : e.m = 0, e.s = a, n(e)
            };
            let o = 0;
            return t > -1 && (o = Math.floor((e.question.question_duration - t) / e.question.question_duration * 100), o <= 0 && (o = 1)), vi("div", {
                className: "QuestionDuration"
            }, vi("div", {
                className: "question_timer"
            }, vi("div", {
                className: "question-duration-progress"
            }, vi("span", {
                style: {
                    width: 100 - o + "%"
                }
            })), vi("span", null, vi("span", {
                className: "question_timer_amount"
            }, s.m ? vi(yi, null, vi("span", null, s.m.toString().length < 2 ? "0" + s.m : s.m), vi("span", null, ":")) : vi(yi, null, vi("span", null, "00"), vi("span", null, ":")), s.s ? vi(yi, null, vi("span", null, s.s.toString().length < 2 ? "0" + s.s : s.s)) : "00"))))
        }, {
            createElement: ki,
            useState: xi,
            useEffect: Ni,
            Fragment: qi,
            render: Oi
        } = wp.element, Ii = ({
            progress: e,
            size: t
        }) => {
            let a, s;
            switch (t) {
                case "xs":
                    a = 10, s = 1;
                    break;
                case "s":
                    a = 12, s = 1.2;
                    break;
                case "sm":
                    a = 25, s = 2.5;
                    break;
                case "med":
                default:
                    a = 50, s = 5;
                    break;
                case "lg":
                    a = 75, s = 7.5;
                    break;
                case "xl":
                    a = 100, s = 10
            }
            const n = a - 2 * s,
                i = 2 * n * Math.PI,
                o = i - e / 100 * i;
            return ki("div", {
                className: "react-progress-circle"
            }, ki("svg", {
                height: 2 * a,
                width: 2 * a
            }, ki("circle", {
                className: "ReactProgressCircle_circleBackground",
                strokeWidth: s,
                style: {
                    strokeDashoffset: o
                },
                r: n,
                cx: a,
                cy: a
            }), ki("circle", {
                className: "ReactProgressCircle_circle",
                strokeWidth: s,
                strokeDasharray: i + " " + i,
                style: {
                    strokeDashoffset: o
                },
                r: n,
                cx: a,
                cy: a
            })))
        }, {
            Component: Ci,
            createElement: Si,
            render: Pi,
            useState: Ei,
            useEffect: zi,
            Fragment: Ti
        } = wp.element, Li = e => {
            const [t, a] = Ei(e.duration), [s, n] = Ei({
                d: 0,
                h: 0,
                m: 0,
                s: 0
            });
            zi((() => {
                e.start ? setTimeout((() => {
                    let s = t - 1;
                    s <= -1 ? e.update(e.quiz_id, "expired") : s >= 0 && (a(s), i())
                }), 1e3) : (a(e.duration), i())
            }), [t, e.start, e.duration]);
            const i = () => {
                let e = {
                        ...s
                    },
                    a = t;
                a > 86400 ? (e.d = Math.floor(a / 86400), a -= 86400 * e.d) : e.d = 0, a > 3600 ? (e.h = Math.floor(a / 3600), a -= 3600 * e.h) : e.h = 0, a > 60 ? (e.m = Math.floor(a / 60), a -= 60 * e.m) : e.m = 0, e.s = a, n(e)
            };
            let o = 0;
            return t > -1 && (o = Math.floor((e.duration - t) / e.duration * 100), o <= 0 && (o = 1)), Si("div", {
                className: "quiztimer"
            }, Si("div", {
                className: "circle_timer"
            }, o ? Si(Ii, {
                size: window.innerWidth < 480 ? "xs" : "sm",
                progress: o
            }) : "", Si("span", null, Si("span", {
                className: "timer_amount"
            }, s.d ? Si(Ti, null, Si("span", null, s.d), Si("span", null, ":")) : "", s.h ? Si(Ti, null, Si("span", null, s.h), Si("span", null, ":")) : "", s.m ? Si(Ti, null, Si("span", null, s.m), Si("span", null, ":")) : "", Si("span", null, s.s)), Si("span", {
                className: "timer_unit"
            }, s.d ? Si(Ti, null, Si("span", null, window.wplms_course_data.translations.days), Si("span", null)) : "", s.h ? Si(Ti, null, Si("span", null, window.wplms_course_data.translations.hours), Si("span", null)) : "", s.m ? Si(Ti, null, Si("span", null, window.wplms_course_data.translations.minutes), Si("span", null)) : "", Si("span", null, window.wplms_course_data.translations.seconds)))))
        }, {
            createElement: Mi,
            render: $i,
            useState: ji,
            useEffect: Ai,
            Fragment: Di
        } = wp.element, Hi = e => {
            const [t, a] = ji({});
            Ai((() => {
                a(e.question)
            }), [e.question]);
            let s = "";
            t.hasOwnProperty("marked_answer") && (s = t.marked_answer);
            let n = "";
            return t.hasOwnProperty("usercorrect") && t.show_correct_answer && (n = "question_incorrect", t.usercorrect > 0 && (n = "question_correct")), Mi(Di, null, Mi("div", {
                className: "question_content",
                dangerouslySetInnerHTML: {
                    __html: t && t.content ? t.content : ""
                }
            }), Mi("input", {
                type: "text",
                className: n,
                value: s,
                onChange: s => {
                    let n = {
                        ...e.question
                    };
                    null != t && t.expired || (n.marked_answer = s.target.value, a(n), e.update(n, e.index, "changed"))
                }
            }))
        }, {
            createElement: Ui,
            render: Fi,
            useState: Ji,
            useEffect: Ri,
            Fragment: Bi
        } = wp.element, Vi = e => {
            const [t, a] = Ji({}), [s, n] = Ji([]);
            Ri((() => {
                if (a(e.question), e.question.hasOwnProperty("options") && e.question.options.length && Array.isArray(e.question.options)) {
                    let t = [...e.question.options];
                    window.wplms_course_data.question_option_rearrange && i(t), n(t)
                }
            }), [e.question.options, e.question.correct_indexes]);
            const i = e => {
                for (var t = e.length - 1; t > 0; t--) {
                    var a = Math.floor(Math.random() * (t + 1)),
                        s = e[t];
                    e[t] = e[a], e[a] = s
                }
            };
            let o = "";
            return t.hasOwnProperty("marked_answer") && t.marked_answer, Ui(Bi, null, Ui("div", {
                className: "question_content",
                dangerouslySetInnerHTML: {
                    __html: t && t.content ? t.content : ""
                }
            }), t.options && t.options.length ? Ui(Bi, null, (t => s.map((function(s, n) {
                let i = t.options.findIndex((e => e == s));
                return Ui("div", {
                    className: "question_option radio " + (t.show_correct_answer && t.correct_indexes ? t.correct_indexes && t.correct_indexes.length && t.correct_indexes.includes(i) ? "question_correct" : "question_incorrect" : "")
                }, Ui("input", {
                    type: "radio",
                    name: e.quiz_id + "_" + t.id,
                    value: i,
                    id: e.quiz_id + "_" + t.id + i,
                    checked: parseInt(t.marked_answer) === i,
                    onChange: s => {
                        var n;
                        let i = {
                            ...t
                        };
                        null != e && null !== (n = e.question) && void 0 !== n && n.expired || (i.marked_answer = s.target.value, a(i), e.update(i, e.index, "changed"))
                    }
                }), Ui("label", {
                    for: e.quiz_id + "_" + t.id + i,
                    dangerouslySetInnerHTML: {
                        __html: s
                    }
                }))
            })))(t), t.attempted ? "" : Ui("span", {
                className: "resetq_answer button",
                onClick: t => {
                    let s = {
                        ...e.question
                    };
                    s.marked_answer = null, a(s), e.update(s, e.index, "changed")
                }
            }, Ui("i", {
                class: "vicon vicon-trash"
            }))) : "")
        }, {
            createElement: Xi,
            render: Wi,
            useState: Yi,
            useEffect: Qi,
            Fragment: Ki
        } = wp.element, Gi = e => {
            const [t, a] = Yi({}), [s, n] = Yi(-1);
            Qi((() => {
                a(e.question)
            }), [e.question]);
            const i = (s, i) => {
                if (null != t && t.expired) return;
                let o = {
                    ...e.question
                };
                o.marked_answer && o.marked_answer.length || (o.marked_answer = []), o.marked_answer[i] = s, a(o), e.update(o, e.index, "changed"), n(-1)
            };
            return Xi(Ki, null, t && t.extra_content && Array.isArray(t.extra_content) ? Xi("div", {
                className: "question_content"
            }, t.extra_content.map((function(a, o) {
                return Xi(Ki, null, Xi("span", {
                    className: "select_question_content",
                    dangerouslySetInnerHTML: {
                        __html: a
                    }
                }), t.options && t.options.length && o < t.extra_content.length - 1 ? Xi(Ki, null, ((t, a) => Xi(Ki, null, Xi("span", {
                    className: t.show_correct_answer && t.correct_indexes ? t.correct_indexes && t.correct_indexes.length && t.correct_indexes.includes(a) ? "question_correct" : "question_incorrect" : ""
                }, s === a ? Xi("select", {
                    name: e.quiz_id + "_" + t.id,
                    id: e.quiz_id + "_" + t.id,
                    onChange: e => {
                        null != t && t.expired || i(e.target.value, a)
                    }
                }, Xi("option", null, window.wplms_course_data.translations.select_option), ((e, t) => e.options.map((function(a, s) {
                    return e.hasOwnProperty("options_arr") && e.options_arr && e.options_arr.length && e.options_arr[t] && e.options_arr[t].length ? e.options_arr[t].includes((s + 1).toString()) || e.options_arr[t].includes(s + 1) ? Xi("option", {
                        value: s,
                        selected: e.marked_answer && e.marked_answer.length && e.marked_answer[t] && parseInt(e.marked_answer[t]) === s,
                        dangerouslySetInnerHTML: {
                            __html: a
                        }
                    }) : void 0 : Xi("option", {
                        value: s,
                        selected: e.marked_answer && e.marked_answer.length && e.marked_answer[t] && parseInt(e.marked_answer[t]) === s,
                        dangerouslySetInnerHTML: {
                            __html: a
                        }
                    })
                })))(t, a)) : t.options.length && t.hasOwnProperty("marked_answer") && t.marked_answer.length && t.marked_answer[a] ? Xi("span", {
                    className: "selectimitate ",
                    dangerouslySetInnerHTML: {
                        __html: t.options[t.marked_answer[a]]
                    },
                    onClick: () => {
                        null != t && t.expired || n(a)
                    }
                }) : Xi("span", {
                    className: "selectimitate no_value",
                    onClick: () => {
                        n(a)
                    }
                })), t.attempted ? "" : Xi("span", {
                    className: "resetq_answer button",
                    onClick: e => {
                        i(null, a)
                    }
                }, Xi("i", {
                    class: "vicon vicon-trash"
                }))))(t, o)) : "")
            }))) : "")
        }, {
            createElement: Zi,
            render: eo,
            useState: to,
            useEffect: ao,
            Fragment: so
        } = wp.element, no = e => {
            const [t, a] = to({}), [s, n] = to([]);
            "undefined" != e.question.marked_answer && null != e.question.marked_answer || (e.question.marked_answer = []), ao((() => {
                if (a(e.question), e.question.hasOwnProperty("options") && e.question.options.length && Array.isArray(e.question.options)) {
                    let t = [...e.question.options];
                    window.wplms_course_data.question_option_rearrange && i(t), n(t)
                }
            }), [e.question.options, e.question.correct_indexes]);
            const i = e => {
                for (var t = e.length - 1; t > 0; t--) {
                    var a = Math.floor(Math.random() * (t + 1)),
                        s = e[t];
                    e[t] = e[a], e[a] = s
                }
            };
            return Zi(so, null, Zi("div", {
                className: "question_content",
                dangerouslySetInnerHTML: {
                    __html: t && t.content ? t.content : ""
                }
            }), t.options && t.options.length ? Zi(so, null, (t => {
                if (s && s.length) return s.map((function(s, n) {
                    let i = t.options.findIndex((e => e == s));
                    return Zi("div", {
                        className: "question_option checkbox " + (t.show_correct_answer && t.correct_indexes ? t.correct_indexes && t.correct_indexes.length && t.correct_indexes.includes(i) ? "question_correct" : "question_incorrect" : "")
                    }, Zi("input", {
                        type: "checkbox",
                        name: e.quiz_id + "_" + t.id,
                        value: i,
                        id: e.quiz_id + "_" + t.id + i,
                        checked: e.question.marked_answer && e.question.marked_answer.length && e.question.marked_answer.includes(i),
                        onChange: s => {
                            var n;
                            let o = {
                                ...t
                            };
                            if (null == e || null === (n = e.question) || void 0 === n || !n.expired) {
                                if (o.marked_answer.includes(i)) {
                                    let e = o.marked_answer.indexOf(i);
                                    e > -1 && o.marked_answer.splice(e, 1)
                                } else o.marked_answer.push(i);
                                a(o), e.update(o, e.index, "changed")
                            }
                        }
                    }), Zi("label", {
                        for: e.quiz_id + "_" + t.id + i,
                        dangerouslySetInnerHTML: {
                            __html: s
                        }
                    }))
                }))
            })(t), t.attempted ? "" : Zi("span", {
                className: "resetq_answer button",
                onClick: t => {
                    let s = {
                        ...e.question
                    };
                    s.marked_answer = null, a(s), e.update(s, e.index, "changed")
                }
            }, Zi("i", {
                class: "vicon vicon-trash"
            }))) : "")
        }, {
            createElement: io,
            render: oo,
            useState: ro,
            useEffect: lo,
            Fragment: co
        } = wp.element, uo = e => {
            const [t, a] = ro("120"), [s, n] = ro((() => {
                let t = "";
                return e.marked_answer && e.marked_answer.length && (t = e.marked_answer[e.index]), t
            }));
            lo((() => {
                void 0 !== s && s && s.length > 15 && a(8 * s.length)
            }), [s]);
            let i = "";
            return s && (i = s), io(co, null, io("div", {
                className: "fillblank_area"
            }, io("input", {
                type: "text",
                value: i,
                onChange: t => {
                    if (!e.canedit) return;
                    let a = s;
                    a = t.target.value, n(a), e.update(a, e.index, "changed")
                },
                style: {
                    width: t + "px"
                }
            })))
        }, {
            createElement: mo,
            render: po,
            useState: _o,
            useEffect: wo,
            Fragment: vo
        } = wp.element, ho = e => {
            const [t, a] = _o({});
            wo((() => {
                a(e.question)
            }), [e.question]);
            let s = "";
            t.hasOwnProperty("marked_answer") && t.marked_answer;
            const n = (s, n, i) => {
                if ("changed" == i) {
                    var o;
                    if (null != e && null !== (o = e.question) && void 0 !== o && o.expired) return;
                    let i = {
                        ...t
                    };
                    i.marked_answer && t.marked_answer.length || (i.marked_answer = []), i.marked_answer[n] = s, a(i), e.update(i, e.index, "changed")
                }
            };
            return mo(vo, null, t && t.extra_content && Array.isArray(t.extra_content) ? mo("div", {
                className: "question_content"
            }, t.extra_content.map((function(a, s) {
                var i;
                return mo(vo, null, mo("span", {
                    className: "select_question_content",
                    dangerouslySetInnerHTML: {
                        __html: a
                    }
                }), s < t.extra_content.length - 1 ? mo("div", {
                    className: "fillblank_area " + (t.show_correct_answer && t.correct_indexes ? t.correct_indexes && t.correct_indexes.length && t.correct_indexes.includes(s) ? "question_correct" : "question_incorrect" : "")
                }, mo(uo, {
                    update: n,
                    index: s,
                    marked_answer: t.marked_answer,
                    canedit: !(null != e && null !== (i = e.question) && void 0 !== i && i.expired)
                })) : "")
            }))) : "")
        }, {
            createElement: fo,
            render: go,
            useState: yo,
            useEffect: bo,
            Fragment: ko
        } = wp.element, xo = e => {
            const [t, a] = yo([]), [s, n] = yo(!1), [i, o] = yo([]), [r, l] = yo([]), [d, c] = yo([]), [u, m] = yo([]);
            bo((() => {
                o(e.items)
            }), [e.items]);
            let p = "droppable";
            s && (p += " active");
            const _ = e => {
                let t = "";
                return s === i[e] && (t = "dragging"), t
            };
            return fo("div", {
                className: p
            }, i.map(((p, w) => {
                var v;
                return fo("div", {
                    key: w,
                    onDragStart: e => {
                        i[w] && n(i[w])
                    },
                    onDragEnd: () => {
                        n(!1)
                    },
                    onDragOver: t => {
                        t.preventDefault(), ((t, a) => {
                            if (!s) return;
                            let n = i[a];
                            if (s === n) return;
                            let r = [...i];
                            r = r.filter((e => e != s)), r.splice(a, 0, s), o(r), e.update(r, "changed")
                        })(0, w)
                    },
                    ref: e => {
                        ((e, s) => {
                            if (e) {
                                let n = t;
                                n[s] || (n[s] = e), a(n)
                            }
                        })(e, w)
                    },
                    draggable: !(null !== (v = e.question) && void 0 !== v && v.expired),
                    style: u[w],
                    onTouchStart: e => {
                        let a = [...d];
                        t.map(((e, t) => {
                            let s = e.getBoundingClientRect();
                            a[t] = s
                        })), c(a), i[w] && n(i[w])
                    },
                    onTouchMove: e => {
                        e.preventDefault();
                        let t = [];
                        if ("touchmove" === e.type) {
                            let a = [...u];
                            a[w] = {
                                transform: "translateY(" + Math.floor(e.touches[0].clientY - d[w].top) + "px)"
                            }, m(a), t.push(i[w]);
                            let s = [];
                            if (e.touches[0].clientY && d.map(((a, n) => {
                                    a.top + a.height / 2 > e.touches[0].clientY && i[n] !== i[w] && t.push(i[n]), a.bottom - a.height / 2 < e.touches[0].clientY && i[n] !== i[w] && s.push(i[n])
                                })), s.length)
                                for (let e = s.length - 1; e >= 0; e--) t.unshift(s[e]);
                            l(t)
                        }
                    },
                    onTouchEnd: t => {
                        o(r), e.update(r, "changed"), c([]), m([]), n(!1), l([])
                    },
                    className: _(w) + " " + (e.question.show_correct_answer && e.question.correct_indexes ? e.question.correct_indexes && e.question.correct_indexes.length && e.question.correct_indexes.includes(w) ? "question_correct" : "question_incorrect" : "")
                }, fo("div", {
                    dangerouslySetInnerHTML: {
                        __html: p
                    }
                }))
            })))
        }, {
            createElement: No,
            render: qo,
            useState: Oo,
            useEffect: Io,
            Fragment: Co
        } = wp.element, So = e => {
            e.question.id, e.quiz_id;
            const [t, a] = Oo({}), [s, n] = Oo(!1);
            return Io((() => {
                let t = e.question;
                if (!s && t && t.marked_answer && t.marked_answer.length && "undefined" != t.marked_answer) {
                    let e = [];
                    t.marked_answer.map(((a, s) => {
                        e.push(t.original_options[parseInt(a) - 1])
                    })), t.options = e, a(t), n(!0)
                }
                a(t)
            }), [e.question]), No(Co, null, No("div", {
                className: "question_content",
                dangerouslySetInnerHTML: {
                    __html: t && t.content ? t.content : ""
                }
            }), t.options && t.options.length ? No(Co, null, No(xo, {
                items: t.options,
                original_items: t.original_options,
                update: (s, n) => {
                    if ((null == t || !t.expired) && "changed" == n) {
                        let n = t;
                        n.marked_answer = [], s.map(((e, t) => {
                            let a = n.original_options.indexOf(e);
                            n.marked_answer.push(a + 1)
                        })), a(n), e.update(n, e.index, "changed")
                    }
                },
                question: t
            }), t.attempted ? "" : No("span", {
                className: "resetq_answer button",
                onClick: s => {
                    let n = {
                        ...t
                    };
                    n.marked_answer = null, n.options = n.original_options, a(n), e.update(n, e.index, "changed")
                }
            }, No("i", {
                class: "vicon vicon-trash"
            }))) : "")
        }, {
            createElement: Po,
            render: Eo,
            useState: zo,
            useEffect: To,
            Fragment: Lo
        } = wp.element;

        function Mo(e) {
            if (null == e) return !0;
            if (void 0 === e) return !0;
            if ("number" == typeof e) return !1;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }
        const $o = e => {
                const [t, a] = zo([]), [s, n] = zo(!1), [i, o] = zo([]), [r, l] = zo(""), [d, c] = zo([]), [u, m] = zo(e.matches), [p, _] = zo([]), [w, v] = zo([]), [h, f] = zo([]), [g, y] = zo({}), [b, k] = zo([]), [x, N] = zo([]), [q, O] = zo([]), [I, C] = zo({
                    x: 0,
                    y: 0
                }), [S, P] = zo([]);
                To((() => {
                    let t = [...e.items];
                    e.question && e.question.marked_answer && e.question.marked_answer.length && e.question.marked_answer.map((a => {
                        a && "NaN" != typeof a && (t = t.filter((t => t != e.question.original_options[a - 1])))
                    })), c(t);
                    let a = [];
                    e.question && e.question.marked_answer && e.question.marked_answer.length && e.question.marked_answer.map((e => {
                        parseFloat(e) - 1 >= 0 ? a.push(e - 1) : a.push(null)
                    })), O(a), e.update(!1, "reset")
                }), [e.items, e.reset]);
                let E = "droppable";
                s && (E += " active");
                const z = e => {
                    let t = "";
                    return s === d[e] && (t = "dragging"), t
                };
                return Po("div", {
                    className: "match_playground"
                }, Po("div", {
                    className: "match_options"
                }, u && u.length ? u.map(((a, l) => {
                    var m;
                    return Po("div", {
                        key: l,
                        className: "match_option " + (e.question.show_correct_answer && e.question.correct_indexes ? e.question.correct_indexes && e.question.correct_indexes.length && e.question.correct_indexes.includes(l) ? "question_correct" : "question_incorrect" : ""),
                        onDrop: t => {
                            ((t, a) => {
                                if (!s) return;
                                if (S.index === a) return;
                                let n = [...d],
                                    i = [...q];
                                if (!i[a] && 0 !== i[a]) {
                                    n = n.filter((e => e != s));
                                    let t = e.original_items.indexOf(s);
                                    u && u.length && u.map(((e, t) => {
                                        Mo(i[t]) && (i[t] = null)
                                    })), Mo(a) || (i[a] = t), O(i), c(n), e.update(i, "changed")
                                }
                            })(0, l)
                        },
                        onDragOver: e => {
                            e.preventDefault()
                        },
                        ref: e => {
                            ((e, t) => {
                                if (e) {
                                    let a = i;
                                    a[t] || (a[t] = e), o(a)
                                }
                            })(e, l)
                        }
                    }, Po("div", {
                        dangerouslySetInnerHTML: {
                            __html: a
                        }
                    }), Po("div", {
                        className: "children"
                    }, e.original_items && null != q[l] && e.original_items[q[l]] ? Po("div", {
                        key: "droppablediv" + l,
                        draggable: !(null !== (m = e.question) && void 0 !== m && m.expired),
                        onDragStart: t => {
                            e.original_items[q[l]] && (n(e.original_items[q[l]]), P({
                                index: l,
                                source: "droppablediv"
                            }))
                        },
                        onDragEnd: () => {
                            n(!1), P({})
                        },
                        onDragOver: e => {
                            e.preventDefault()
                        },
                        className: z(l),
                        style: x[q[l]],
                        onTouchStart: a => {
                            let s = [...w];
                            t.map(((e, t) => {
                                let a = e.getBoundingClientRect();
                                s[t] = a
                            })), v(s);
                            let o = [...h];
                            i.map(((e, t) => {
                                let a = e.getBoundingClientRect();
                                o[t] = a
                            })), f(o), y(r.getBoundingClientRect()), e.original_items[q[l]] && (n(e.original_items[q[l]]), P({
                                index: l,
                                source: "droppablediv"
                            })), P({})
                        },
                        onTouchMove: e => {
                            if (e && (e.preventDefault(), "touchmove" === e.type)) {
                                let t = [...x];
                                t[q[l]] = {
                                    position: "fixed",
                                    top: Math.floor(e.touches[0].clientY) + "px",
                                    left: Math.floor(e.touches[0].clientX) + "px"
                                }, N(t), C({
                                    x: e.touches[0].clientX,
                                    y: e.touches[0].clientY
                                })
                            }
                        },
                        onTouchEnd: t => {
                            let a = [...d],
                                i = [...q];
                            g.top < I.y && g.top + g.height > I.y && g.left < I.x && g.left + g.width > I.x && (a.push(s), i.map(((e, t) => {
                                e == q[l] && (i[t] = null)
                            }))), f([]), y({}), n(!1), N([]), k([]), c(a), O(i), e.update(i, "changed"), C({
                                x: 0,
                                y: 0
                            })
                        }
                    }, Po("div", {
                        dangerouslySetInnerHTML: {
                            __html: e.original_items[q[l]]
                        }
                    })) : ""))
                })) : ""), Po("div", {
                    className: E,
                    onDragOver: e => {
                        e.preventDefault()
                    },
                    onDrop: t => {
                        (t => {
                            if ("droppablediv" !== S.source) return;
                            if (!s) return;
                            let a = [...d],
                                n = [...q];
                            a.includes(s) || a.push(s), c(a), Mo(S.index) || (n[S.index] = null), O(n), e.update(n, "changed")
                        })()
                    },
                    ref: e => {
                        (e => {
                            e && l(e)
                        })(e)
                    }
                }, d && d.length ? d.map(((s, o) => {
                    var r;
                    return Po("div", {
                        key: "draggablediv" + o,
                        onDragStart: e => {
                            d[o] && n(d[o]), P({})
                        },
                        onDragEnd: () => {
                            n(!1), P({})
                        },
                        onDragOver: e => {
                            e.preventDefault()
                        },
                        ref: e => {
                            ((e, s) => {
                                if (e) {
                                    let n = t;
                                    n[s] || (n[s] = e), a(n)
                                }
                            })(e, o)
                        },
                        draggable: !(null !== (r = e.question) && void 0 !== r && r.expired),
                        style: b[o],
                        onTouchStart: e => {
                            let a = [...w];
                            t.map(((e, t) => {
                                let s = e.getBoundingClientRect();
                                a[t] = s
                            })), v(a);
                            let o = [...h];
                            i.map(((e, t) => {
                                let a = e.getBoundingClientRect();
                                o[t] = a
                            })), f(o), s && n(s), P({})
                        },
                        onTouchMove: e => {
                            if (e.preventDefault(), "touchmove" === e.type) {
                                let t = [...b];
                                t[o] = {
                                    position: "fixed",
                                    top: Math.floor(e.touches[0].clientY) + "px",
                                    left: Math.floor(e.touches[0].clientX) + "px"
                                }, k(t), C({
                                    x: e.touches[0].clientX,
                                    y: e.touches[0].clientY
                                })
                            }
                        },
                        onTouchEnd: t => {
                            k([]);
                            let a = [...d],
                                i = [...q];
                            h.map(((t, n) => {
                                if (t.top < I.y && t.top + t.height > I.y && t.left < I.x && t.left + t.width > I.x) {
                                    let t = e.original_items.indexOf(s);
                                    t >= 0 && !i[n] && 0 !== i[n] && (i[n] = t, a = a.filter((e => e != s)))
                                }
                            })), f([]), n(!1), c(a), O(i), e.update(i, "changed"), C({
                                x: 0,
                                y: 0
                            })
                        },
                        className: z(o)
                    }, Po("div", {
                        dangerouslySetInnerHTML: {
                            __html: s
                        }
                    }))
                })) : ""))
            },
            {
                createElement: jo,
                render: Ao,
                useState: Do,
                useEffect: Ho,
                Fragment: Uo
            } = wp.element,
            Fo = e => {
                e.question.id, e.quiz_id;
                const [t, a] = Do({}), [s, n] = Do(!1);
                return Ho((() => {
                    a(e.question)
                }), [e.question]), jo(Uo, null, jo("div", {
                    className: "question_content"
                }, jo("div", {
                    className: "question_statement",
                    dangerouslySetInnerHTML: {
                        __html: t && t.extra_content && t.extra_content.statement ? t.extra_content.statement : ""
                    }
                }), t.options && t.options.length && t.content.match && t.content.match.length ? jo($o, {
                    matches: t.extra_content.match,
                    original_matches: t.extra_content.match,
                    items: t.options,
                    original_items: t.original_options,
                    update: (s, i) => {
                        var o;
                        if (null == e || null === (o = e.question) || void 0 === o || !o.expired) {
                            if ("changed" == i) {
                                let n = {
                                    ...t
                                };
                                n.marked_answer = [], s.map((e => {
                                    n.marked_answer.push(parseInt(e) + 1)
                                })), a(n), e.update(n, e.index, "changed")
                            }
                            "reset" == i && n(!1)
                        }
                    },
                    reset: s,
                    question: t
                }) : "", jo("div", {
                    className: "question_end",
                    dangerouslySetInnerHTML: {
                        __html: t && t.content && t.content.end ? t.content.end : ""
                    }
                })), t.attempted ? "" : jo("span", {
                    className: "resetq_answer button",
                    onClick: s => {
                        n(!0);
                        let i = {
                            ...t
                        };
                        i.marked_answer = null, i.options = i.original_options, a(i), e.update(i, e.index, "changed")
                    }
                }, jo("i", {
                    class: "vicon vicon-trash"
                })))
            },
            {
                createElement: Jo,
                render: Ro,
                useState: Bo,
                useEffect: Vo,
                Fragment: Xo
            } = wp.element,
            Wo = e => {
                const [t, a] = Bo(e.question);
                Vo((() => {
                    a(e.question)
                }), [e.question]);
                let s = "";
                return t.hasOwnProperty("marked_answer") && t.marked_answer, Jo(Xo, null, Jo("div", {
                    className: "question_content",
                    dangerouslySetInnerHTML: {
                        __html: t && t.content ? t.content : ""
                    }
                }), t.options && t.options.length ? Jo(Xo, null, (t => t.options.map((function(s, n) {
                    return Jo("div", {
                        className: "question_option radio " + (t.show_correct_answer && t.correct_indexes ? t.correct_indexes && t.correct_indexes.length && t.correct_indexes.includes(n) ? "question_correct" : "question_incorrect" : "")
                    }, Jo("input", {
                        type: "radio",
                        name: e.quiz_id + "_" + t.id,
                        value: n,
                        id: e.quiz_id + "_" + t.id + n,
                        checked: parseInt(t.marked_answer) === n,
                        onChange: s => {
                            var n;
                            if (null != e && null !== (n = e.question) && void 0 !== n && n.expired) return;
                            let i = {
                                ...t
                            };
                            i.marked_answer = s.target.value, a(i), e.update(i, e.index, "changed")
                        }
                    }), Jo("label", {
                        for: e.quiz_id + "_" + t.id + n,
                        dangerouslySetInnerHTML: {
                            __html: s
                        }
                    }))
                })))(t), t.attempted ? "" : Jo("span", {
                    className: "resetq_answer button",
                    onClick: t => {
                        let s = {
                            ...e.question
                        };
                        s.marked_answer = null, a(s)
                    }
                }, Jo("i", {
                    class: "vicon vicon-trash"
                }))) : "")
            },
            {
                createElement: Yo,
                render: Qo,
                useState: Ko,
                useEffect: Go,
                Fragment: Zo
            } = wp.element,
            er = e => {
                const [t, a] = Ko({});
                Go((() => {
                    a(e.question)
                }), [e.question]);
                let s = "";
                t.hasOwnProperty("marked_answer") && (s = t.marked_answer);
                let n = "";
                return t.hasOwnProperty("usercorrect") && t.show_correct_answer && (n = "question_incorrect", t.usercorrect > 0 && (n = "question_correct")), Yo(Zo, null, Yo("div", {
                    className: "question_content",
                    dangerouslySetInnerHTML: {
                        __html: t && t.content ? t.content : ""
                    }
                }), Yo("textarea", {
                    className: n,
                    type: "text",
                    onChange: t => {
                        let s = {
                            ...e.question
                        };
                        s.marked_answer = t.target.value, a(s), e.update(s, e.index, "changed")
                    },
                    value: s
                }, s))
            };
        var tr, ar, sr = sr || function(e, t) {
            var a = {},
                s = a.lib = {},
                n = function() {},
                i = s.Base = {
                    extend: function(e) {
                        n.prototype = this;
                        var t = new n;
                        return e && t.mixIn(e), t.hasOwnProperty("init") || (t.init = function() {
                            t.$super.init.apply(this, arguments)
                        }), t.init.prototype = t, t.$super = this, t
                    },
                    create: function() {
                        var e = this.extend();
                        return e.init.apply(e, arguments), e
                    },
                    init: function() {},
                    mixIn: function(e) {
                        for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                        e.hasOwnProperty("toString") && (this.toString = e.toString)
                    },
                    clone: function() {
                        return this.init.prototype.extend(this)
                    }
                },
                o = s.WordArray = i.extend({
                    init: function(e, t) {
                        e = this.words = e || [], this.sigBytes = null != t ? t : 4 * e.length
                    },
                    toString: function(e) {
                        return (e || l).stringify(this)
                    },
                    concat: function(e) {
                        var t = this.words,
                            a = e.words,
                            s = this.sigBytes;
                        if (e = e.sigBytes, this.clamp(), s % 4)
                            for (var n = 0; n < e; n++) t[s + n >>> 2] |= (a[n >>> 2] >>> 24 - n % 4 * 8 & 255) << 24 - (s + n) % 4 * 8;
                        else if (65535 < a.length)
                            for (n = 0; n < e; n += 4) t[s + n >>> 2] = a[n >>> 2];
                        else t.push.apply(t, a);
                        return this.sigBytes += e, this
                    },
                    clamp: function() {
                        var t = this.words,
                            a = this.sigBytes;
                        t[a >>> 2] &= 4294967295 << 32 - a % 4 * 8, t.length = e.ceil(a / 4)
                    },
                    clone: function() {
                        var e = i.clone.call(this);
                        return e.words = this.words.slice(0), e
                    },
                    random: function(t) {
                        for (var a = [], s = 0; s < t; s += 4) a.push(4294967296 * e.random() | 0);
                        return new o.init(a, t)
                    }
                }),
                r = a.enc = {},
                l = r.Hex = {
                    stringify: function(e) {
                        var t = e.words;
                        e = e.sigBytes;
                        for (var a = [], s = 0; s < e; s++) {
                            var n = t[s >>> 2] >>> 24 - s % 4 * 8 & 255;
                            a.push((n >>> 4).toString(16)), a.push((15 & n).toString(16))
                        }
                        return a.join("")
                    },
                    parse: function(e) {
                        for (var t = e.length, a = [], s = 0; s < t; s += 2) a[s >>> 3] |= parseInt(e.substr(s, 2), 16) << 24 - s % 8 * 4;
                        return new o.init(a, t / 2)
                    }
                },
                d = r.Latin1 = {
                    stringify: function(e) {
                        var t = e.words;
                        e = e.sigBytes;
                        for (var a = [], s = 0; s < e; s++) a.push(String.fromCharCode(t[s >>> 2] >>> 24 - s % 4 * 8 & 255));
                        return a.join("")
                    },
                    parse: function(e) {
                        for (var t = e.length, a = [], s = 0; s < t; s++) a[s >>> 2] |= (255 & e.charCodeAt(s)) << 24 - s % 4 * 8;
                        return new o.init(a, t)
                    }
                },
                c = r.Utf8 = {
                    stringify: function(e) {
                        try {
                            return decodeURIComponent(escape(d.stringify(e)))
                        } catch (e) {
                            throw Error("Malformed UTF-8 data")
                        }
                    },
                    parse: function(e) {
                        return d.parse(unescape(encodeURIComponent(e)))
                    }
                },
                u = s.BufferedBlockAlgorithm = i.extend({
                    reset: function() {
                        this._data = new o.init, this._nDataBytes = 0
                    },
                    _append: function(e) {
                        "string" == typeof e && (e = c.parse(e)), this._data.concat(e), this._nDataBytes += e.sigBytes
                    },
                    _process: function(t) {
                        var a = this._data,
                            s = a.words,
                            n = a.sigBytes,
                            i = this.blockSize,
                            r = n / (4 * i);
                        if (t = (r = t ? e.ceil(r) : e.max((0 | r) - this._minBufferSize, 0)) * i, n = e.min(4 * t, n), t) {
                            for (var l = 0; l < t; l += i) this._doProcessBlock(s, l);
                            l = s.splice(0, t), a.sigBytes -= n
                        }
                        return new o.init(l, n)
                    },
                    clone: function() {
                        var e = i.clone.call(this);
                        return e._data = this._data.clone(), e
                    },
                    _minBufferSize: 0
                });
            s.Hasher = u.extend({
                cfg: i.extend(),
                init: function(e) {
                    this.cfg = this.cfg.extend(e), this.reset()
                },
                reset: function() {
                    u.reset.call(this), this._doReset()
                },
                update: function(e) {
                    return this._append(e), this._process(), this
                },
                finalize: function(e) {
                    return e && this._append(e), this._doFinalize()
                },
                blockSize: 16,
                _createHelper: function(e) {
                    return function(t, a) {
                        return new e.init(a).finalize(t)
                    }
                },
                _createHmacHelper: function(e) {
                    return function(t, a) {
                        return new m.HMAC.init(e, a).finalize(t)
                    }
                }
            });
            var m = a.algo = {};
            return a
        }(Math);
        ar = (tr = sr).lib.WordArray, tr.enc.Base64 = {
                stringify: function(e) {
                    var t = e.words,
                        a = e.sigBytes,
                        s = this._map;
                    e.clamp(), e = [];
                    for (var n = 0; n < a; n += 3)
                        for (var i = (t[n >>> 2] >>> 24 - n % 4 * 8 & 255) << 16 | (t[n + 1 >>> 2] >>> 24 - (n + 1) % 4 * 8 & 255) << 8 | t[n + 2 >>> 2] >>> 24 - (n + 2) % 4 * 8 & 255, o = 0; 4 > o && n + .75 * o < a; o++) e.push(s.charAt(i >>> 6 * (3 - o) & 63));
                    if (t = s.charAt(64))
                        for (; e.length % 4;) e.push(t);
                    return e.join("")
                },
                parse: function(e) {
                    var t = e.length,
                        a = this._map;
                    (s = a.charAt(64)) && -1 != (s = e.indexOf(s)) && (t = s);
                    for (var s = [], n = 0, i = 0; i < t; i++)
                        if (i % 4) {
                            var o = a.indexOf(e.charAt(i - 1)) << i % 4 * 2,
                                r = a.indexOf(e.charAt(i)) >>> 6 - i % 4 * 2;
                            s[n >>> 2] |= (o | r) << 24 - n % 4 * 8, n++
                        } return ar.create(s, n)
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
            },
            function(e) {
                function t(e, t, a, s, n, i, o) {
                    return ((e = e + (t & a | ~t & s) + n + o) << i | e >>> 32 - i) + t
                }

                function a(e, t, a, s, n, i, o) {
                    return ((e = e + (t & s | a & ~s) + n + o) << i | e >>> 32 - i) + t
                }

                function s(e, t, a, s, n, i, o) {
                    return ((e = e + (t ^ a ^ s) + n + o) << i | e >>> 32 - i) + t
                }

                function n(e, t, a, s, n, i, o) {
                    return ((e = e + (a ^ (t | ~s)) + n + o) << i | e >>> 32 - i) + t
                }
                for (var i = sr, o = (l = i.lib).WordArray, r = l.Hasher, l = i.algo, d = [], c = 0; 64 > c; c++) d[c] = 4294967296 * e.abs(e.sin(c + 1)) | 0;
                l = l.MD5 = r.extend({
                    _doReset: function() {
                        this._hash = new o.init([1732584193, 4023233417, 2562383102, 271733878])
                    },
                    _doProcessBlock: function(e, i) {
                        for (var o = 0; 16 > o; o++) {
                            var r = e[l = i + o];
                            e[l] = 16711935 & (r << 8 | r >>> 24) | 4278255360 & (r << 24 | r >>> 8)
                        }
                        o = this._hash.words;
                        var l = e[i + 0],
                            c = (r = e[i + 1], e[i + 2]),
                            u = e[i + 3],
                            m = e[i + 4],
                            p = e[i + 5],
                            _ = e[i + 6],
                            w = e[i + 7],
                            v = e[i + 8],
                            h = e[i + 9],
                            f = e[i + 10],
                            g = e[i + 11],
                            y = e[i + 12],
                            b = e[i + 13],
                            k = e[i + 14],
                            x = e[i + 15],
                            N = t(N = o[0], I = o[1], O = o[2], q = o[3], l, 7, d[0]),
                            q = t(q, N, I, O, r, 12, d[1]),
                            O = t(O, q, N, I, c, 17, d[2]),
                            I = t(I, O, q, N, u, 22, d[3]);
                        N = t(N, I, O, q, m, 7, d[4]), q = t(q, N, I, O, p, 12, d[5]), O = t(O, q, N, I, _, 17, d[6]), I = t(I, O, q, N, w, 22, d[7]), N = t(N, I, O, q, v, 7, d[8]), q = t(q, N, I, O, h, 12, d[9]), O = t(O, q, N, I, f, 17, d[10]), I = t(I, O, q, N, g, 22, d[11]), N = t(N, I, O, q, y, 7, d[12]), q = t(q, N, I, O, b, 12, d[13]), O = t(O, q, N, I, k, 17, d[14]), N = a(N, I = t(I, O, q, N, x, 22, d[15]), O, q, r, 5, d[16]), q = a(q, N, I, O, _, 9, d[17]), O = a(O, q, N, I, g, 14, d[18]), I = a(I, O, q, N, l, 20, d[19]), N = a(N, I, O, q, p, 5, d[20]), q = a(q, N, I, O, f, 9, d[21]), O = a(O, q, N, I, x, 14, d[22]), I = a(I, O, q, N, m, 20, d[23]), N = a(N, I, O, q, h, 5, d[24]), q = a(q, N, I, O, k, 9, d[25]), O = a(O, q, N, I, u, 14, d[26]), I = a(I, O, q, N, v, 20, d[27]), N = a(N, I, O, q, b, 5, d[28]), q = a(q, N, I, O, c, 9, d[29]), O = a(O, q, N, I, w, 14, d[30]), N = s(N, I = a(I, O, q, N, y, 20, d[31]), O, q, p, 4, d[32]), q = s(q, N, I, O, v, 11, d[33]), O = s(O, q, N, I, g, 16, d[34]), I = s(I, O, q, N, k, 23, d[35]), N = s(N, I, O, q, r, 4, d[36]), q = s(q, N, I, O, m, 11, d[37]), O = s(O, q, N, I, w, 16, d[38]), I = s(I, O, q, N, f, 23, d[39]), N = s(N, I, O, q, b, 4, d[40]), q = s(q, N, I, O, l, 11, d[41]), O = s(O, q, N, I, u, 16, d[42]), I = s(I, O, q, N, _, 23, d[43]), N = s(N, I, O, q, h, 4, d[44]), q = s(q, N, I, O, y, 11, d[45]), O = s(O, q, N, I, x, 16, d[46]), N = n(N, I = s(I, O, q, N, c, 23, d[47]), O, q, l, 6, d[48]), q = n(q, N, I, O, w, 10, d[49]), O = n(O, q, N, I, k, 15, d[50]), I = n(I, O, q, N, p, 21, d[51]), N = n(N, I, O, q, y, 6, d[52]), q = n(q, N, I, O, u, 10, d[53]), O = n(O, q, N, I, f, 15, d[54]), I = n(I, O, q, N, r, 21, d[55]), N = n(N, I, O, q, v, 6, d[56]), q = n(q, N, I, O, x, 10, d[57]), O = n(O, q, N, I, _, 15, d[58]), I = n(I, O, q, N, b, 21, d[59]), N = n(N, I, O, q, m, 6, d[60]), q = n(q, N, I, O, g, 10, d[61]), O = n(O, q, N, I, c, 15, d[62]), I = n(I, O, q, N, h, 21, d[63]), o[0] = o[0] + N | 0, o[1] = o[1] + I | 0, o[2] = o[2] + O | 0, o[3] = o[3] + q | 0
                    },
                    _doFinalize: function() {
                        var t = this._data,
                            a = t.words,
                            s = 8 * this._nDataBytes,
                            n = 8 * t.sigBytes;
                        a[n >>> 5] |= 128 << 24 - n % 32;
                        var i = e.floor(s / 4294967296);
                        for (a[15 + (n + 64 >>> 9 << 4)] = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8), a[14 + (n + 64 >>> 9 << 4)] = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8), t.sigBytes = 4 * (a.length + 1), this._process(), a = (t = this._hash).words, s = 0; 4 > s; s++) n = a[s], a[s] = 16711935 & (n << 8 | n >>> 24) | 4278255360 & (n << 24 | n >>> 8);
                        return t
                    },
                    clone: function() {
                        var e = r.clone.call(this);
                        return e._hash = this._hash.clone(), e
                    }
                }), i.MD5 = r._createHelper(l), i.HmacMD5 = r._createHmacHelper(l)
            }(Math),
            function() {
                var e, t = sr,
                    a = (e = t.lib).Base,
                    s = e.WordArray,
                    n = (e = t.algo).EvpKDF = a.extend({
                        cfg: a.extend({
                            keySize: 4,
                            hasher: e.MD5,
                            iterations: 1
                        }),
                        init: function(e) {
                            this.cfg = this.cfg.extend(e)
                        },
                        compute: function(e, t) {
                            for (var a = (r = this.cfg).hasher.create(), n = s.create(), i = n.words, o = r.keySize, r = r.iterations; i.length < o;) {
                                l && a.update(l);
                                var l = a.update(e).finalize(t);
                                a.reset();
                                for (var d = 1; d < r; d++) l = a.finalize(l), a.reset();
                                n.concat(l)
                            }
                            return n.sigBytes = 4 * o, n
                        }
                    });
                t.EvpKDF = function(e, t, a) {
                    return n.create(a).compute(e, t)
                }
            }(), sr.lib.Cipher || function(e) {
                var t = (p = sr).lib,
                    a = t.Base,
                    s = t.WordArray,
                    n = t.BufferedBlockAlgorithm,
                    i = p.enc.Base64,
                    o = p.algo.EvpKDF,
                    r = t.Cipher = n.extend({
                        cfg: a.extend(),
                        createEncryptor: function(e, t) {
                            return this.create(this._ENC_XFORM_MODE, e, t)
                        },
                        createDecryptor: function(e, t) {
                            return this.create(this._DEC_XFORM_MODE, e, t)
                        },
                        init: function(e, t, a) {
                            this.cfg = this.cfg.extend(a), this._xformMode = e, this._key = t, this.reset()
                        },
                        reset: function() {
                            n.reset.call(this), this._doReset()
                        },
                        process: function(e) {
                            return this._append(e), this._process()
                        },
                        finalize: function(e) {
                            return e && this._append(e), this._doFinalize()
                        },
                        keySize: 4,
                        ivSize: 4,
                        _ENC_XFORM_MODE: 1,
                        _DEC_XFORM_MODE: 2,
                        _createHelper: function(e) {
                            return {
                                encrypt: function(t, a, s) {
                                    return ("string" == typeof a ? _ : m).encrypt(e, t, a, s)
                                },
                                decrypt: function(t, a, s) {
                                    return ("string" == typeof a ? _ : m).decrypt(e, t, a, s)
                                }
                            }
                        }
                    });
                t.StreamCipher = r.extend({
                    _doFinalize: function() {
                        return this._process(!0)
                    },
                    blockSize: 1
                });
                var l = p.mode = {},
                    d = function(e, t, a) {
                        var s = this._iv;
                        s ? this._iv = void 0 : s = this._prevBlock;
                        for (var n = 0; n < a; n++) e[t + n] ^= s[n]
                    },
                    c = (t.BlockCipherMode = a.extend({
                        createEncryptor: function(e, t) {
                            return this.Encryptor.create(e, t)
                        },
                        createDecryptor: function(e, t) {
                            return this.Decryptor.create(e, t)
                        },
                        init: function(e, t) {
                            this._cipher = e, this._iv = t
                        }
                    })).extend();
                c.Encryptor = c.extend({
                    processBlock: function(e, t) {
                        var a = this._cipher,
                            s = a.blockSize;
                        d.call(this, e, t, s), a.encryptBlock(e, t), this._prevBlock = e.slice(t, t + s)
                    }
                }), c.Decryptor = c.extend({
                    processBlock: function(e, t) {
                        var a = this._cipher,
                            s = a.blockSize,
                            n = e.slice(t, t + s);
                        a.decryptBlock(e, t), d.call(this, e, t, s), this._prevBlock = n
                    }
                }), l = l.CBC = c, c = (p.pad = {}).Pkcs7 = {
                    pad: function(e, t) {
                        for (var a, n = (a = (a = 4 * t) - e.sigBytes % a) << 24 | a << 16 | a << 8 | a, i = [], o = 0; o < a; o += 4) i.push(n);
                        a = s.create(i, a), e.concat(a)
                    },
                    unpad: function(e) {
                        e.sigBytes -= 255 & e.words[e.sigBytes - 1 >>> 2]
                    }
                }, t.BlockCipher = r.extend({
                    cfg: r.cfg.extend({
                        mode: l,
                        padding: c
                    }),
                    reset: function() {
                        r.reset.call(this);
                        var e = (t = this.cfg).iv,
                            t = t.mode;
                        if (this._xformMode == this._ENC_XFORM_MODE) var a = t.createEncryptor;
                        else a = t.createDecryptor, this._minBufferSize = 1;
                        this._mode = a.call(t, this, e && e.words)
                    },
                    _doProcessBlock: function(e, t) {
                        this._mode.processBlock(e, t)
                    },
                    _doFinalize: function() {
                        var e = this.cfg.padding;
                        if (this._xformMode == this._ENC_XFORM_MODE) {
                            e.pad(this._data, this.blockSize);
                            var t = this._process(!0)
                        } else t = this._process(!0), e.unpad(t);
                        return t
                    },
                    blockSize: 4
                });
                var u = t.CipherParams = a.extend({
                        init: function(e) {
                            this.mixIn(e)
                        },
                        toString: function(e) {
                            return (e || this.formatter).stringify(this)
                        }
                    }),
                    m = (l = (p.format = {}).OpenSSL = {
                        stringify: function(e) {
                            var t = e.ciphertext;
                            return ((e = e.salt) ? s.create([1398893684, 1701076831]).concat(e).concat(t) : t).toString(i)
                        },
                        parse: function(e) {
                            var t = (e = i.parse(e)).words;
                            if (1398893684 == t[0] && 1701076831 == t[1]) {
                                var a = s.create(t.slice(2, 4));
                                t.splice(0, 4), e.sigBytes -= 16
                            }
                            return u.create({
                                ciphertext: e,
                                salt: a
                            })
                        }
                    }, t.SerializableCipher = a.extend({
                        cfg: a.extend({
                            format: l
                        }),
                        encrypt: function(e, t, a, s) {
                            s = this.cfg.extend(s);
                            var n = e.createEncryptor(a, s);
                            return t = n.finalize(t), n = n.cfg, u.create({
                                ciphertext: t,
                                key: a,
                                iv: n.iv,
                                algorithm: e,
                                mode: n.mode,
                                padding: n.padding,
                                blockSize: e.blockSize,
                                formatter: s.format
                            })
                        },
                        decrypt: function(e, t, a, s) {
                            return s = this.cfg.extend(s), t = this._parse(t, s.format), e.createDecryptor(a, s).finalize(t.ciphertext)
                        },
                        _parse: function(e, t) {
                            return "string" == typeof e ? t.parse(e, this) : e
                        }
                    })),
                    p = (p.kdf = {}).OpenSSL = {
                        execute: function(e, t, a, n) {
                            return n || (n = s.random(8)), e = o.create({
                                keySize: t + a
                            }).compute(e, n), a = s.create(e.words.slice(t), 4 * a), e.sigBytes = 4 * t, u.create({
                                key: e,
                                iv: a,
                                salt: n
                            })
                        }
                    },
                    _ = t.PasswordBasedCipher = m.extend({
                        cfg: m.cfg.extend({
                            kdf: p
                        }),
                        encrypt: function(e, t, a, s) {
                            return a = (s = this.cfg.extend(s)).kdf.execute(a, e.keySize, e.ivSize), s.iv = a.iv, (e = m.encrypt.call(this, e, t, a.key, s)).mixIn(a), e
                        },
                        decrypt: function(e, t, a, s) {
                            return s = this.cfg.extend(s), t = this._parse(t, s.format), a = s.kdf.execute(a, e.keySize, e.ivSize, t.salt), s.iv = a.iv, m.decrypt.call(this, e, t, a.key, s)
                        }
                    })
            }(),
            function() {
                for (var e = sr, t = e.lib.BlockCipher, a = e.algo, s = [], n = [], i = [], o = [], r = [], l = [], d = [], c = [], u = [], m = [], p = [], _ = 0; 256 > _; _++) p[_] = 128 > _ ? _ << 1 : _ << 1 ^ 283;
                var w = 0,
                    v = 0;
                for (_ = 0; 256 > _; _++) {
                    var h = (h = v ^ v << 1 ^ v << 2 ^ v << 3 ^ v << 4) >>> 8 ^ 255 & h ^ 99;
                    s[w] = h, n[h] = w;
                    var f = p[w],
                        g = p[f],
                        y = p[g],
                        b = 257 * p[h] ^ 16843008 * h;
                    i[w] = b << 24 | b >>> 8, o[w] = b << 16 | b >>> 16, r[w] = b << 8 | b >>> 24, l[w] = b, b = 16843009 * y ^ 65537 * g ^ 257 * f ^ 16843008 * w, d[h] = b << 24 | b >>> 8, c[h] = b << 16 | b >>> 16, u[h] = b << 8 | b >>> 24, m[h] = b, w ? (w = f ^ p[p[p[y ^ f]]], v ^= p[p[v]]) : w = v = 1
                }
                var k = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
                a = a.AES = t.extend({
                    _doReset: function() {
                        for (var e = (a = this._key).words, t = a.sigBytes / 4, a = 4 * ((this._nRounds = t + 6) + 1), n = this._keySchedule = [], i = 0; i < a; i++)
                            if (i < t) n[i] = e[i];
                            else {
                                var o = n[i - 1];
                                i % t ? 6 < t && 4 == i % t && (o = s[o >>> 24] << 24 | s[o >>> 16 & 255] << 16 | s[o >>> 8 & 255] << 8 | s[255 & o]) : (o = s[(o = o << 8 | o >>> 24) >>> 24] << 24 | s[o >>> 16 & 255] << 16 | s[o >>> 8 & 255] << 8 | s[255 & o], o ^= k[i / t | 0] << 24), n[i] = n[i - t] ^ o
                            } for (e = this._invKeySchedule = [], t = 0; t < a; t++) i = a - t, o = t % 4 ? n[i] : n[i - 4], e[t] = 4 > t || 4 >= i ? o : d[s[o >>> 24]] ^ c[s[o >>> 16 & 255]] ^ u[s[o >>> 8 & 255]] ^ m[s[255 & o]]
                    },
                    encryptBlock: function(e, t) {
                        this._doCryptBlock(e, t, this._keySchedule, i, o, r, l, s)
                    },
                    decryptBlock: function(e, t) {
                        var a = e[t + 1];
                        e[t + 1] = e[t + 3], e[t + 3] = a, this._doCryptBlock(e, t, this._invKeySchedule, d, c, u, m, n), a = e[t + 1], e[t + 1] = e[t + 3], e[t + 3] = a
                    },
                    _doCryptBlock: function(e, t, a, s, n, i, o, r) {
                        for (var l = this._nRounds, d = e[t] ^ a[0], c = e[t + 1] ^ a[1], u = e[t + 2] ^ a[2], m = e[t + 3] ^ a[3], p = 4, _ = 1; _ < l; _++) {
                            var w = s[d >>> 24] ^ n[c >>> 16 & 255] ^ i[u >>> 8 & 255] ^ o[255 & m] ^ a[p++],
                                v = s[c >>> 24] ^ n[u >>> 16 & 255] ^ i[m >>> 8 & 255] ^ o[255 & d] ^ a[p++],
                                h = s[u >>> 24] ^ n[m >>> 16 & 255] ^ i[d >>> 8 & 255] ^ o[255 & c] ^ a[p++];
                            m = s[m >>> 24] ^ n[d >>> 16 & 255] ^ i[c >>> 8 & 255] ^ o[255 & u] ^ a[p++], d = w, c = v, u = h
                        }
                        w = (r[d >>> 24] << 24 | r[c >>> 16 & 255] << 16 | r[u >>> 8 & 255] << 8 | r[255 & m]) ^ a[p++], v = (r[c >>> 24] << 24 | r[u >>> 16 & 255] << 16 | r[m >>> 8 & 255] << 8 | r[255 & d]) ^ a[p++], h = (r[u >>> 24] << 24 | r[m >>> 16 & 255] << 16 | r[d >>> 8 & 255] << 8 | r[255 & c]) ^ a[p++], m = (r[m >>> 24] << 24 | r[d >>> 16 & 255] << 16 | r[c >>> 8 & 255] << 8 | r[255 & u]) ^ a[p++], e[t] = w, e[t + 1] = v, e[t + 2] = h, e[t + 3] = m
                    },
                    keySize: 8
                }), e.AES = t._createHelper(a)
            }();
        const nr = sr,
            ir = {
                stringify: function(e) {
                    var t = {
                        ct: e.ciphertext.toString(nr.enc.Base64)
                    };
                    return e.iv && (t.iv = e.iv.toString()), e.salt && (t.s = e.salt.toString()), JSON.stringify(t).replace(/\s/g, "")
                },
                parse: function(e) {
                    var t = JSON.parse(e),
                        a = nr.lib.CipherParams.create({
                            ciphertext: nr.enc.Base64.parse(t.ct)
                        });
                    return t.iv && (a.iv = nr.enc.Hex.parse(t.iv)), t.s && (a.salt = nr.enc.Hex.parse(t.s)), a
                }
            },
            or = e => {
                let t = "";
                if (!e.type) return "";
                switch (e.type) {
                    case "truefalse":
                        t = e.correct ? window.wplms_course_data.translations.true : window.wplms_course_data.translations.false;
                        break;
                    case "single":
                    case "survey":
                        t = e.options[parseInt(e.correct) - 1];
                        break;
                    case "multiple":
                        if (t = "", (a = e.correct.split(",")).length)
                            for (let s = 0; s < a.length; s++) t += e.options[parseInt(a[s]) - 1] + (s + 1 < a.length ? " , " : "");
                        break;
                    case "sort":
                    case "match":
                        if (t = "", (a = e.correct.split(",")).length)
                            for (let s = 0; s < a.length; s++) t += e.original_options[parseInt(a[s]) - 1] + (s + 1 < a.length ? " , " : "");
                        break;
                    case "select":
                        if (t = "", (a = e.correct.split("|")).length)
                            for (let s = 0; s < a.length; s++) t += e.options[parseInt(a[s]) - 1] + (s + 1 < a.length ? " , " : "");
                        break;
                    case "fillblank":
                    case "text":
                    case "largetext":
                    case "smalltext":
                        var a;
                        if (t = "", (a = e.correct.split("|")).length)
                            for (let e = 0; e < a.length; e++) t += a[e] + (e + 1 < a.length ? " , " : "")
                }
                return t
            };

        function rr(e) {
            if (null == e) return !0;
            if (void 0 === e) return !0;
            if ("number" == typeof e) return !1;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }
        const lr = (e, t = null, a = null, s = null, n = !0) => {
                s && (s = parseFloat(s)), a || (s = null);
                let i = 0,
                    o = [],
                    r = 0;
                e.user_marks = 0;
                let l = 0,
                    d = null;
                rr(e.correct) || (d = JSON.parse(nr.AES.decrypt(e.correct, e.key, {
                    format: ir
                }).toString(nr.enc.Utf8))), e.correct = d;
                let c = null;
                switch (e.hasOwnProperty("marked_answer") && (c = e.marked_answer), e.type) {
                    case "truefalse":
                        e.marked = c, e.correct = parseInt(d), c == d ? (e.user_marks = e.marks, i = 1) : e.user_marks = 0, o.push(d);
                        break;
                    case "single":
                        e.marked = c, c == d - 1 ? (e.user_marks = e.marks, i = 1) : e.user_marks = 0, o.push(d - 1);
                        break;
                    case "multiple":
                        rr(c) && (c = []);
                        var u = c;
                        e.marked = c.join(",").slice();
                        var m = d.split(",");
                        if (o = m, t) {
                            if (u.length)
                                for (let e = 0; e < u.length; e++) {
                                    let t = u[e] + 1;
                                    t = t.toString(), -1 !== m.indexOf(t) ? r++ : l++
                                }
                            i = r / m.length, e.user_marks = Math.round(e.marks * i * 100) / 100
                        } else if (u.length == m.length)
                            for (let t = 0; t < u.length; t++) {
                                e.user_marks = e.marks, i = 1;
                                let a = u[t] + 1;
                                if (a = a.toString(), -1 == m.indexOf(a)) {
                                    e.user_marks = 0, i = 0;
                                    break
                                }
                            }
                        break;
                    case "match":
                    case "sort":
                        rr(c) && (c = []), e.marked = c.join(",").slice();
                        let a = c,
                            s = d.split(","),
                            n = 0;
                        if (a && a.length) {
                            for (let t = 0; t < a.length; t++) {
                                e.user_marks = e.marks, i = 1;
                                let d = "";
                                rr(a[t]) || (d = a[t].toString()), s[t] != d ? (i && (e.user_marks = 0, i = 0, n = 1), l++) : (r++, o.push(t))
                            }
                            t ? (i = r / s.length, e.user_marks = Math.round(e.marks * i * 100) / 100) : n && (e.user_marks = 0, i = 0)
                        }
                        break;
                    case "fillblank":
                        rr(c) && (c = []), c.map(((e, t) => {
                            c[t] = e.toLowerCase(), window.wplms_course_data && window.wplms_course_data.hasOwnProperty("trim_question_answer") && window.wplms_course_data.trim_question_answer && c[t].trim()
                        })), e.marked = c.join("|").slice(), d = d.toLowerCase();
                        let p = d.split("|");
                        if (e.user_marks = 0, c.length) {
                            e.user_marks = e.marks, i = 1;
                            for (let t = 0; t < c.length; t++) {
                                let a = "";
                                rr(c[t]) || (a = c[t].toString());
                                let s = [];
                                rr(p[t]) || Array.isArray(p[t]) || (s = p[t].split(",")), -1 == s.indexOf(a) ? (i && (e.user_marks = 0, i = 0), l++) : (r++, o.push(t))
                            }
                            t ? (i = r / p.length, e.user_marks = Math.round(e.marks * i * 100) / 100) : c.length !== p.length && (e.user_marks = 0, i = 0)
                        }
                        break;
                    case "select":
                        rr(c) && (c = []), e.marked = c.join("|").slice();
                        let _ = d.split("|");
                        if (e.user_marks = 0, c && c.length) {
                            e.user_marks = e.marks, i = 1;
                            for (let t = 0; t < c.length; t++) {
                                let a = "";
                                a = (parseInt(c[t]) + 1).toString(), a != _[t] ? (i && (e.user_marks = 0, i = 0), l++) : (r++, o.push(t))
                            }
                            t ? (i = r / _.length, e.user_marks = Math.round(e.marks * i * 100) / 100) : c.length !== _.length && (e.user_marks = 0, i = 0)
                        }
                        break;
                    case "smalltext":
                    case "largetext":
                        e.marked = c, c && d && c.toLowerCase() == d.toLowerCase() ? (e.user_marks = e.marks, i = 1) : e.user_marks = 0
                }
                if (!rr(c) && s && (t && l > 0 ? e.user_marks = e.user_marks - l * s : i || (e.user_marks = e.user_marks - s)), e.auto || n || (e.user_marks = 0, e.show_correct_answer = 0), o && o.length)
                    for (var p = o.length - 1; p >= 0; p--) "multiple" == e.type ? o[p] = parseInt(o[p] - 1) : o[p] = parseInt(o[p]);
                return e.correct_indexes = o, e.auto && (e.usercorrect = i, e.attempted = !0), e.marked = (e => {
                    let t = "";
                    if (!e.type) return t;
                    if (!e.marked || "undefined" == e.marked) return t;
                    switch (e.type) {
                        case "truefalse":
                        case "single":
                        case "survey":
                            t = e.options[parseInt(e.marked)];
                            break;
                        case "multiple":
                            if (t = "", (a = e.marked.split(",")).length)
                                for (let s = 0; s < a.length; s++) t += e.options[parseInt(a[s])] + (s + 1 < a.length ? " , " : "");
                            break;
                        case "sort":
                        case "match":
                            if ((a = e.marked.split(",")).length)
                                for (let s = 0; s < a.length; s++) "undefined" !== e.original_options[parseInt(a[s]) - 1] && null != e.original_options[parseInt(a[s]) - 1] && "" != e.original_options[parseInt(a[s]) - 1] || (e.original_options[parseInt(a[s]) - 1] = "____"), t += e.original_options[parseInt(a[s]) - 1] + (s + 1 < a.length ? " , " : "");
                            break;
                        case "select":
                            if (t = "", (a = e.marked.split("|")).length)
                                for (let s = 0; s < a.length; s++) t += e.options[parseInt(a[s])] + (s + 1 < a.length ? " , " : "");
                            break;
                        case "fillblank":
                        case "text":
                            var a;
                            if (t = "", (a = e.marked.split("|")).length)
                                for (let e = 0; e < a.length; e++) t += a[e] + (e + 1 < a.length ? " , " : "");
                            break;
                        case "largetext":
                        case "smalltext":
                            t = e.marked
                    }
                    return t
                })(e), e.correct = or(e), e
            },
            {
                createElement: dr,
                render: cr,
                useState: ur,
                useEffect: mr,
                Fragment: pr,
                RawHTML: _r
            } = wp.element,
            wr = e => {
                const [t, a] = ur({}), [s, n] = ur(!1);
                mr((() => {
                    a(e.question), setTimeout((() => {
                        n(!0)
                    }), 200)
                }), []);
                let i = "incorrect",
                    o = "checked_answer incorrect";
                return t.hasOwnProperty("user_marks") && t.user_marks && parseFloat(t.user_marks) > 0 && (i = "correct", o = "checked_answer correct"), dr(pr, null, t.show_correct_answer && void 0 !== t.correct && t.correct.length ? dr("div", {
                    className: o
                }, dr("strong", null, window.wplms_course_data.translations.correct_answer, dr(_r, null, t.correct))) : "", dr("div", {
                    className: s ? "question_wrapper loaded" : "question_wrapper"
                }, dr("div", {
                    className: "result"
                }, dr("div", {
                    className: i
                }, dr("span", null), dr("strong", null, t.user_marks)))))
            },
            {
                createElement: vr,
                render: hr,
                useState: fr,
                useEffect: gr,
                Fragment: yr
            } = wp.element,
            br = e => {
                let t = "",
                    a = "";
                return gr((() => {}), [e.question]), e.question.hasOwnProperty("show_hint") && e.question.show_hint ? (a = "question_hint_content message show", t = "question_hint show") : (e.question.show_hint = 0, a = "question_hint_content message", t = "question_hint"), vr(yr, null, e.question.hint ? vr("span", {
                    className: t,
                    onClick: t => {
                        e.question.show_hint = !e.question.show_hint, e.update({
                            ...e.question
                        }, e.index, "changed")
                    }
                }) : "", e.question.hint ? vr("span", {
                    className: a,
                    dangerouslySetInnerHTML: {
                        __html: e.question.hint
                    }
                }) : "")
            },
            {
                createElement: kr,
                render: xr,
                useState: Nr,
                useEffect: qr,
                Fragment: Or
            } = wp.element,
            Ir = e => {
                const [t, a] = Nr({}), [s, n] = Nr([]);
                qr((() => {
                    a(e.quiz), n(e.currentQuestions)
                }), [e.quiz, e.currentQuestions]);
                let i = [];
                if (t.hasOwnProperty("meta") && t.meta.hasOwnProperty("questions") && t.meta.questions && t.meta.questions.length && (i = t.meta.questions), i.length)
                    if (null !== e.filter) switch (e.filter) {
                        case "wrong":
                            i = i.filter((e => !e.hasOwnProperty("user_marks") || !e.user_marks || parseFloat(e.user_marks) <= 0));
                            break;
                        case "correct":
                            i = i.filter((e => e.hasOwnProperty("user_marks") && e.user_marks && parseFloat(e.user_marks) > 0));
                            break;
                        case "bookmarked":
                            i = i.filter((t => e.bookMarked.indexOf(t.id) > -1))
                    } else i = t.meta.questions;
                return kr("div", {
                    className: ""
                }, kr("div", {
                    class: t && t.meta && t.meta.questions && t.meta.questions.length >= 10 ? "timeline_wrapper question_numbers" : "timeline_wrapper"
                }, kr("ul", null, t && t.meta && t.meta.questions && t.meta.questions.length ? i.map(((a, i) => {
                    let o = "";
                    return e.bookMarked.indexOf(a.id) > -1 && (o += " bookmarked"), ("undefined" != a.marked_answer && null != a.marked_answer || Array.isArray(a.marked_answer) && a.marked_answer.length) && (o += " done", a.hasOwnProperty("attempted") && a.attempted && (a.hasOwnProperty("user_marks") && a.user_marks && parseFloat(a.user_marks) > 0 ? o += " correct" : o += " incorrect")), -1 !== s.indexOf(i) && (o += " active"), kr("li", {
                        className: o,
                        "data-number": window.wplms_course_data.translations.question_prefix + (i + 1)
                    }, kr("span", {
                        onClick: a => {
                            ((a, i, o) => {
                                a.preventDefault();
                                let r = [...s],
                                    l = [];
                                if (t.question_number && "undefined" != t.question_number && t.question_number > 0) {
                                    if (-1 !== r.indexOf(o)) return;
                                    let e = Math.ceil((o + 1) / t.question_number),
                                        a = e * t.question_number - t.question_number,
                                        s = e * t.question_number;
                                    for (let e = a; e < s; e++) l.push(e);
                                    n(l)
                                }
                                e.update(l, "show")
                            })(a, 0, i)
                        }
                    }, a.marks))
                })) : "", t && t.meta && t.meta.questions && t.meta.questions.length ? kr("span", {
                    className: "hide_questions",
                    onClick: e.hideQuestions
                }, kr("span", {
                    class: "vicon vicon-angle-double-left"
                }), kr("span", null, window.wplms_course_data.translations.hide_questions)) : "")))
            },
            {
                createElement: Cr,
                render: Sr,
                useState: Pr,
                useEffect: Er,
                Fragment: zr
            } = wp.element,
            {
                createElement: Tr,
                render: Lr,
                useState: Mr,
                useEffect: $r,
                Fragment: jr
            } = wp.element,
            Ar = e => {
                const [t, a] = Mr({}), [s, n] = Mr([]), [i, o] = Mr(1);
                $r((() => {
                    if (a(e.quiz), n(e.currentQuestions), e.currentQuestions.length) {
                        let t = Math.ceil((e.currentQuestions[0] + 1) / e.quiz.question_number);
                        o(t)
                    }
                    const t = document.createElement("script");
                    t.src = "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js", t.async = !0, t.onload = () => {
                        document.dispatchEvent(new Event("VibeBP_Editor_Content"))
                    }, document.body.appendChild(t)
                }), [e.quiz, e.currentQuestions]), $r((() => {
                    a(e.quiz), r(null, 1)
                }), [e.filter]), $r((() => {
                    "bookmarked" == e.filter && e.questions.length && s.length && e.questions.length <= s[s.length - 1] && r(null, e.questions.length)
                }), [e.bookMarked]);
                const r = (a, s) => {
                        if (a && a.preventDefault(), i === s) return;
                        let r = [],
                            l = s * t.question_number - t.question_number,
                            d = s * t.question_number;
                        for (let e = l; e < d; e++) r.push(e);
                        n(r), e.update(r, "show"), o(s)
                    },
                    l = (a = null, o) => {
                        a && a.preventDefault();
                        let r = [...s],
                            l = [];
                        if (t.question_number && "undefined" != t.question_number && t.question_number > 0)
                            if (o > 0) {
                                let a;
                                a = t.question_number + r[r.length] > e.questions.length ? e.questions.length : r[r.length - 1] + t.question_number + 1;
                                for (let e = r[r.length - 1] + 1; e < a; e++) l.push(e);
                                let s = i;
                                s++, n(l)
                            } else {
                                for (let e = r[0] - 1; e >= r[0] - t.question_number; e--) l.unshift(e);
                                let e = i;
                                e--, n(l)
                            } e.update(l, "show")
                    };
                return t && t.meta && e.questions && e.questions.length ? Tr("div", {
                    class: "quiz_pagination_wrapper buttons has-addons"
                }, e.questions[s[0] - 1] && "undefined" != e.questions[s[0] - 1] ? Tr("span", {
                    href: "#",
                    className: "button ques_link left prevq",
                    onClick: e => {
                        l(e, -1)
                    }
                }, Tr("i", {
                    className: "vicon vicon-angle-left",
                    "aria-hidden": "true"
                })) : Tr("span", {
                    href: "#",
                    className: "button ques_link left prevq faded"
                }, Tr("i", {
                    className: "vicon vicon-angle-left",
                    "aria-hidden": "true"
                })), (() => {
                    let a = Math.ceil(e.questions.length / t.question_number),
                        s = a,
                        n = [],
                        o = 0;
                    if (a > 1)
                        for (; a;)
                            if (a) {
                                let e = a;
                                i == e ? n.unshift(Tr("span", {
                                    className: "button active",
                                    onClick: t => {
                                        r(t, e)
                                    }
                                }, a)) : (i - 1 >= 1 || i + 1 <= s) && (i - 1 == e || i + 1 == e || 1 == e || e == s ? n.unshift(Tr("span", {
                                    className: "button",
                                    onClick: t => {
                                        r(t, e)
                                    }
                                }, a)) : o < 2 && (n.unshift(Tr("span", {
                                    className: "button"
                                }, "...")), o++)), a--
                            } return n
                })(), e.questions[s[s.length - 1] + 1] && "undefined" != e.questions[s[s.length - 1] + 1] ? Tr("span", {
                    href: "#",
                    className: "button ques_link right nextq",
                    onClick: e => {
                        l(e, 1)
                    }
                }, Tr("i", {
                    className: "vicon vicon-angle-right",
                    "aria-hidden": "true"
                })) : Tr("span", {
                    href: "#",
                    className: "button ques_link right nextq faded"
                }, Tr("i", {
                    className: "vicon vicon-angle-right",
                    "aria-hidden": "true"
                }))) : ""
            },
            {
                createElement: Dr,
                render: Hr,
                useState: Ur,
                useEffect: Fr,
                Fragment: Jr,
                RawHTML: Rr
            } = wp.element,
            Br = e => Dr(Jr, null, e.active ? Dr("div", {
                className: "confirmpopup_wrapper"
            }, Dr("div", {
                className: "confirmpopup_content"
            }, Dr("div", {
                dangerouslySetInnerHTML: {
                    __html: e.content
                }
            }), Dr("div", {
                className: "buttons_wrapper"
            }, Dr("span", {
                className: "button",
                onClick: t => {
                    e.yesfunction, e.update(e.type, "trigger")
                }
            }, e.yes), Dr("span", {
                className: "button",
                onClick: t => {
                    e.update(e.type, "nottrigger")
                }
            }, e.no)))) : ""),
            {
                createElement: Vr,
                render: Xr,
                useState: Wr,
                useEffect: Yr,
                Fragment: Qr
            } = wp.element;

        function Kr(e) {
            if (null == e) return !0;
            if (void 0 === e) return !0;
            if ("number" == typeof e) return !1;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }
        const Gr = e => {
                const [t, a] = Wr(e.quiz), [s, n] = Wr(!1), [i, o] = Wr(""), [r, l] = Wr({}), [d, c] = Wr({});
                return Yr((() => {
                    let t = 0,
                        a = 0,
                        s = 0,
                        n = 0;
                    if (e.quiz && e.quiz.meta && e.quiz.meta.questions && (e.quiz.meta.questions.map(((e, i) => {
                            e.hasOwnProperty("usercorrect") && e.hasOwnProperty("marked_answer") && !Kr(e.marked_answer) ? parseInt(e.usercorrect) > 0 ? t++ : a++ : s++, n++
                        })), c({
                            correct: t,
                            incorrect: a,
                            ommitted: s
                        }), "" != i)) {
                        let e = {
                                datasets: [{
                                    data: [t, a, s],
                                    backgroundColor: ["#82c362", "#dc6a6a", "#5381ab"]
                                }],
                                labels: [window.wplms_course_data.translations.correct + " (" + t + ") (" + Math.round(t / n * 100) + "%)", window.wplms_course_data.translations.incorrect + " (" + a + ") (" + Math.round(a / n * 100) + "%)", window.wplms_course_data.translations.unattempted + " (" + s + ") (" + Math.round(s / n * 100) + "%)"]
                            },
                            o = new Chart(i, {
                                type: "pie",
                                data: e
                            });
                        l(o)
                    }
                }), [i]), Vr("div", {
                    className: "quiz_stats_chart"
                }, t && t.meta && t.meta.questions && t.meta.questions.length && t.submitted ? Vr(Qr, null, r && d ? Vr("div", {
                    className: "quiz_stats_chart_pie"
                }, Vr("canvas", {
                    ref: e => {
                        e && "" == i && o(e)
                    }
                })) : "", Vr("div", {
                    className: "question_stats_content_wrapper"
                }, Vr("span", {
                    className: "question_stats_content_heading"
                }, window.wplms_course_data.translations.historical), Vr("div", {
                    className: "question_stats_content"
                }, t.meta.questions.map(((e, t) => {
                    if (e.hasOwnProperty("correct_data")) return Vr("div", {
                        className: e.hasOwnProperty("user_marks") && e.user_marks && parseFloat(e.user_marks) > 0 ? "checked_answer correct" : "checked_answer incorrect"
                    }, Vr("span", null, window.wplms_course_data.translations.q, t + 1), Vr("span", null, e.correct_data, "%"))
                }))), t.hasOwnProperty("tags_data") && !Kr(t.tags_data) ? Vr(Qr, null, Vr("span", {
                    className: "question_stats_content_heading"
                }, window.wplms_course_data.translations.correct_by_tag), Vr("div", {
                    className: "question_stats_content"
                }, t.tags_data.map((e => Vr("div", {
                    className: "checked_answer correct"
                }, Vr("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.label
                    }
                }), Vr("span", null, e.value, "%")))))) : "")) : "")
            },
            {
                createElement: Zr,
                render: el,
                useState: tl,
                useEffect: al,
                Fragment: sl
            } = wp.element,
            {
                dispatch: nl,
                select: il
            } = wp.data,
            ol = e => {
                const [t, a] = tl([]), [s, n] = tl(null), [i, o] = tl(!0), [r, l] = tl(null), [d, c] = tl(!1);
                al((() => {
                    let e = il("vibebp").getToken();
                    ! function(e) {
                        if (null == e) return !0;
                        if ("number" == typeof e) return !0;
                        if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
                        for (var t in e)
                            if (e.hasOwnProperty(t)) return !1;
                        return !0
                    }(e) ? (u(e), n(e)) : localforage.getItem("bp_login_token").then((t => {
                        e = t, u(e), n(e)
                    }))
                }), [e.quizid]);
                const u = t => {
                    fetch(window.wplms_course_data.api_url + "/user/quiz/previousresults/" + e.quizid, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            token: t
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e && e.length && a(e), o(!1)
                    })).catch((e => {
                        o(!1), console.error("Uh oh, an error!", e), nl("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                };
                return !i && t.length ? Zr("div", {
                    className: "previous_results_wrapper"
                }, Zr("h3", {
                    className: "subtitle",
                    onClick: () => {
                        c(!d)
                    }
                }, Zr("span", null, window.wplms_course_data.translations.previous_results), " ", Zr("span", {
                    className: d ? "vicon vicon-minus" : "vicon vicon-plus"
                })), d ? r && r.hasOwnProperty("id") ? Zr("div", {
                    className: "single_quiz_result quiz_results"
                }, Zr("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        l(null)
                    }
                }), Zr(id, {
                    quizid: e.quizid,
                    activity: r.id
                })) : Zr("div", null, t.length ? Zr("ul", {
                    className: "quiz_results"
                }, t.map((e => Zr("li", {
                    className: "result",
                    onClick: () => {
                        l(e)
                    }
                }, Zr("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.content
                    }
                }))))) : Zr("div", {
                    className: "vbp_message message"
                }, window.wplms_course_data.translations.results_not_available)) : "") : ""
            },
            {
                createElement: rl,
                render: ll,
                useState: dl,
                useEffect: cl,
                Fragment: ul
            } = wp.element,
            ml = e => e.quiz && e.quiz.meta && e.quiz.meta.questions && e.quiz.meta.questions.length ? rl("div", {
                className: "course_status"
            }, rl("div", {
                className: "incourse"
            }, rl("div", {
                className: "quiz_content",
                dangerouslySetInnerHTML: {
                    __html: e.quiz && e.quiz.content ? e.quiz.content : ""
                }
            }), rl("div", {
                className: "quiz_questions_content"
            }, rl("h1", null, rl("span", {
                className: "student_score"
            }, e.quiz.marks + "/" + e.quiz.max_marks), e.quiz.quiz_passing_score ? rl("span", null, e.quiz.marks > e.quiz.quiz_passing_score ? window.wplms_course_data.translations.passed : window.wplms_course_data.translations.failed) : ""), e.quiz.meta.questions.map(((t, a) => {
                let s = "",
                    n = "";
                return t.hasOwnProperty("show_hint") && t.show_hint ? (n = "question_hint_content message show", s = "question_hint show") : (n = "question_hint_content message", s = "question_hint"), rl("div", {
                    className: "question"
                }, rl("div", {
                    className: "question_actions"
                }, rl("span", null, window.wplms_course_data.translations.question_full_prefix, " ", a + 1), rl("div", null, rl("span", {
                    className: "marks"
                }, rl("i", {
                    className: "vicon vicon-medall"
                }), t.marks))), e.renderSwitch(t, a), t.attempted && t.show_correct_answer && t.explanation.length ? rl(ul, null, rl("div", {
                    className: "answers"
                }, t.hasOwnProperty("correct") ? rl("div", {
                    className: "correct_answer"
                }, rl("label", null, window.wplms_course_data.translations.correct_answer), rl("div", {
                    dangerouslySetInnerHTML: {
                        __html: t.correct
                    }
                })) : "", t.hasOwnProperty("marked") && t.marked ? rl("div", {
                    className: "marked_answer"
                }, rl("label", null, window.wplms_course_data.translations.marked_answer), rl("div", {
                    dangerouslySetInnerHTML: {
                        __html: t.marked
                    }
                })) : ""), rl("div", {
                    className: "explanation"
                }, rl("strong", null, window.wplms_course_data.translations.question_explanation), rl("div", {
                    dangerouslySetInnerHTML: {
                        __html: t.explanation
                    }
                }))) : "")
            })), rl("style", null, '\n\t:root { --body: #fafafa; --highlight: #fff; --text: #475F7B; --bold: #394C62; --primary: #5A8DEE; --secondary: #475F7B; --success: #39DA8A; --primarycolor: #fff; --sidebar: #f4f4ff; --border: rgba(0,0,0,0.08); --darkborder: rgba(0,0,0,0.3); --blue: #5A8DEE; --indigo: #6610F2; --purple: #6F42C1; --pink: #E83E8C; --red: #FF5B5C; --orange: #FD7E14; --yellow: #FDAC41; --green: #39DA8A; --cyan: #00CFDD; --white: #FFFFFF; --gray: #475F7B; --gray-dark: #394C62; --info: #00CFDD; --warning: #FDAC41; --danger: #FF5B5C; --light: #A3AFBD; --dark: #394C62; --error: #ffe27e; --errortext: #725906; --shadow: rgba(0,0,0,0.2); } \n\t.correct_answer { margin-bottom: 1rem;border-bottom:1px solid rgba(0,0,0,0.1); } \n\t.course_status .incourse > * { margin: 0.5rem; } .course_status .incourse .quiz_pagination_wrapper { margin: 1.5rem 0; } .course_status .incourse .quiz_pagination_wrapper .buttons { align-items: center; display: flex; flex-wrap: wrap; justify-content: flex-start; } .course_status .incourse .quiz_pagination_wrapper .question .button { width: auto !important; display: inline-block !important; height: auto !important; } .course_status .incourse .quiz_pagination_wrapper > .button { background: var(--highlight) !important; color: var(--bold) !important; border: 1px solid var(--border) !important; min-width: auto !important; margin: 0; text-align: center; border-radius: 0; padding: 12px 0; width: 48px !important; } .course_status .incourse .quiz_pagination_wrapper > .button.right { float: none; } .course_status .incourse .quiz_pagination_wrapper > .button.active { background: var(--primary) !important; color: var(--primarycolor) !important; } .course_status .incourse .quiz_pagination_wrapper > .button.ques_link { min-with: auto !important; } .course_status .incourse .quiz_stats_chart { display: flex; flex-direction: row; flex-wrap: wrap; } .course_status .incourse .quiz_stats_chart .quiz_stats_chart_pie { width: 340px; } .course_status .incourse .quiz_stats_chart .question_stats_content_wrapper { width: calc(100% - 340px); margin-bottom: 1rem; } .course_status .incourse .quiz_stats_chart span.question_stats_content_heading { margin-bottom: 1rem; display: inline-block; } .course_status .incourse .quiz_stats_chart span.question_stats_content_heading:not(:nth-child(1)) { margin-top: 1.5rem; } .course_status .incourse .quiz_stats_chart .question_stats_content { display: flex; flex-wrap: wrap; margin: 0 -5px; } .course_status .incourse .quiz_stats_chart .question_stats_content > * { margin: 5px; } .course_status .incourse .question_wrapper { min-height: 100px; position: absolute; overflow: hidden; left: 0; top: 0; width: 100%; height: 100%; z-index: 99; text-align: center; transition: all 200ms ease-in; } .course_status .incourse .question_wrapper.loaded .result { transform: translateX(40%); } .course_status .incourse .question_wrapper.loaded .result .correct > span, .course_status .incourse .question_wrapper.loaded .result .incorrect > span { transform: scale(1); } .course_status .incourse .question_wrapper .fillblank_area { clear: none; display: inline-block; } .course_status .incourse .question_wrapper .result { transition: all 200ms ease-in; } .course_status .incourse .question_wrapper .incorrect, .course_status .incourse .question_wrapper .correct { display: inline-block; margin-top: 15px; padding: 10px; } .course_status .incourse .question_wrapper .incorrect strong { color: #ef614d; font-size: 48px; line-height: 64px; margin: 0 10px; font-weight: 600; } .course_status .incourse .question_wrapper .incorrect > span { background: #ef614d; } .course_status .incourse .question_wrapper .incorrect > span:before { content: "e646"; font-family: vicon; color: #fff; font-weight: 900; position: absolute; font-size: 3rem; top: 50%; left: 50%; transform: translate(-50%, -50%); } .course_status .incourse .question_wrapper .correct strong { font-size: 48px; line-height: 64px; margin: 0 10px; font-weight: 600; color: #75b733; } .course_status .incourse .question_wrapper .correct > span:before { content: "e64c"; font-family: vicon; color: #fff; font-weight: 900; position: absolute; font-size: 3rem; top: 50%; left: 50%; transform: translate(-50%, -50%); } .course_status .incourse .question_wrapper span { position: relative; width: 64px; height: 64px; float: left; border-radius: 50%; background: #75b733; display: block; padding: 30px; transform: scale(15); transition: all 200ms ease-in-out; } .course_status .incourse .question_wrapper span .correct > span:before { font-family: fonticon; top: 18px; left: 18px; content: "e038"; color: #FFF; font-size: 30px; line-height: 1; position: absolute; } .course_status .incourse .checked_answer { margin: 2.5rem 0 0; padding: 1rem; font-size: 1.2rem; color: var(--bold); border: 1px solid var(--border); background-color: var(--sidebar); border-radius: 2px; } .course_status .incourse .checked_answer.incorrect { background: #d8eec2; } .course_status .incourse .checked_answer.correct { background: #d8eec2; } .course_status .incourse .checked_answer span { white-space: nowrap; } .course_status .incourse .quiztimer { display: grid; justify-items: center; align-items: center; } .course_status .incourse .quiztimer .circle_timer { display: flex; flex-direction: row; } .course_status .incourse .quiztimer .circle_timer > span { display: flex; justify-content: center; flex-direction: column; } .course_status .incourse .quiztimer .circle_timer .react-progress-circle { display: flex; } .course_status .incourse .quiztimer .timer_amount, .course_status .incourse .quiztimer .timer_unit { color: var(--bold); line-height: 1em; display: grid; grid-template-columns: 1fr 5px 1fr; justify-items: center; } .course_status .incourse .quiztimer .timer_amount span:nth-child(n+4), .course_status .incourse .quiztimer .timer_amount span:nth-child(n+4), .course_status .incourse .quiztimer .timer_unit span:nth-child(n+4), .course_status .incourse .quiztimer .timer_unit span:nth-child(n+4) { display: none; } .course_status .incourse .quiztimer .timer_amount { font-size: 2rem; } .course_status .incourse .quiztimer .timer_amount span { margin: 0 5px; } .course_status .incourse .quiztimer .timer_unit { font-size: 11px; } .course_status .incourse .fillblank_area { clear: none; display: inline-block; } .course_status .incourse span.select_question_content { display: inline-block; } .course_status .incourse .question_content select { margin: 0 5px; } .course_status .incourse .droppable > div { border: 1px solid var(--border); padding: 1rem; cursor: move; } .course_status .incourse .droppable:hover > div { border-color: var(--primary); } .course_status .incourse .droppable.active { overflow-y: scroll; } .course_status .incourse .question .droppable, .course_status .incourse .match_options { touch-action: none; } .course_status .incourse .droppable > div + div { border-top: none; } .course_status .incourse .droppable .dragging { border: 1px solid #f5d01a; box-shadow: 0 0 6px #efc600; } .course_status .incourse .quiz_questions_content .question_actions { margin-top: 1rem; display: flex; flex-direction: row; flex-wrap: wrap; justify-content: space-between; align-items: center; font-size: 1.5rem; } .course_status .incourse .quiz_questions_content .question_actions span.button { cursor: pointer; padding: 0.2rem; font-size: 1.2rem; margin: 0; } .course_status .incourse .quiz_questions_content .question_actions > div { display: flex; flex-direction: row; } .course_status .incourse .quiz_questions_content .question_actions > div span { margin: 0 0.2rem; z-index: 11; } .course_status .incourse .quiz_questions_content .question_actions > div span:not(.marks) { cursor: pointer; } .course_status .incourse .quiz_questions_content .question .marks i.icon-check-5:before { content: "e63a"; font-family: vicon; font-weight: 400 !important; font-variant: normal !important; text-transform: none !important; speak: none; line-height: 1; margin: 5px; } .course_status .incourse .question .question_option p { display: inline-block; } .course_status .incourse .question_option { display: block; margin-bottom: 1rem; } .course_status .incourse .question_option label { margin-bottom: 0; } .course_status .incourse .question_option.radio + .radio { margin-left: 0; } .course_status .incourse .match_playground { display: grid; grid-template-columns: 1fr 1fr; justify-content: center; align-items: stretch; grid-gap: 1rem; margin: 1rem 0; } .course_status .incourse .match_playground .droppable { border: 1px solid rgba(0, 0, 0, 0.2); } .course_status .incourse .match_playground .match_options .match_option { border: 1px solid rgba(0, 0, 0, 0.08); padding: 2rem; } .course_status .incourse .match_playground .droppable { display: grid; grid-template-columns: 1fr; grid-gap: 10px; padding: 30px; justify-content: center; align-items: center; } .course_status .incourse .match_playground .droppable > div { border-top: 1px solid var(--border); } .course_status .incourse .match_playground .match_option { background: var(--border); } .course_status .incourse .match_playground .match_option .children > div { border: 1px solid var(--border); padding: 1rem; background: var(--highlight); } .course_status .incourse .quiz_questions_content { flex: 3 0 480px; max-width: 100%; } .course_status .incourse .quiz_questions_content .question_content { padding: 1rem 0; border-top: none; } .course_status .incourse .quiz_questions_content .question { position: relative; border-bottom: 1px solid rgba(0,0,0,0.1); } .course_status .incourse .quiz_questions_content .question .question_hint { cursor: pointer; margin-right: 5px; } .course_status .incourse .quiz_questions_content .question .question_hint:before { content: "e718"; font-family: vicon; font-size: 22px; } .course_status .incourse .quiz_questions_content .question .question_hint.show:before { content: "e646"; } .course_status .incourse .quiz_questions_content .question .question_hint span.question_hint_content { transform: scale(0); padding: 1rem; background: var(--sidebar); border-radius: 5px; margin: 1rem 0; opacity: 0; transition: 0.2s all; } .course_status .incourse .quiz_questions_content .question .question_hint span.question_hint_content.show { transform: scale(1); opacity: 1; } .course_status .incourse .quiz_questions_content .question .explanation { /* padding: 1rem; */ /* font-size: 1.2rem; */ border: 1px solid var(--border); background: var(--highlight); z-index: 99; position: relative; margin: 1rem 0; } .course_status .incourse .quiz_questions_content .question_wrapper.loaded .result { transform: translate(0, -24px) scale(0.75); } .course_status .incourse div.sort_options { touch-action: none; } .course_status .incourse .single-quiz .question .question_content:first-child { border-top: none; } .course_status .incourse .quiz_questions li > strong { display: block; margin: 5px 0; } .course_status .incourse .incoursequiz_details { display: flex; flex: 1 0 240px !important; max-width: 100%; flex-direction: column; justify-content: space-between; align-items: baseline; align-items: center; margin-bottom: 1.5rem; flex: 1; z-index: 999; padding: 0.5rem; position: sticky; top: 3rem; background: var(--highlight); bordeR: 1px solid var(--border); border-radius: 5px; align-items: center; transition: 0.5s all; margin: 1rem 0; } .course_status .incourse .incoursequiz_details > div { display: flex; flex-wrap: wrap; justify-content: space-between; margin: 0 -0.5rem; align-items: center; width: 100%; } .course_status .incourse .incoursequiz_details > div > * { margin: 0.5rem; } .course_status .incourse .incoursequiz_details > div strong { flex: 1; } .course_status .incourse .incoursequiz_details > div strong .student_score { font-size: 1.8rem; } .course_status .incourse .incoursequiz_details > div strong .student_quiz_status { opacity: 0.7; font-size: 75%; margin: 0 0.75rem; } .course_status .incourse .incoursequiz_details > div .show_questions { display: flex; align-items: center; } .course_status .incourse .incoursequiz_details > div .show_questions > span:not(.vicon) { font-size: 11px; opacity: 0.5; text-transform: uppercase; } .course_status .incourse .incoursequiz_details .incourse_quiz_button > a { flex: 1; margin: 0 1rem; } .course_status .incourse .incoursequiz_details .quiz_timeline { min-width: 160px; margin: 0; padding: 0; max-height: none; overflow: hidden; } .course_status .incourse .incoursequiz_details .quiz_timeline li.done > span { display: flex; align-items: center; flex-direction: row-reverse; } .course_status .incourse .incoursequiz_details .quiz_timeline li.done > span:before { position: relative; color: var(--primary); } .course_status .incourse .incoursequiz_details .quiz_timeline li.done.active > span:before { color: var(--primarycolor); } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper { border: none; justify-content: center; align-items: center; display: flex; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul { display: flex; flex-wrap: wrap; margin: -0.25rem; font-size: 0.8rem; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li { margin: 0.25rem; padding: 5px; border-radius: 2px; border: none; display: flex; width: 32px; height: 24px; align-items: center; border: 1px solid var(--border); cursor: pointer; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li.bookmarked { box-shadow: 0 2px 2px var(--shadow); } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li.done { background: var(--border); } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li.done > span:before { content: "e64c"; font-family: vicon; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li.done.correct { color: #fff; background: rgba(0, 128, 0, 0.5); } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li.done.incorrect { color: #fff; background: rgba(255, 0, 0, 0.5); } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li.done.incorrect > span:before { content: "e646"; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li.active { background: var(--primary); color: var(--primarycolor); } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul li > span { position: relative; width: 100%; text-align: center; margin: 0; height: auto; background: none; border-radius: 0; bordeR: none; top: auto; left: auto; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul > span { display: flex; align-items: center; margin: 0 0.5rem; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper > ul > span > span:not(.vicon) { font-size: 11px; opacity: 0.5; text-transform: uppercase; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper.question_numbers ul > li { width: auto !important; white-space: nowrap; } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper.question_numbers ul > li:before { content: attr(data-number); } .course_status .incourse .incoursequiz_details .quiz_timeline .timeline_wrapper.question_numbers ul > li > span { padding: 0 5px; background: var(--border); margin: -2px -2px -2px 5px; border-radius: 2px; } .course_status .incourse span.question_hint_content { transform: scale(0); padding: 1rem; background: var(--sidebar); border-radius: 5px; margin: 1rem 0; opacity: 0; transition: 0.2s all; } .course_status .incourse span.question_hint_content.show { transform: scale(1); opacity: 1; } .course_status .incourse .question_option .radio > input[type=radio] + label, .course_status .incourse .question_option .checkbox > input[type=radio] + label { display: flex; align-items: center; } .course_status .incourse div#unit.quiz_title h1 { width: 50%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; } .course_status .incourse div#unit.quiz_title h5 { font-size: 14px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; } .course_status .incourse .loading_quiz.disabled { display: none; } .course_status .incourse .loading_quiz { position: fixed !important; width: 0%; height: 0%; left: 50%; top: 50%; z-index: 9999; } .course_status .incourse .question_correct { border: 2px solid rgba(0, 128, 0, 0.5) !important; padding: 5px; border-radius: 5px; } .course_status .incourse .question_incorrect { border: 2px solid rgba(255, 0, 0, 0.5) !important; padding: 5px; border-radius: 5px; } .course_status .incourse .quiz_questions_content { flex: 3 0 640px; max-width: 100%; } .course_status .incourse .quiz_questions_content .question_option.radio label > div, .course_status .incourse .quiz_questions_content .question_option.checkbox label > div { display: inline-block; } .course_status .incourse .quiz_questions_content .question_option.radio label > div > p, .course_status .incourse .quiz_questions_content .question_option.checkbox label > div > p { margin: 0; } .course_status .incourse .incourse_quiz_button { display: flex; flex-direction: column; justify-content: space-around; align-items: center; } .course_status .incourse .incourse_quiz_button a { text-align: center; width: 100%; margin: 0.25rem !important; } .course_status .incourse .quiz_retake { display: flex; align-items: center; flex-wrap: wrap; margin: 0 -0.25rem; } .course_status .incourse .quiz_retake > * { flex: 1 0 180px; margin: 0.25rem; } .course_status .incourse .confirmpopup_wrapper { position: fixed; top: 0; left: 0; height: 100vh; width: 100vw; background: rgba(0, 0, 0, 0.5); z-index: 99999; display: flex; flex-direction: column; align-items: center; justify-content: flex-start; } .course_status .incourse .confirmpopup_wrapper .confirmpopup_content { padding: 1rem; background: var(--highlight); border-radius: 5px; min-width: 50%; } .course_status .incourse span.question_stats_content_heading { margin-bottom: 1rem; display: inline-block; } .course_status .incourse span.question_stats_content_heading:not(:nth-child(1)) { margin-top: 1.5rem; } .course_status .incourse .question_stats_content .checked_answer span { text-transform: capitalize; } .course_status .incourse .question_stats_content { display: flex; flex-wrap: wrap; margin: 0 -5px; align-items: start; } .course_status .incourse .question_stats_content > * { margin: 5px; } .course_status .incourse .question_stats_content span { margin: 5px; } .course_status .incourse .question_stats_content .checked_answer { text-align: center; } .course_status .incourse .quiz_stats_chart { display: flex; flex-direction: row; flex-wrap: wrap; } .course_status .incourse .quiz_stats_chart .quiz_stats_chart_pie { flex: 1 0 240px; } .course_status .incourse .quiz_stats_chart .question_stats_content_wrapper { flex: 2 0 480px; } .course_content_content { display: inline-block; width: 100%; padding: 0.75rem 1rem 0; } .course_content_content h2 { font-size: 2.5rem; font-weight: 800; margin: 0 0 1.5rem !important; } .course_content_content .video_wrapper { z-index: 11; } .course_content_content .unit_attachments { background: var(--border); padding: 1rem; margin: 1rem 0; border-radius: 5px; display: flex; flex-direction: column; } .course_content_content .unit_attachments h3 { font-weight: 600; margin-bottom: 0.5rem; } .course_content_content .unit_attachments .attachment { width: 100%; display: flex; flex-direction: row; justify-content: space-between; align-items: center; margin: 0.5rem 0; } .course_content_content .unit_attachments .attachment > span { display: flex; align-items: center; margin: 0 -5px; } .course_content_content .unit_attachments .attachment > span span.attachment_icon > svg { width: 32px; fill: var(--text); color: var(--text); } .course_content_content .unit_attachments .attachment > span > * { margin: 0 5px; } .course_content_content .unit_assignments { background: var(--border); padding: 1rem; margin: 1rem 0; border-radius: 5px; display: flex; flex-direction: column; } .course_content_content .unit_assignments h3 { font-weight: 600; margin-bottom: 0.5rem; } .course_content_content .unit_assignments .assignment .assignment_heading { display: flex; justify-content: space-between; padding: 5px 0; } .course_content_content .pratice_questions { margin: 1rem 0; } .course_content_content .pratice_questions .incourse { margin: 1rem 0; background: var(--sidebar); padding: 1rem 1.5rem; border-radius: 8px; } .course_content_content .pratice_questions .incourse .quiz_questions_content { margin: 0; } .finish-course-content { display: flex; flex-direction: column; justify-content: center; text-align: center; padding-top: 60px; } .finish-course-content h1 { font-size: 3rem; } .finish-course-content h2 { font-size: 2.5rem; } .finish-course-content h3 { font-size: 1.8rem; } .finish-course-content .post_completion_message { flex: 1; max-height: calc(100vh - 550px); overflow-y: auto; min-height: 100px; } .finish-course-content .vibe_editor_rich_text { text-align: start; } .finish-course-content .completion_message { font-size: 1.2rem; margin: 1rem 0; } .finish-course-content .awards { display: flex; align-items: baseline; justify-content: center; margin: 1.5rem 0; } .finish-course-content .awards .certificate svg, .finish-course-content .awards .badge img { fill: var(--light); width: 64px; height: 64px; border-radius: 5px; } .finish-course-content .awards > * { margin: 1rem 0.5rem; display: flex; flex-direction: column; justify-content: center; align-items: center; background: #fafafa; padding: 1rem; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); border-radius: 5px; width: 128px; transition: all 0.2s; font-size: 1rem; font-weight: 600; } .finish-course-content .awards > *:hover { box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2); transform: translateY(-2px); } .finish-course-content .finished_percentage { display: flex; align-items: center; justify-content: center; margin: 0; position: absolute; top: -90px; right: calc(50% - 90px); } .finish-course-content .finished_percentage > span { width: 180px; height: 180px; font-weight: 800; display: flex; flex-direction: column; line-height: 0; align-items: center; justify-content: center; border-radius: 50%; font-size: 1.6rem; font-weight: 600; color: var(--primarycolor); background: var(--primary); box-shadow: 0 -1px 1rem var(--highlight); } .finish-course-content .finished_percentage > span:before { position: absolute; content: \'\'; width: 100%; height: 100%; border: 10px solid #fff; box-shadow: inset 0 1px 10px rgba(0, 0, 0, 0.4); border-radius: 50%; z-index: 0; } .finish-course-content .finished_percentage > span > span { line-height: 1; font-size: 11px; display: flex; flex-wrap: wrap; letter-spacing: 1px; position: relative; font-weight: 800; font-size: 11px; letter-spacing: 2px; } .finish-course-content .finished_percentage > span > span + span { width: 80%; } .finish-course-content .finished_percentage > span > span strong { font-size: 4rem; color: var(--primarycolor); margin-left: -0.5rem; } .finish-course-content .finished_percentage > span > span strong + span { font-size: 1rem; position: absolute; margin-top: 1rem; right: -1rem; top: 0; } .quiz_bar { background: var(--highlight); padding: 0.5rem; margin: 1rem 0; align-items: center; display: inline-block; width: 100%; } .quiz_pagination_wrapper .faded { opacity: 0.45; } .quiztimer { display: flex; justify-content: center; } .quiztimer .c100.big { font-size: 10rem; } .quiztimer .c100.big > span { font-size: 1.5rem; display: flex; flex-direction: column; line-height: 1.5; } .quiztimer .c100.big > span span.timer_amount, .quiztimer .c100.big > span span.timer_unit { display: flex; align-items: center; justify-content: center; } .quiztimer .c100.big > span span.timer_amount > span + span, .quiztimer .c100.big > span span.timer_unit > span + span { margin-left: 2px; } .quiztimer .c100.big > span > span.timer_unit { font-size: 0.7rem; opacity: 0.5; } .quiztimer .c100.big:after { border: 1px dashed rgba(0, 0, 0, 0.05); } .answers { margin: 0.5rem 0; }\n\t')))) : "",
            {
                createElement: pl,
                render: _l
            } = wp.element,
            wl = e => pl("div", {
                class: "lds-ellipsis"
            }, pl("div", null), pl("div", null), pl("div", null), pl("div", null)),
            {
                Component: vl,
                createElement: hl,
                render: fl,
                useState: gl,
                useEffect: yl,
                Fragment: bl
            } = wp.element,
            kl = e => {
                const [t, a] = gl(e.duration), [s, n] = gl({
                    d: 0,
                    h: 0,
                    m: 0,
                    s: 0
                });
                yl((() => {
                    e.start ? setTimeout((() => {
                        let s = t - 1;
                        s <= -1 ? e.update(e.quiz_id, "expired") : s >= 0 && (a(s), i())
                    }), 1e3) : (a(e.duration), i())
                }), [t, e.start, e.duration]);
                const i = () => {
                    let e = {
                            ...s
                        },
                        a = t;
                    a > 86400 ? (e.d = Math.floor(a / 86400), a -= 86400 * e.d) : e.d = 0, a > 3600 ? (e.h = Math.floor(a / 3600), a -= 3600 * e.h) : e.h = 0, a > 60 ? (e.m = Math.floor(a / 60), a -= 60 * e.m) : e.m = 0, e.s = a, n(e)
                };
                return hl("div", {
                    className: "driptimer_wrapper"
                }, hl("div", {
                    className: "driptimer"
                }, hl("span", {
                    className: "timer_amount"
                }, s.d ? hl(bl, null, hl("span", null, s.d), hl("span", null, ":")) : "", s.h ? hl(bl, null, hl("span", null, s.h), hl("span", null, ":")) : "", s.m ? hl(bl, null, hl("span", null, s.m), hl("span", null, ":")) : "", hl("span", null, s.s)), hl("span", {
                    className: "timer_unit"
                }, s.d ? hl(bl, null, hl("span", null, window.wplms_course_data.translations.days), hl("span", null)) : "", s.h ? hl(bl, null, hl("span", null, window.wplms_course_data.translations.hours), hl("span", null)) : "", s.m ? hl(bl, null, hl("span", null, window.wplms_course_data.translations.minutes), hl("span", null)) : "", hl("span", null, window.wplms_course_data.translations.seconds))))
            },
            {
                createElement: xl,
                render: Nl,
                useState: ql,
                useEffect: Ol,
                Fragment: Il
            } = wp.element,
            {
                dispatch: Cl,
                select: Sl
            } = wp.data,
            {
                createElement: Pl,
                useState: El,
                useEffect: zl,
                Fragment: Tl,
                render: Ll
            } = wp.element,
            {
                dispatch: Ml,
                select: $l
            } = wp.data,
            jl = e => {
                const [t, a] = El({});
                return zl((() => {
                    let t = "",
                        s = "";
                    switch (e.type) {
                        case "friends":
                            s = "user", t = e.id.item_id;
                            break;
                        case "forum":
                            s = "forum", t = e.id.item_id;
                            break;
                        case "group":
                            s = "group", t = e.id.item_id;
                            break;
                        case "activity":
                            s = "user", t = e.id.secondary_item_id;
                            break;
                        case "member":
                        case "name":
                        case "user_tip":
                        case "user":
                            s = "user", t = e.id.user_id;
                            break;
                        default:
                            s = e.type, t = e.id.item_id
                    }
                    s || (s = "user");
                    let n = $l("vibebp").getData(s + "_" + t);
                    n ? a(n) : localforage.getItem(s + "_" + t).then((n => {
                        null !== n ? (a(JSON.parse(n)), Ml("vibebp").setData(s + "_" + t, JSON.parse(n))) : fetch(`${window.vibebp.api.url}/avatar?id=${s+"_"+t}&client_id=${window.vibebp.settings.client_id}`, {
                            method: "post",
                            body: JSON.stringify({
                                type: e.type,
                                ids: e.id,
                                token: $l("vibebp").getToken()
                            })
                        }).then((e => e.json())).then((e => {
                            e.hasOwnProperty("avatar") && (Ml("vibebp").setData(s + "_" + t, e), localforage.setItem(s + "_" + t, JSON.stringify(e)), a(e))
                        }))
                    }))
                }), [e.id.item_id, e.id.user_id]), t.hasOwnProperty("avatar") || t.hasOwnProperty("name") ? "member" == e.type ? React.createElement("span", {
                    className: "vibebp_member"
                }, React.createElement("img", {
                    src: t.avatar,
                    className: "vibebp_avatar",
                    onClick: e.click,
                    alt: t.name,
                    title: t.name
                }), React.createElement("span", null, t.name)) : "group" == e.type ? React.createElement("span", {
                    className: "vibebp_group"
                }, React.createElement("img", {
                    src: t.avatar,
                    className: "vibebp_avatar",
                    onClick: e.click,
                    alt: t.name,
                    title: t.name
                }), React.createElement("span", null, t.name)) : "user_tip" == e.type ? React.createElement("span", {
                    className: "vibebp_member tip",
                    title: t.name
                }, React.createElement("img", {
                    src: t.avatar,
                    className: "vibebp_avatar",
                    onClick: e.click,
                    alt: t.name,
                    title: t.name
                })) : "name" == e.type || "forum" == e.type ? React.createElement("span", null, t.name) : React.createElement("img", {
                    src: t.avatar,
                    className: "vibebp_avatar",
                    onClick: e.click,
                    alt: t.name,
                    title: t.name
                }) : ""
            },
            Al = e => {
                const [t, a] = El(!0), [s, n] = El(null);
                return zl((() => {
                    a(!0);
                    let t = [];
                    s && s.abort();
                    let i = {},
                        o = new AbortController;
                    s && (i = {
                        signal: o.signal
                    }), n(o), e.hasOwnProperty("avatars") && (t = e.avatars);
                    let r = "user";
                    if (e.hasOwnProperty("type") && (r = e.type), e.hasOwnProperty("user_ids")) {
                        let a = e.user_ids;
                        Array.isArray(e.user_ids) || (a = Object.values(e.user_ids)), a.map((e => {
                            Array.isArray(e) ? e.map((e => {
                                -1 == t.findIndex((t => t.id.user_id == e)) && t.push({
                                    type: r,
                                    id: {
                                        user_id: e
                                    }
                                })
                            })) : -1 == t.findIndex((t => t.id.user_id == e)) && t.push({
                                type: r,
                                id: {
                                    user_id: e
                                }
                            })
                        }))
                    }
                    let l = [],
                        d = [];
                    t.map(((e, t) => {
                        let a = "",
                            s = "";
                        switch (e.type) {
                            case "friends":
                                s = "user", a = e.id.item_id;
                                break;
                            case "forum":
                                s = "forum", a = e.id.item_id;
                                break;
                            case "group":
                                s = "group", a = e.id.item_id;
                                break;
                            case "activity":
                                s = "user", a = e.id.secondary_item_id;
                                break;
                            case "member":
                            case "name":
                            case "user_tip":
                            case "user":
                                s = "user", a = e.id.user_id;
                                break;
                            default:
                                s = e.type, a = e.id.item_id
                        }
                        let n = $l("vibebp").getData(s + "_" + a);
                        n && void 0 !== n || d.push(localforage.getItem(s + "_" + a).then((e => {
                            e ? Ml("vibebp").setData(s + "_" + a, JSON.parse(e)) : l.push({
                                type: s,
                                key: a
                            })
                        })))
                    })), d.length ? Promise.all(d).then((() => {
                        l.length ? fetch(`${window.vibebp.api.url}/avatars?ids=${JSON.stringify(l)}&client_id=${window.vibebp.settings.client_id}`, {
                            ...i,
                            method: "post",
                            body: JSON.stringify({
                                ids: l,
                                type: r,
                                token: $l("vibebp").getToken()
                            })
                        }).then((e => e.json())).then((e => {
                            let t = [];
                            e.status && e.values.map((e => {
                                Ml("vibebp").setData(e.type + "_" + e.key, e.value), t.push(localforage.setItem(e.type + "_" + e.key, JSON.stringify(e.value)))
                            })), t.length ? Promise.all(t).then((() => {
                                a(!1)
                            })) : a(!1)
                        })) : a(!1)
                    })) : a(!1)
                }), [e.user_ids, e.type]), React.createElement(Tl, null, t ? "" : e.children)
            },
            {
                createElement: Dl,
                render: Hl,
                useState: Ul,
                useEffect: Fl,
                Fragment: Jl,
                useRef: Rl
            } = wp.element,
            Bl = e => {
                const [t, a] = Ul(e.leaderboardData), [s, n] = Ul(e.quiz), i = function(e) {
                    const t = Rl();
                    return Fl((() => {
                        t.current = e
                    }), [e]), t.current
                }(t);
                Fl((() => {
                    let t = [...e.leaderboardData];
                    t.sort(((e, t) => parseFloat(t.marks) - parseFloat(e.marks))), a(t)
                }), [e.leaderboardData]), Fl((() => {
                    n(e.quiz)
                }), [e.quiz]);
                let o = [];
                return t && t.length && i && i.length && t.map(((e, t) => {
                    let a = i.findIndex((t => t.id === e.id));
                    o[t] = t > a ? "down vicon vicon-arrow-down" : t === a ? "" : "up vicon vicon-arrow-up"
                })), Dl("div", {
                    className: "live_contest_quiz_leaderboard"
                }, Dl("strong", null, window.wplms_course_data.translations.leaderboard), t.length ? Dl("div", {
                    className: "live-leaderboard-list"
                }, Dl("div", {
                    className: "contest_user contest_table_head"
                }, Dl("span", null), Dl("span", null), Dl("span", null, window.wplms_course_data.translations.marks), Dl("span", null, window.wplms_course_data.translations.attempted)), t.map(((e, t) => Dl("div", {
                    className: "contest_user"
                }, Dl("span", null, t + 1), Dl("span", {
                    className: "member_info"
                }, Dl(jl, {
                    type: "member",
                    id: {
                        user_id: e.id
                    }
                }), Dl("span", {
                    className: o[t]
                })), Dl("span", null, " ", e.marks, "/", s.meta.max), Dl("span", null, " ", e.attempted, "/", s.meta.questions.length))))) : Dl("div", {
                    className: "vbp_message message"
                }, window.wplms_course_data.translations.members_not_found))
            },
            {
                createElement: Vl,
                render: Xl,
                useState: Wl,
                useEffect: Yl,
                useCallback: Ql,
                useRef: Kl,
                Fragment: Gl,
                useLayoutEffect: Zl
            } = wp.element,
            {
                dispatch: ed,
                select: td
            } = wp.data;

        function ad(e) {
            if (null == e) return !0;
            if ("number" == typeof e) return !1;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }

        function sd(e) {
            if (null == e) return !0;
            if ("number" == typeof e) return !0;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }

        function nd(e) {
            try {
                JSON.parse(e)
            } catch (e) {
                return !1
            }
            return !0
        }
        const id = e => {
            const [t, a] = Wl({}), [s, n] = Wl("quiz"), [i, o] = Wl([]), r = Kl(null), [l, d] = Wl({}), [c, u] = Wl("up"), [m, p] = Wl(!1), [_, w] = Wl(!1), [v, h] = Wl(!1), [f, g] = Wl(!0), [y, b] = Wl(null), [k, x] = Wl(null), [N, q] = Wl([]), [O, I] = Wl([]), [C, S] = Wl(!1), [P, E] = Wl(""), [z, T] = Wl(td("vibebp").getUser()), [L, M] = Wl([]);
            Yl((() => {
                let t = td("vibebp").getToken();
                sd(t) ? localforage.getItem("bp_login_token").then((e => {
                    t = e, $(t), b(t)
                })) : ($(t), b(t)), document.addEventListener("wplms_answer_question_type", (({
                    detail: e
                }) => {
                    j(e.question, e.index, "changed")
                })), localforage.getItem("bookmarked_questions_" + e.quizid).then((e => {
                    e && e.length && q(JSON.parse(e))
                }))
            }), [e.quizid]), Yl((() => {
                e && e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz && !y && t.hasOwnProperty("id") && (localStorage.setItem("vibequiz_" + t.id, JSON.stringify(t)), document.querySelector(".start_quiz_button") && document.querySelector(".start_quiz_button").remove()), document.dispatchEvent(new Event("VibeBP_Editor_Content"))
            }), [t]);
            const $ = (t = null, s = null) => {
                    t || (t = y), n("quiz");
                    let i = {
                        token: t
                    };
                    if (e.hasOwnProperty("activity") && e.activity && (i.activity = e.activity), e.hasOwnProperty("course") && e.course && (i.course = e.course), e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz && !t) {
                        let s = localStorage.getItem("vibequiz_" + e.quizid),
                            i = "";
                        if (void 0 !== s && s) {
                            if (i = JSON.parse(s), i) {
                                if (x(null), i.hasOwnProperty("drip_message")) a(i);
                                else if (i.meta && i.meta.questions) {
                                    let s = 0,
                                        n = 0;
                                    if ("object" == typeof i.meta.questions && !Array.isArray(i.meta.questions)) {
                                        let e = [];
                                        Object.keys(i.meta.questions).map((t => {
                                            "object" == typeof i.meta.questions[t] && (i.meta.questions[t].id = t, e.push(i.meta.questions[t]), e.id = t)
                                        })), i.meta.questions = e
                                    }
                                    i.meta.questions.map(((e, t) => {
                                        if (e.raw) i.meta.questions[t] = e.raw;
                                        else {
                                            i.meta.questions[t].show = !1;
                                            let a = localStorage.getItem(e.id);
                                            !ad(a) && sd(e.marked_answer) && (nd(a) ? i.meta.questions[t].marked_answer = JSON.parse(a) : i.meta.questions[t].marked_answer = a)
                                        }
                                        s += parseFloat(e.user_marks), n += parseInt(e.marks)
                                    })), Number.isInteger(s) || (s = s.toFixed(2)), i.marks = s, i.max_marks = n, i.question_number = parseInt(i.question_number);
                                    let r = [];
                                    if (i.question_number && i.question_number > 0)
                                        for (let e = 0; e < i.question_number; e++) r.push(e);
                                    if (o(r), e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz && !t) {
                                        let t = localStorage.getItem("quiz_expiry_" + e.quizid);
                                        if (void 0 !== t && t) {
                                            let e = Math.floor((new Date).getTime() / 1e3);
                                            e >= parseInt(t) ? H(i) : i.remaining = parseInt(t) - e
                                        }
                                        let a = localStorage.getItem("quiz_retakes_" + e.quizid);
                                        if (a && (a = parseInt(a), i.hasOwnProperty("meta") || (i.meta = {}), i.meta.hasOwnProperty("retakes"))) {
                                            let e = parseInt(i.meta.retakes) - a;
                                            e < -1 && (e = 0), i.meta.retakes = e
                                        }
                                    }
                                    a(i)
                                }
                                var r = document.createEvent("Event");
                                r.initEvent("unit_traverse", !1, !0), document.querySelector(".unit_content") && document.querySelector(".unit_content") && document.querySelector(".unit_content").dispatchEvent(r)
                            } else console.log(i);
                            return void n(!1)
                        }
                    }
                    let l = window.wplms_course_data.api_url + "/user/quiz/" + e.quizid;
                    e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz && !t && (l = window.wplms_course_data.api_url + "/quiz/nonloggedin/" + e.quizid + "?client_id=" + window.wplms_course_data.client_id), e.hasOwnProperty("force") && e.force && (l.includes("?client_id") ? l += "&force" : l += "?force"), s && !l.includes("force") && (l.includes("?") ? l += "&force" : l += "?force"), i.hasOwnProperty("activity") && i.activity && (/\?/.test(l) ? l += "&activity=" + i.activity : l += "?activity=" + i.activity), fetch(l, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify(i)
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((s => {
                        if (s) {
                            if (x(null), s.hasOwnProperty("drip_message")) a(s);
                            else if (s.meta && s.meta.questions) {
                                let t = 0,
                                    n = 0;
                                if ("object" == typeof s.meta.questions && !Array.isArray(s.meta.questions)) {
                                    let e = [];
                                    Object.keys(s.meta.questions).map((t => {
                                        "object" == typeof s.meta.questions[t] && (s.meta.questions[t].id = t, e.push(s.meta.questions[t]), e.id = t)
                                    })), s.meta.questions = e
                                }
                                s.meta.questions.map(((e, a) => {
                                    if (e.raw) s.meta.questions[a] = e.raw;
                                    else {
                                        s.meta.questions[a].show = !1;
                                        let t = localStorage.getItem(e.id);
                                        !ad(t) && sd(e.marked_answer) && (nd(t) ? s.meta.questions[a].marked_answer = JSON.parse(t) : s.meta.questions[a].marked_answer = t);
                                        try {
                                            JSON.parse(e.correct), e.attempted && (s.meta.questions[a].correct = JSON.parse(nr.AES.decrypt(e.correct, e.key, {
                                                format: ir
                                            }).toString(nr.enc.Utf8)), s.meta.questions[a].correct = or(e))
                                        } catch (e) {
                                            console.log(e)
                                        }
                                    }
                                    t += parseFloat(e.marks), n += parseInt(e.max_marks)
                                })), Number.isInteger(t) || (t = t.toFixed(2)), isNaN(n) || (s.marks = t, s.max_marks = n), s.question_number = parseInt(s.question_number);
                                let i = [];
                                if (s.question_number && s.question_number > 0)
                                    for (let e = 0; e < s.question_number; e++) i.push(e);
                                o(i);
                                let r = Math.floor((new Date).getTime() / 1e3);
                                s.hasOwnProperty("expiry") && s.expiry > 0 && (s.expiry > r ? s.remaining = parseInt(s.expiry) - r : s.remaining = 0);
                                let l = localStorage.getItem("quiz_retakes_" + e.quizid);
                                if (l && (l = parseInt(l), s.hasOwnProperty("meta") || (s.meta = {}), s.meta.hasOwnProperty("retakes"))) {
                                    let e = parseInt(s.meta.retakes) - l;
                                    e < -1 && (e = 0), s.meta.retakes = e
                                }
                                a(s)
                            }
                            s.remaining && s.remaining <= 0 && H(s, t);
                            var i = document.createEvent("Event");
                            i.initEvent("unit_traverse", !1, !0), document.querySelector(".unit_content") && document.querySelector(".unit_content") && document.querySelector(".unit_content").dispatchEvent(i);
                            let n = {
                                ...s
                            };
                            "live_contest" == n.quiz_type && firebase && (firebase.database().ref(`quizes/${n.id}/users`).once("value", (e => {
                                M((t => {
                                    let a = [...t];
                                    return e.forEach((e => {
                                        let t = e.val();
                                        t && -1 == a.findIndex((t => t.id == e.key)) && a.push({
                                            ...t,
                                            id: e.key
                                        })
                                    })), a
                                }))
                            })), firebase.database().ref(`quizes/${n.id}/users`).on("child_changed", (e => {
                                M((t => {
                                    let a = [...t],
                                        s = a.findIndex((t => t.id == e.key));
                                    return s > -1 && a.splice(s, 1, {
                                        ...e.val(),
                                        id: e.key
                                    }), a
                                }))
                            })), firebase.database().ref(`quizes/${n.id}/users`).on("child_added", (e => {
                                M((t => {
                                    let a = [...t],
                                        s = a.findIndex((t => t.id == e.key));
                                    return s > -1 ? a.splice(s, 1, {
                                        ...e.val(),
                                        id: e.key
                                    }) : a.push({
                                        ...e.val(),
                                        id: e.key
                                    }), a
                                }))
                            })), firebase.database().ref(`quizes/${n.id}/users`).on("child_removed", (e => {
                                M((t => {
                                    let a = [...t],
                                        s = a.findIndex((t => t.id == e.key));
                                    return s > -1 && a.splice(s, 1), a
                                }))
                            })))
                        } else console.log(s);
                        n(!1)
                    })).catch((e => {
                        n(!1), console.error("Uh oh, an error!", e), ed("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                },
                j = (e, s, n) => {
                    if ("changed" == n) {
                        let n = {
                            ...t
                        };
                        n.meta.questions[s] = e, a(n), sd(e.marked_answer) ? null == e.marked_answer && localStorage.removeItem(e.id) : "object" == typeof e.marked_answer || Array.isArray(e.marked_answer) ? localStorage.setItem(e.id, JSON.stringify(e.marked_answer)) : localStorage.setItem(e.id, e.marked_answer)
                    }
                },
                A = (e, t) => {
                    "show" == t && o(e)
                },
                D = () => {
                    n("start");
                    let s = {
                        ...t
                    };
                    if (s.start = !0, s.remaining && s.remaining > 0) n(!1), a(s);
                    else {
                        let t = {
                            quiz_id: s.id,
                            token: y
                        };
                        if (e.hasOwnProperty("course") && (t.course = e.course), s.hasOwnProperty("non_logged_in_quiz") && s.non_logged_in_quiz && (!y || e.hasOwnProperty("exported") && e.exported)) return n(!1), localStorage.setItem("quiz_expiry_" + s.id, Math.floor((new Date).getTime() / 1e3) + s.meta.duration), a(s), void V(s);
                        fetch(window.wplms_course_data.api_url + "/user/quiz/start?post", {
                            method: "POST",
                            headers: window.vibebp.xnonce ? {
                                "X-WP-Nonce": window.vibebp.xnonce
                            } : {},
                            body: JSON.stringify(t)
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            n(!1), a(s), V(s);
                            let t = `${window.wplms_course_data.api_url}/student/quiz`;
                            R(t), e.hasOwnProperty("message") && ed("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            n(!1), console.error("Uh oh, an error!", e), ed("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                },
                H = (s = null, i = null) => {
                    q([]), localforage.removeItem("bookmarked_questions_" + e.quizid), s || (s = t), i || sd(y) || (i = y), localStorage.removeItem("quiz_expiry_" + s.id), n("submit");
                    let o = {
                            ...s
                        },
                        r = 0,
                        l = 0;
                    if (o.meta && o.meta.questions && o.meta.questions.length)
                        for (let e = 0; e < o.meta.questions.length; e++) o.meta.questions[e].attempted || (o.meta.questions[e] = lr(o.meta.questions[e], t.partial_marking, t.negative_marking, parseFloat(t.negative_marks), !1)), o.meta.questions[e].content = o.meta.questions[e].original_content, o.meta.questions[e].auto || (o.meta.questions[e].user_marks = 0), r += parseFloat(o.meta.questions[e].user_marks), l += parseInt(o.meta.questions[e].marks), localStorage.removeItem(o.meta.questions[e].id), localStorage.removeItem("question_start_time" + o.meta.questions[e].key);
                    if (o.marks = r.toFixed(2), o.max_marks = l, (isNaN(o.max_marks) || o.max_marks < 1) && (o.max_marks = 1), (isNaN(o.marks) || o.marks < 1) && (o.marks = 0), e.hasOwnProperty("update") && e.update("update_quiz_marks", {
                            user_marks: o.marks,
                            total_marks: o.max_marks
                        }), o.hasOwnProperty("remaining") && delete o.remaining, e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz) return o.submitted = !0, o.start = !1, a(o), void(e.hasOwnProperty("update") && e.update("quizsubmitted"));
                    fetch(window.wplms_course_data.api_url + "/user/submitresult?post", {
                        method: "POST",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            quiz_id: o.id,
                            course_id: o.hasOwnProperty("course_id") ? o.course_id : e.hasOwnProperty("course") ? e.course : "",
                            results: o.meta.questions,
                            quiz: o,
                            token: i
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        if (t) {
                            if (n(!1), o.submitted = !0, o.start = !1, t.check_results_url && (o.check_results_url = t.check_results_url), t.hasOwnProperty("retakes") && void 0 !== t.retakes && (o.hasOwnProperty("meta") && void 0 !== o.meta || (o.meta = {}), o.meta.retakes = t.retakes), t.completion_message && (o.meta.completion_message = t.completion_message), t.retake_html && (o.retake_html = t.retake_html), o.meta && o.meta.questions && o.meta.questions.length && !sd(t.correct_data))
                                for (let e = 0; e < o.meta.questions.length; e++) t.correct_data.hasOwnProperty(o.meta.questions[e].id) && (o.meta.questions[e].correct_data = t.correct_data[o.meta.questions[e].id]);
                            t.hasOwnProperty("tags_data") && (o.tags_data = t.tags_data), a(o);
                            var s = document.createEvent("Event");
                            if (s.initEvent("unit_traverse", !1, !0), o.hasOwnProperty("quiz_passing_score") && o.quiz_passing_score ? t.hasOwnProperty("continue") && t.continue && e.hasOwnProperty("update") && e.update("quizsubmitted") : e.hasOwnProperty("update") && e.update("quizsubmitted"), document.querySelector(".unit_content") && document.querySelector(".unit_content")) {
                                document.querySelector(".unit_content").dispatchEvent(s);
                                var i = new CustomEvent("react_quiz_submitted", {
                                    detail: {
                                        next_unit: t.next_unit
                                    }
                                });
                                document.dispatchEvent(i)
                            }
                        }
                        B(o);
                        let r = window.wplms_course_data.api_url + "/user/quiz/previousresults/" + e.quizid;
                        R(r, !0);
                        let l = `${window.wplms_course_data.api_url}/student/quiz`;
                        R(l);
                        let d = `${window.wplms_course_data.api_url}/instructor/stats/${e.quizid}`;
                        R(d);
                        let c = `${window.wplms_course_data.api_url}/instructor/leaderboard/${e.quizid}`;
                        R(c), t.hasOwnProperty("message") && ed("vibebp").addNotification({
                            text: t.message
                        })
                    })).catch((e => {
                        n(!1), console.error("Uh oh, an error!", e), ed("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                },
                U = (e, a) => {
                    let s = -1;
                    switch (t && t.hasOwnProperty("meta") && t.meta && t.meta.hasOwnProperty("questions") && (s = t.meta.questions.findIndex((t => e.hasOwnProperty("key") && t.key === e.key)), s < 0 && (s = a)), e.type) {
                        case "smalltext":
                            return Vl(Hi, {
                                question: e,
                                index: s,
                                update: j
                            });
                        case "single":
                            return Vl(Vi, {
                                question: e,
                                index: s,
                                update: j,
                                quiz_id: t.id
                            });
                        case "select":
                            return Vl(Gi, {
                                question: e,
                                index: s,
                                update: j,
                                quiz_id: t.id
                            });
                        case "multiple":
                            return Vl(no, {
                                question: e,
                                index: s,
                                update: j,
                                quiz_id: t.id
                            });
                        case "fillblank":
                            return Vl(ho, {
                                question: e,
                                index: s,
                                update: j,
                                quiz_id: t.id
                            });
                        case "sort":
                            return Vl(So, {
                                question: e,
                                index: s,
                                update: j,
                                quiz_id: t.id
                            });
                        case "match":
                            return Vl(Fo, {
                                question: e,
                                index: s,
                                update: j,
                                quiz_id: t.id
                            });
                        case "truefalse":
                            return Vl(Wo, {
                                question: e,
                                index: s,
                                update: j,
                                quiz_id: t.id
                            });
                        case "largetext":
                            return Vl(er, {
                                question: e,
                                index: s,
                                update: j,
                                quiz_id: t.id
                            });
                        default:
                            let a = 1e3 * Math.random();
                            return document.dispatchEvent(new CustomEvent("wplms_load_question_type", {
                                detail: {
                                    question: e,
                                    update: j,
                                    quiz_id: t.id,
                                    index: s,
                                    keyref: a
                                }
                            })), Vl("div", {
                                "data-q": e.id,
                                className: e.type,
                                "data-keyref": a
                            })
                    }
                },
                F = (e, a) => {
                    if ("trigger" == a) switch (e) {
                        case "submit":
                            H(t), w(!1), h(!1);
                            break;
                        case "start":
                            D(), p(!1)
                    }
                    if ("nottrigger" == a) switch (e) {
                        case "submit":
                            w(!1), h(!1);
                            break;
                        case "start":
                            p(!1)
                    }
                },
                J = (e, s) => {
                    var n, i;
                    if ("expired" == s && e.hasOwnProperty("id") && null != t && null !== (n = t.meta) && void 0 !== n && null !== (i = n.questions) && void 0 !== i && i.length) {
                        let s = {
                                ...t
                            },
                            n = s.meta.questions.findIndex((t => t.key === e.key));
                        n > -1 && (s.meta.questions[n].expired = !0, a(s))
                    }
                },
                R = (e, t = null, a = null) => a && !navigator.onLine ? new Promise(((e, t) => {
                    t(0)
                })) : "undefined" != typeof localforage && window.vibebp.api.sw_enabled && navigator.onLine ? t ? localforage.removeItem(e) : localforage.iterate((function(t, a, s) {
                    e.length && a.length && a.includes(e) && localforage.removeItem(a)
                })) : new Promise((e => {
                    e(1)
                })),
                B = t => {
                    let a = window.wplms_course_data.api_url + "/user/quiz/" + e.quizid;
                    e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz && !y && (a = window.wplms_course_data.api_url + "/quiz/nonloggedin/" + e.quizid + "?client_id=" + window.wplms_course_data.client_id), "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(a).then((e => {
                        e && e.length && (e = JSON.parse(e)).hasOwnProperty("meta") && (e = t, localforage.setItem(a, JSON.stringify(e)))
                    }))
                },
                V = a => {
                    let s = window.wplms_course_data.api_url + "/user/quiz/" + e.quizid;
                    e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz && !y && (s = window.wplms_course_data.api_url + "/quiz/nonloggedin/" + e.quizid + "?client_id=" + window.wplms_course_data.client_id), "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(s).then((e => {
                        e && e.length && (e = JSON.parse(e)).hasOwnProperty("meta") && (a.expiry = Math.round((new Date).getTime() / 1e3) + parseInt(t.meta.duration), e = a, localforage.setItem(s, JSON.stringify(e)))
                    }))
                };
            let X = 0;
            t.meta && t.meta.duration && (X = t.meta.duration), t && t.remaining && t.remaining > 0 && (X = t.remaining), t.hasOwnProperty("end_time") && parseInt(t.end_time) && parseInt(t.end_time) > (new Date).getTime() && (parseInt(t.end_time) - (new Date).getTime()) / 1e3 < X && (X = Math.floor((parseInt(t.end_time) - (new Date).getTime()) / 1e3));
            let W = "",
                Y = "loading_quiz";
            s || (W = "disabled", Y += " disabled");
            let Q = window.wplms_course_data.translations.submit_quiz_confirm;
            if (t.meta && t.meta.questions) {
                let e = 1;
                t.meta.questions.map((function(t) {
                    t.marked_answer || (e = 0)
                })), e || (Q = window.wplms_course_data.translations.unanswered_confirm + Q)
            }
            let K = [];
            if (t.hasOwnProperty("meta") && t.meta.hasOwnProperty("questions") && t.meta.questions && t.meta.questions.length && (K = [...t.meta.questions]), K.length && null !== k) switch (k) {
                case "wrong":
                    K = K.filter((e => !e.hasOwnProperty("user_marks") || !e.user_marks || parseFloat(e.user_marks) <= 0));
                    break;
                case "correct":
                    K = K.filter((e => e.hasOwnProperty("user_marks") && e.user_marks && parseFloat(e.user_marks) > 0));
                    break;
                case "bookmarked":
                    K = K.filter((e => N.indexOf(e.id) > -1))
            }
            return "quiz" !== s ? t && t.hasOwnProperty("drip_message") ? Vl(Gl, null, t && t.hasOwnProperty("drip_time") ? Vl(kl, {
                start: !0,
                duration: t.drip_time,
                update: (e, t) => {
                    "expired" == t && $(null, !0)
                },
                quiz_id: t.id
            }) : "", Vl("div", {
                className: "quiz_content",
                dangerouslySetInnerHTML: {
                    __html: t && t.hasOwnProperty("drip_message") ? t.drip_message : ""
                }
            })) : Vl(Gl, null, Vl(Br, {
                active: _,
                update: F,
                type: "submit",
                content: Q,
                yes: window.wplms_course_data.translations.yes,
                no: window.wplms_course_data.translations.no,
                yesfunction: "submitQuiz"
            }), ReactDOM.createPortal(Vl(Br, {
                active: v,
                update: F,
                type: "submit",
                content: window.wplms_course_data.translations.bookmark_confirm,
                yes: window.wplms_course_data.translations.yes,
                no: window.wplms_course_data.translations.no,
                yesfunction: "submitQuiz"
            }), document.querySelector("#quiz_popup")), C ? ReactDOM.createPortal(Vl("div", {
                className: "confirmpopup_wrapper"
            }, Vl("div", {
                className: "confirmpopup_content"
            }, Vl("textarea", {
                value: C.flagged_feedback,
                onChange: e => {
                    let s = {
                            ...t
                        },
                        n = s.meta.questions.findIndex((e => parseInt(C.id) === parseInt(e.id)));
                    if (n > -1) {
                        s.meta.questions[n].flagged_feedback = e.target.value, a(s);
                        let t = {
                            ...C
                        };
                        t.flagged_feedback = s.meta.questions[n].flagged_feedback, S(t)
                    }
                }
            }), Vl("div", {
                className: "buttons_wrapper"
            }, Vl("span", {
                className: O.indexOf(C.id) > -1 ? "button is-loading" : C.flagged ? "button flagged" : "button flag",
                onClick: e => {
                    (() => {
                        let e = C,
                            s = t.meta.questions.findIndex((e => parseInt(C.id) === parseInt(e.id)));
                        if (s > -1) {
                            if (sd(e.flagged_feedback)) return ed("vibebp").addNotification({
                                text: window.wplms_course_data.translations.add_feedback_to_flag
                            }), !1;
                            let n = [...O];
                            n.indexOf(e.id) <= -1 && n.push(e.id), I(n), fetch(window.wplms_course_data.api_url + "/user/question/flag/" + e.id + "?post", {
                                method: "post",
                                headers: window.vibebp.xnonce ? {
                                    "X-WP-Nonce": window.vibebp.xnonce
                                } : {},
                                body: JSON.stringify({
                                    token: y,
                                    flagged: !0,
                                    feedback: e.flagged_feedback
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((i => {
                                if (i) {
                                    if (i.status) {
                                        let i = n.indexOf(e.id);
                                        i > -1 && (n.splice(i, 1), I(n));
                                        let o = {
                                            ...t
                                        };
                                        o.meta.questions[s].flagged = !0, a(o), E(""), S(!1)
                                    }
                                    i.message && ed("vibebp").addNotification({
                                        icon: "",
                                        text: i.message
                                    })
                                }
                            })).catch((e => {
                                console.error("Uh oh, an error!", e), ed("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    })()
                }
            }, window.wplms_course_data.translations.submit_feedback), Vl("span", {
                className: "button",
                onClick: e => {
                    S(!1)
                }
            }, window.wplms_course_data.translations.cancel)))), document.querySelector("#quiz_popup")) : "", Vl(Br, {
                active: m,
                update: F,
                type: "start",
                content: window.wplms_course_data.translations.start_quiz_confirm,
                yes: window.wplms_course_data.translations.yes,
                no: window.wplms_course_data.translations.no,
                yesfunction: "startQuiz"
            }), Vl("div", {
                className: "incourse " + (L.length ? "leaderboard_contest" : "")
            }, Vl("div", {
                className: Y
            }, Vl("div", {
                id: "ajaxloader",
                className: W
            })), e.hasOwnProperty("activity") ? t.submitted ? Vl("h3", null, Vl("span", {
                className: "student_score"
            }, t.meta.auto ? t.marks + "/" + t.max_marks : ""), t.quiz_passing_score ? Vl("span", null, t.marks > t.quiz_passing_score ? window.wplms_course_data.translations.passed : window.wplms_course_data.translations.failed) : "") : "" : Vl("div", {
                className: "up" == c ? "incoursequiz_details show_controls" : "incoursequiz_details hide_controls",
                ref: r
            }, Vl("div", {
                className: "quiz_first_block"
            }, t.submitted ? Vl("strong", null, Vl("span", {
                className: "student_score"
            }, t.meta.auto ? t.marks + "/" + t.max_marks : ""), t.quiz_passing_score ? Vl("span", null, t.marks > t.quiz_passing_score ? window.wplms_course_data.translations.passed : window.wplms_course_data.translations.failed) : "", Vl("span", {
                className: "student_quiz_status"
            }, window.wplms_course_data.translations.quiz_submitted)) : Vl("div", {
                className: "quiztimer_wrapper"
            }, t.hasOwnProperty("end_time") && parseInt(t.end_time) ? Vl("div", {
                className: "end_timer"
            }, Vl("span", null, window.wplms_course_data.translations.ends_in), Vl(Li, {
                duration: Math.floor((t.end_time - (new Date).getTime()) / 1e3),
                update: () => {},
                quiz_id: t.id,
                start: !0
            })) : "", t && t.meta && t.meta.duration && parseInt(t.meta.duration) < 863913600 ? Vl(Li, {
                duration: X,
                update: (e, a) => {
                    "expired" == a && "submit" !== !s && H(t)
                },
                quiz_id: t.id,
                start: t.start
            }) : Vl("strong", null, window.wplms_course_data.translations.no_time_limit)), t && t.meta && t.meta.questions && t.meta.questions.length && t.submitted ? Vl("div", {
                className: "buttons has-addons small"
            }, Vl("a", {
                className: "correct" == k ? "button tip end is-focused" : "button tip",
                title: window.wplms_course_data.translations.show_correct_attempts,
                onClick: () => {
                    x("correct" != k ? "correct" : null)
                }
            }, Vl("span", {
                className: "vicon vicon-check"
            })), Vl("a", {
                className: "wrong" == k ? "button tip end is-focused" : "button tip",
                title: window.wplms_course_data.translations.show_wrong_attempts,
                onClick: () => {
                    x("wrong" != k ? "wrong" : null)
                }
            }, Vl("span", {
                className: "vicon vicon-close"
            })), t.hasOwnProperty("show_print_results") && t.show_print_results ? Vl("a", {
                className: "button tip",
                title: window.wplms_course_data.translations.print_results,
                onClick: () => {
                    (async () => {
                        if (!t.meta.questions.length) return !1;
                        void 0 === e.quizid && (e.quizid = e.quiz.id), document.getElementById("quiz_results_" + e.quizid) && document.getElementById("quiz_results_" + e.quizid).remove();
                        const a = document.createElement("div");
                        if (a.src = a.src, a.setAttribute("id", "quiz_results_" + e.quizid), a.classList.add("quiz_results"), t.hasOwnProperty("title")) {
                            let e = document.createElement("meta"),
                                a = document.createElement("meta");
                            e.setAttribute("property", "og:title");
                            let s = "";
                            t.meta.auto && (s = t.marks + "/" + t.max_marks), t.quiz_passing_score && (t.marks > t.quiz_passing_score ? s += " " + window.wplms_course_data.translations.passed : s += " " + window.wplms_course_data.translations.failed), e.setAttribute("content", s + t.title), e.setAttribute("name", "twitter:title"), e.setAttribute("content", s + t.title), document.body.appendChild(e), document.body.appendChild(a)
                        }
                        document.body.appendChild(a), Xl(Vl(ml, {
                            quiz: t,
                            renderSwitch: U
                        }), document.getElementById("quiz_results_" + e.quizid)), await new Promise((e => setTimeout(e, 1e3)));
                        let s = document.getElementById("quiz_results_" + e.quizid).outerHTML;
                        document.getElementById("quiz_results_" + e.quizid) && document.getElementById("quiz_results_" + e.quizid).remove();
                        var n = window.open("", "", "height=800, width=1000");
                        n.document.write(s), n.print()
                    })()
                }
            }, Vl("span", {
                className: "vicon vicon-printer"
            })) : "") : "", t && t.meta && t.meta.questions && t.meta.questions.length && N.length ? Vl("div", {
                className: "buttons has-addons"
            }, Vl("a", {
                className: "bookmarked" == k ? "button tip end is-focused" : "button tip",
                title: window.wplms_course_data.translations.show_bookmarked,
                onClick: () => {
                    x("bookmarked" != k ? "bookmarked" : null)
                }
            }, Vl("span", {
                className: "vicon vicon-bookmark-alt"
            }))) : "", Vl("span", "up" == c ? {
                className: "quiz_detail_toggle vicon button is-primary vicon-arrow-up",
                onClick: () => {
                    u("up" == c ? "down" : "up")
                }
            } : {
                className: "quiz_detail_toggle vicon button is-primary vicon-arrow-down",
                onClick: () => {
                    u("up" == c ? "down" : "up")
                }
            })), Vl("div", {
                className: "quiz_timeline"
            }, !t.submitted || t.meta && t.meta.retakes > 0 ? Vl("div", {
                className: "incourse_quiz_button"
            }, t.start || t.submitted ? "" : t.remaining && t.remaining > 0 ? Vl("a", {
                className: "continue_quiz button is-primary",
                onClick: D
            }, window.wplms_course_data.translations.continue) : t && t.meta && t.meta.hasOwnProperty("check_access") && "object" == typeof t.meta.check_access && t.meta.check_access.hasOwnProperty("status") && !t.meta.check_access.status ? Vl("div", {
                className: "check_quiz",
                dangerouslySetInnerHTML: {
                    __html: t.meta.check_access.html
                }
            }) : t.hasOwnProperty("end_time") && parseInt(t.end_time) && parseInt(t.end_time) <= (new Date).getTime() ? "" : t.hasOwnProperty("start_time") && t.start_time && parseInt(t.start_time) > (new Date).getTime() ? Vl("div", {
                className: "start_timer"
            }, Vl("div", null, window.wplms_course_data.translations.starts_in), Vl(Li, {
                duration: Math.floor((parseInt(t.start_time) - (new Date).getTime()) / 1e3),
                update: () => {
                    a({
                        ...t,
                        start_time: t.start_time
                    })
                },
                quiz_id: t.id,
                start: !0
            })) : Vl("a", {
                className: "start" === s ? "start_quiz button full is-primary is-loading" : "start_quiz  full button is-primary",
                onClick: () => {
                    window.wplms_course_data.start_popup ? p(!0) : D()
                }
            }, window.wplms_course_data.translations.start), !t.start || t.submitted || e.hasOwnProperty("non_logged_in_quiz") && (!e.hasOwnProperty("non_logged_in_quiz") || e.non_logged_in_quiz) ? "" : Vl("a", {
                className: "save" === s ? "save_quiz button is-primary is-loading" : "save_quiz button is-primary",
                onClick: () => {
                    if (t.meta.questions && t.meta.questions.length) {
                        n("save");
                        let e = [];
                        t.meta.questions.map(((t, a) => {
                            let s = {
                                ...t
                            };
                            null == s.marked_answer || "undefined" == s.marked_answer || sd(s.marked_answer) || t.attempted || (s.correct = or(s), e.push(s))
                        })), fetch(window.wplms_course_data.api_url + "/user/savequiz?post", {
                            method: "POST",
                            headers: window.vibebp.xnonce ? {
                                "X-WP-Nonce": window.vibebp.xnonce
                            } : {},
                            body: JSON.stringify({
                                quiz_id: t.id,
                                questions: e,
                                token: y
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            n(!1), e.hasOwnProperty("message") && ed("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            n(!1), console.error("Uh oh, an error!", e), ed("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }
            }, window.wplms_course_data.translations.save_quiz), t.hasOwnProperty("end_time") && parseInt(t.end_time) && parseInt(t.end_time) <= (new Date).getTime() || !t.start || t.submitted || t && t.hasOwnProperty("hide_submit_button") && t.hide_submit_button && i && i.length && t.hasOwnProperty("meta") && t.meta && t.meta.hasOwnProperty("questions") && t.meta.questions && t.meta.questions.length && !(i.indexOf(t.meta.questions.length - 1) > -1) ? "" : Vl("a", {
                className: "submit" === s ? "submit_quiz button is-primary is-loading" : "submit_quiz button is-primary",
                onClick: () => {
                    window.wplms_course_data.submit_popup ? w(!0) : N.length ? h(!0) : H()
                }
            }, window.wplms_course_data.translations.submit), !t.start && t.submitted && t.meta && t.meta.retakes > 0 ? Vl("div", {
                className: "quiz_retake"
            }, Vl("a", {
                className: "retake" === s ? "retake_quiz button is-primary is-loading" : "retake_quiz button is-primary",
                onClick: () => (() => {
                    t.hasOwnProperty("non_logged_in_quiz") && t.non_logged_in_quiz && !y && localStorage.removeItem("vibequiz_" + t.id), n("retake");
                    let a = {
                        token: y
                    };
                    if (e.hasOwnProperty("course") && (a.course = e.course), e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz) {
                        localStorage.removeItem("vibequiz_" + e.quizid);
                        let a = localStorage.getItem("quiz_retakes_" + e.quizid);
                        return a || (a = 0), localStorage.setItem("quiz_retakes_" + t.id, parseInt(a) + 1), void $()
                    }
                    let s = window.wplms_course_data.api_url + "/user/quiz/" + e.quizid;
                    e.hasOwnProperty("non_logged_in_quiz") && e.non_logged_in_quiz && !y && (s = window.wplms_course_data.api_url + "/quiz/nonloggedin/" + e.quizid + "?client_id=" + window.wplms_course_data.client_id), R(s, !0, !0).then((t => {
                        fetch(window.wplms_course_data.api_url + "/user/coursestatus/retake_single_quiz/" + e.quizid + "?post", {
                            method: "post",
                            headers: window.vibebp.xnonce ? {
                                "X-WP-Nonce": window.vibebp.xnonce
                            } : {},
                            body: JSON.stringify(a)
                        }).then((e => e.json())).then((t => {
                            if (t)
                                if (t.status) {
                                    if ($(), e.hasOwnProperty("update") && e.update("retake_quiz"), firebase && firebase.database && firebase.auth().currentUser) {
                                        let t = z;
                                        t && t.hasOwnProperty("id") || (t = td("vibebp").getUser()), firebase.database().ref(`quizes/${e.quizid}/users/${t.id}`).remove()
                                    }
                                } else t.message && (ed("vibebp").addNotification({
                                    icon: "",
                                    text: t.message
                                }), n(!1))
                        }))
                    })).catch((e => {
                        console.log(e), navigator && !navigator.onLine && (ed("vibebp").addNotification({
                            text: window.wplms_course_data.translations.could_not_retake_offline
                        }), n(!1))
                    }))
                })()
            }, window.wplms_course_data.translations.retake), Vl("strong", null, window.wplms_course_data.translations.retakes_left, " : ", t.meta.retakes)) : "") : "", f ? Vl(Ir, {
                hideQuestions: () => g(!1),
                quiz: t,
                currentQuestions: i,
                update: A,
                filter: k,
                bookMarked: N
            }) : "", t && t.meta && t.meta.questions && t.meta.questions.length && !f ? Vl("span", {
                className: "show_questions",
                onClick: () => g(!0)
            }, Vl("span", null, window.wplms_course_data.translations.show_questions), Vl("span", {
                className: "vicon vicon-angle-double-right"
            })) : "", "live_contest" == t.quiz_type ? Vl(Bl, {
                leaderboardData: L,
                quiz: t
            }) : "")), Vl("div", {
                className: "quiz_questions_content"
            }, Vl("div", {
                className: ""
            }, t.start || t.submitted ? "" : Vl("div", {
                className: "quiz_content",
                dangerouslySetInnerHTML: {
                    __html: t && t.content ? t.content : ""
                }
            }), !t.start && t.submitted ? Vl("div", {
                className: ""
            }, Vl("div", {
                className: "quiz_content",
                dangerouslySetInnerHTML: {
                    __html: t.meta.completion_message
                }
            }), !t.start && t.submitted && t.retake_html ? Vl("div", {
                dangerouslySetInnerHTML: {
                    __html: t.retake_html
                }
            }) : "") : "", t.start || !t.submitted || e.hasOwnProperty("activity") ? "" : !e.hasOwnProperty("non_logged_in_quiz") || e.hasOwnProperty("non_logged_in_quiz") && !e.non_logged_in_quiz ? Vl(ol, {
                quizid: e.quizid
            }) : "", t && t.meta && t.meta.questions && t.submitted && t.meta.auto && t.show_advance_stats && !e.hasOwnProperty("activity") ? Vl(Gr, {
                quiz: t
            }) : "", t && t.meta && K && (t.start || t.submitted) ? K.map(((o, r) => {
                if (-1 === i.indexOf(r)) return;
                let l = "",
                    d = "";
                o.hasOwnProperty("show_hint") && o.show_hint ? (d = "question_hint_content message show", l = "question_hint show") : (d = "question_hint_content message", l = "question_hint");
                let c = 0;
                if ("submit" !== s && (!t.hasOwnProperty("submitted") || !t.submitted) && o.hasOwnProperty("question_duration") && o.question_duration) {
                    c = parseInt(o.question_duration);
                    let e = localStorage.getItem("question_start_time" + o.key);
                    if (e) {
                        let t = ((new Date).getTime() - e) / 1e3;
                        c = t < c ? Math.floor(c - t) : 0
                    } else e = 0, localStorage.setItem("question_start_time" + o.key, (new Date).getTime())
                }
                return Vl("div", {
                    className: "question"
                }, Vl("div", {
                    className: "question_actions"
                }, Vl("span", null, window.wplms_course_data.translations.question_full_prefix, " ", r + 1), Vl("div", null, Vl("span", {
                    className: "marks"
                }, Vl("i", {
                    className: "vicon vicon-medall"
                }), o.marks), !e.hasOwnProperty("non_logged_in_quiz") || e.hasOwnProperty("non_logged_in_quiz") && !e.non_logged_in_quiz ? Vl("span", {
                    className: O.indexOf(o.id) > -1 ? "is-loading" : o.flagged ? "flagged" : "flag",
                    onClick: () => {
                        S(o)
                    }
                }, Vl("i", {
                    className: o.flagged ? "vicon vicon-flag-alt" : "vicon vicon-flag"
                })) : "", o.hint ? Vl("span", {
                    className: l,
                    onClick: e => {
                        let s = {
                            ...t
                        };
                        s.meta.questions[r].hasOwnProperty("show_hint") && s.meta.questions[r].show_hint ? s.meta.questions[r].show_hint = !1 : s.meta.questions[r].show_hint = !0, a(s)
                    }
                }) : "")), "submit" === s || t.hasOwnProperty("submitted") && t.submitted || !o.hasOwnProperty("question_duration") || !o.question_duration ? "" : Vl(bi, {
                    question: {
                        ...o
                    },
                    update: J,
                    duration: c,
                    start: !0
                }), U(o, r), !t.submitted && t.start ? Vl("span", {
                    className: "bookmark button",
                    onClick: () => {
                        (t => {
                            let a = [...N],
                                s = a.indexOf(t.id);
                            s <= -1 ? a.push(t.id) : a.splice(s, 1), localforage.setItem("bookmarked_questions_" + e.quizid, JSON.stringify(a)), q(a), a.length || "bookmarked" != k || x(null)
                        })(o)
                    }
                }, Vl("i", {
                    className: N.indexOf(o.id) > -1 ? "vicon vicon-bookmark-alt" : "vicon vicon-bookmark"
                })) : "", o.attempted || !t.check_answer || t.submitted ? "" : !e.hasOwnProperty("non_logged_in_quiz") || e.hasOwnProperty("non_logged_in_quiz") && !e.non_logged_in_quiz ? Vl("div", {
                    className: "checkanswer" === s ? "check_answer button is-primary is-loading" : "check_answer button is-primary",
                    onClick: e => {
                        ((e, s) => {
                            n("checkanswer");
                            let i = lr(e, t.partial_marking, t.negative_marking, parseFloat(t.negative_marks), !0),
                                o = {
                                    ...t
                                };
                            i.attempted = !0, i.hasOwnProperty("marked_answer") || (i.marked_answer = ""), o.meta.questions[s] = i, fetch(window.wplms_course_data.api_url + "/user/saveuserquestion?post", {
                                method: "POST",
                                headers: window.vibebp.xnonce ? {
                                    "X-WP-Nonce": window.vibebp.xnonce
                                } : {},
                                body: JSON.stringify({
                                    quiz_id: o.id,
                                    question: i,
                                    token: y
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                if (n(!1), a(o), B(o), "live_contest" == o.quiz_type && firebase) {
                                    let e = 0,
                                        t = 0;
                                    if (o.meta.questions.map((a => {
                                            a.attempted && e++, a.hasOwnProperty("user_marks") && (t += a.user_marks)
                                        })), firebase && firebase.auth() && firebase.auth().currentUser) {
                                        let a = z;
                                        a && a.hasOwnProperty("id") || (a = td("vibebp").getUser()), firebase.database().ref(`quizes/${o.id}/users/${a.id}/attempted`).set(e, (e => {
                                            e && console.log(e)
                                        })), firebase.database().ref(`quizes/${o.id}/users/${a.id}/marks`).set(parseFloat(t), (e => {
                                            e && console.log(e)
                                        }))
                                    }
                                }
                            })).catch((e => {
                                n(!1), console.error("Uh oh, an error!", e), ed("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        })(o, r)
                    }
                }, window.wplms_course_data.translations.check_answer) : "", o.hint ? Vl("span", {
                    className: d,
                    dangerouslySetInnerHTML: {
                        __html: o.hint
                    }
                }) : "", o.attempted ? Vl(wr, {
                    question: o
                }) : "", o.attempted && o.show_correct_answer && o.explanation.length ? Vl("div", {
                    className: "explanation"
                }, Vl("strong", null, window.wplms_course_data.translations.question_explanation), Vl("div", {
                    dangerouslySetInnerHTML: {
                        __html: o.explanation
                    }
                })) : "")
            })) : "", t && t.meta && t.meta.questions && (t.start || t.submitted) ? Vl(Ar, {
                quiz: t,
                questions: [...K],
                currentQuestions: i,
                filter: k,
                update: A,
                bookMarked: N
            }) : "")))) : Vl(wl, null)
        };
        var od = a(299),
            rd = a.n(od);
        const {
            createElement: ld,
            useState: dd,
            useEffect: cd,
            useRef: ud,
            Fragment: md,
            render: pd
        } = wp.element, {
            dispatch: _d,
            select: wd
        } = wp.data, vd = Math.round(100 * Math.random()), hd = e => {
            const t = ud(null),
                [a, s] = dd(!1),
                [n, i] = dd(!1),
                [o, r] = dd(""),
                [l, d] = dd(""),
                [c, u] = dd(""),
                [m, p] = dd(""),
                [_, w] = dd({
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0,
                    type: "image"
                }),
                [v, h] = dd(""),
                [f, g] = dd(window.wplms_course_data.translations.select_image);
            return cd((() => {
                e.hasOwnProperty("crop") && e.crop && s(!0)
            }), []), cd((() => {
                n && v && a && new(rd())(v, {
                    returnMode: "ratio",
                    onCropEnd: function(t) {
                        let a = {
                            ..._
                        };
                        a.x = 100 * t.x, a.y = 100 * t.y, a.height = 100 * t.height, a.width = 100 * t.width, w(a);
                        let s = {
                            x: v.naturalWidth * t.x,
                            y: v.naturalHeight * t.y,
                            width: v.naturalWidth * t.width,
                            height: v.naturalHeight * t.height
                        };
                        e.update(m, s)
                    }
                })
            }), [n, v]), _.x, _.y, _.width, _.height, ld("div", {
                className: "uploader"
            }, ld("label", {
                for: "fileupload_" + vd,
                className: "upload_file"
            }, f, "image" == e.type ? ld("input", {
                id: "fileupload_" + vd,
                "data-type": e.type,
                ref: t,
                type: "file",
                accept: "image/*",
                onChange: a => {
                    t.current.files[0].size < window.wplms_course_data.settings.upload_limit ? (r(window.URL.createObjectURL(t.current.files[0])), p(t.current.files[0]), e.update(t.current.files[0], {
                        ..._,
                        key: "image"
                    })) : (g(window.wplms_course_data.translations.image_size_error), setTimeout((() => {
                        g(window.wplms_course_data.translations.select_image)
                    }), 3500))
                }
            }) : "video" == e.type ? ld("input", {
                id: "fileupload_" + vd,
                "data-type": e.type,
                ref: t,
                type: "file",
                accept: "video/*",
                onChange: a => {
                    t.current.files[0].size < window.wplms_course_data.settings.upload_limit ? (d(window.URL.createObjectURL(t.current.files[0])), p(t.current.files[0]), e.update(t.current.files[0], {
                        ..._,
                        key: "video"
                    })) : (g(window.wplms_course_data.translations.image_size_error), setTimeout((() => {
                        g(window.wplms_course_data.translations.select_image)
                    }), 3500))
                }
            }) : ld("input", {
                id: "fileupload_" + vd,
                "data-type": e.type,
                ref: t,
                type: "file",
                onChange: a => {
                    t.current.files && t.current.files[0] && (t.current.files[0].size < e.args.allowed_file_size ? -1 !== e.args.allowed_mime_types.indexOf(t.current.files[0].type) ? (u(window.URL.createObjectURL(t.current.files[0])), p(t.current.files), e.update(t.current.files, {
                        ..._,
                        key: "attachment"
                    })) : (g(window.wplms_course_data.translations.image_type_error), setTimeout((() => {
                        g(window.wplms_course_data.translations.select_image)
                    }), 3500)) : (g(window.wplms_course_data.translations.image_size_error), setTimeout((() => {
                        g(window.wplms_course_data.translations.select_image)
                    }), 3500)))
                }
            })))
        }, {
            Component: fd,
            createElement: gd,
            render: yd,
            useState: bd,
            useEffect: kd,
            Fragment: xd
        } = wp.element, Nd = e => {
            const [t, a] = bd(e.duration), [s, n] = bd({
                d: 0,
                h: 0,
                m: 0,
                s: 0
            });
            kd((() => {
                e.start ? setTimeout((() => {
                    let s = t - 1;
                    s <= -1 ? e.update(e.quiz_id, "expired") : s >= 0 && (a(s), i())
                }), 1e3) : (a(e.duration), i())
            }), [t, e.start, e.duration]);
            const i = () => {
                let e = {
                        ...s
                    },
                    a = t;
                a > 86400 ? (e.d = Math.floor(a / 86400), a -= 86400 * e.d) : e.d = 0, a > 3600 ? (e.h = Math.floor(a / 3600), a -= 3600 * e.h) : e.h = 0, a > 60 ? (e.m = Math.floor(a / 60), a -= 60 * e.m) : e.m = 0, e.s = a, n(e)
            };
            let o = "c100 p0 big";
            if (t > -1) {
                let a = Math.floor((e.duration - t) / e.duration * 100);
                a <= 0 && (a = 1), o = "c100 p" + a + " big"
            }
            return gd("div", {
                className: "quiztimer"
            }, t >= 776736e3 ? window.wplms_course_data.translations.unlimited_time : gd(xd, null, gd("div", {
                className: "circle_timer"
            }, gd("div", {
                className: o
            }, gd("span", null, gd("span", {
                className: "timer_amount"
            }, s.d ? gd(xd, null, gd("span", null, s.d), gd("span", null, ":")) : "", s.h ? gd(xd, null, gd("span", null, s.h), gd("span", null, ":")) : "", s.m ? gd(xd, null, gd("span", null, s.m), gd("span", null, ":")) : "", gd("span", null, s.s)), gd("span", {
                className: "timer_unit"
            }, s.d ? gd(xd, null, gd("span", null, window.wplms_course_data.translations.days), gd("span", null)) : "", s.h ? gd(xd, null, gd("span", null, window.wplms_course_data.translations.hours), gd("span", null)) : "", s.m ? gd(xd, null, gd("span", null, window.wplms_course_data.translations.minutes), gd("span", null)) : "", gd("span", null, window.wplms_course_data.translations.seconds))), gd("div", {
                className: "slice"
            }, gd("div", {
                className: "bar"
            }), gd("div", {
                className: "fill"
            }))))))
        }, qd = function(e) {
            if (void 0 === e) return !0;
            if ("undefined" === e) return !0;
            if (null == e) return !0;
            if ("number" == typeof e) return !1;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }, {
            createElement: Od,
            useState: Id,
            useEffect: Cd,
            Fragment: Sd,
            render: Pd,
            useContext: Ed
        } = wp.element, {
            dispatch: zd,
            select: Td
        } = wp.data, Ld = e => {
            const [t, a] = Id(!0), [s, n] = Id({}), [i, o] = Id([]), [r, l] = Id(""), [d, c] = Id(!1);
            let u = Td("vibebp").getUser();
            u.token = Td("vibebp").getToken(), Cd((() => {
                a(!0);
                let t = `${window.wplms_course_data.api_url}/user/content/assignmentId/${e.assignment.id}`;
                e.hasOwnProperty("force") && e.force && (t += "?force"), fetch(t, {
                    method: "post",
                    headers: window.vibebp.xnonce ? {
                        "X-WP-Nonce": window.vibebp.xnonce
                    } : {},
                    body: JSON.stringify({
                        token: u.token
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    if (e) {
                        if (e.hasOwnProperty("remaining")) e.duration = e.remaining;
                        else if (e.hasOwnProperty("start") && !0 !== e.start && e.start) {
                            let t = parseInt(e.duration) + parseInt(e.start),
                                a = Math.round((new Date).getTime() / 1e3);
                            e.duration = t > a ? t - a : 0
                        }
                        e.hasOwnProperty("comment_content") && l(e.comment_content), n(e), a(!1), document.dispatchEvent(new Event("VibeBP_Editor_Content"))
                    }
                })).catch((e => {
                    a(!1), console.error("Uh oh, an error!", e), zd("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                })), document.addEventListener("wplms_assignment_custom_upload", (({
                    detail: e
                }) => {
                    if (e.hasOwnProperty("data") && e.data.hasOwnProperty("Key") && e.data.Key.length) {
                        let t = [...i],
                            a = e.data.Key.split("/");
                        t.push({
                            ...e.data,
                            name: a[a.length - 1]
                        }), o(t)
                    }
                }))
            }), [e.assignment]);
            const m = (t = null) => {
                    let a = r;
                    if (!t && s && s.type && "upload" == s.type) {
                        if (!i || i.length <= 0) return zd("vibebp").addNotification({
                            text: window.wplms_course_data.translations.upload_a_file
                        }), !1;
                        qd(a) && (a = s.title + " - " + (u.displayname ? u.displayname : u.name ? u.name : ""))
                    } else if (t && qd(a) && (a = s.title + " - " + (u.displayname ? u.displayname : u.name ? u.name : "")), !a || a.length <= 3) return zd("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error
                    }), !1;
                    c(!0);
                    var o = new FormData;
                    o.append("body", JSON.stringify({
                        comment: a,
                        attachments: i,
                        token: Td("vibebp").getToken()
                    })), i.length && i.map(((e, t) => {
                        e instanceof File ? o.append("files_" + t, e) : o.append("files_" + t, JSON.stringify(e))
                    })), fetch(`${window.wplms_course_data.api_url}/user/upload/assignmentId/${e.assignment.id}?upload`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: o
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        if (c(!1), t) {
                            let a = {
                                ...s
                            };
                            if (t.attachment_urls && t.attachment_urls.length && (a.attachment_urls = t.attachment_urls), t.comment_id) {
                                a.flag = 1, a.already_submitted = !0, e.hasOwnProperty("unitIndex") ? e.update({
                                    unitIndex: e.unitIndex,
                                    assignmentIndex: e.assignmentIndex
                                }, "complete") : e.update({}, "submitassignment");
                                let t = `${window.wplms_course_data.api_url}/user/content/assignmentId/${e.assignment.id}`;
                                "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(t).then((e => {
                                    e && e.length && (e = JSON.parse(e), e = a, localforage.setItem(t, JSON.stringify(e)))
                                }));
                                let s = `${window.wplms_course_data.api_url}/student/assignments`;
                                p(s)
                            }
                            if (n(a), t.hasOwnProperty("message") && zd("vibebp").addNotification({
                                    text: t.message
                                }), t.status) {
                                let t = e.course,
                                    a = e.assignment.id;
                                document.dispatchEvent(new CustomEvent("course_item_completed", {
                                    detail: {
                                        course_id: t,
                                        item_id: a
                                    }
                                }))
                            }
                        }
                    })).catch((e => {
                        c(!1), console.error("Uh oh, an error!", e), zd("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                },
                p = (e, t) => "undefined" != typeof localforage && window.vibebp.api.sw_enabled && navigator.onLine ? t ? localforage.removeItem(e) : localforage.iterate((function(t, a, s) {
                    e.length && a.length && a.includes(e) && localforage.removeItem(a)
                })) : new Promise((e => {
                    e(1)
                }));
            let _ = {
                    allowed_mime_types: s.permit_mime,
                    allowed_file_size: parseInt(s.permit_size)
                },
                w = s.duration;
            return s.hasOwnProperty("end_time") && parseInt(s.end_time) && parseInt(s.end_time) > (new Date).getTime() && (parseInt(s.end_time) - (new Date).getTime()) / 1e3 < w && (w = Math.floor((parseInt(s.end_time) - (new Date).getTime()) / 1e3)), t ? Od(wl, null) : Od("div", {
                className: "course_assignment_wrapper"
            }, Od("div", {
                className: "course_assignment"
            }, Od("div", {
                className: "assignment_details"
            }, s.hasOwnProperty("end_time") && parseInt(s.end_time) ? Od("div", {
                className: "end_timer"
            }, Od("span", null, window.wplms_course_data.translations.ends_in), Od(Nd, {
                duration: Math.floor((s.end_time - (new Date).getTime()) / 1e3),
                update: () => {},
                quiz_id: s.id,
                start: !0
            })) : "", Od("div", {
                className: "assignment_marks"
            }, Od("span", null, s.total_marks), Od("span", null, window.wplms_course_data.translations.total_marks)), Od(Nd, {
                duration: w,
                update: (e, t) => {
                    "expired" == t && (s.already_submitted || m(!0))
                },
                quiz_id: s.id,
                start: s.start
            })), Od("div", {
                className: "assignment_content_wrapper"
            }, Od("div", {
                className: "assignment_content",
                dangerouslySetInnerHTML: {
                    __html: s.content
                }
            }), s.type && "upload" == s.type && s && s.permit_extension && s.permit_extension.length && s.flag <= 2 ? Od("div", {
                className: "allowed_file_extenstions"
            }, Od("label", null, window.wplms_course_data.translations.allowed_file_extenstions), s.permit_extension.map((e => Od("span", null, e)))) : "", s.hasOwnProperty("end_time") && parseInt(s.end_time) && parseInt(s.end_time) <= (new Date).getTime() ? "" : s.hasOwnProperty("start_time") && parseInt(s.start_time) && parseInt(s.start_time) > (new Date).getTime() ? Od("div", {
                className: "start_timer"
            }, Od("div", null, window.wplms_course_data.translations.starts_in), Od(Nd, {
                duration: Math.floor((parseInt(s.start_time) - (new Date).getTime()) / 1e3),
                update: () => {
                    n({
                        ...s,
                        start_time: s.start_time
                    })
                },
                quiz_id: s.id,
                start: !0
            })) : s.start ? "" : Od("a", {
                className: "assignment_start_button button is-primary",
                onClick: () => {
                    fetch(`${window.wplms_course_data.api_url}/user/start/assignmentId/${e.assignment.id}?post`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            token: Td("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        if (t) {
                            let a = {
                                ...s
                            };
                            a.start = Math.round((new Date).getTime() / 1e3), n(a);
                            let i = `${window.wplms_course_data.api_url}/user/content/assignmentId/${e.assignment.id}`,
                                o = `${window.wplms_course_data.api_url}/student/assignments`;
                            p(o, !0), "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(i).then((e => {
                                e && e.length && (e = JSON.parse(e)).hasOwnProperty("duration") && (e.start = a.start, localforage.setItem(i, JSON.stringify(e)))
                            })), t.hasOwnProperty("message") && zd("vibebp").addNotification({
                                text: t.message
                            })
                        }
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), zd("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, window.wplms_course_data.translations.start_assignment), s.start && s.flag <= 2 ? Od(Sd, null, s.already_submitted ? Od(Sd, null, s.attachment_urls && s.attachment_urls.length ? Od(Sd, null, window.wplms_course_data.translations.uploaded_files, Od("div", {
                className: "assignment_attachments"
            }, s.attachment_urls.map(((e, t) => e.hasOwnProperty("url") ? Od("div", null, Od("a", null, e.name)) : Od("div", null, Od("a", {
                href: e.url,
                target: "_blank",
                download: !0
            }, e.name)))))) : "", s.hasOwnProperty("end_time") && parseInt(s.end_time) && parseInt(s.end_time) <= (new Date).getTime() ? "" : s.hasOwnProperty("flag") && 1 == s.flag && s.duration > 0 ? Od("div", {
                className: "resubmit ",
                onClick: () => {
                    (() => {
                        let t = {
                            ...s
                        };
                        t.already_submitted = !1, t.flag = 0, e.hasOwnProperty("unitIndex") ? e.update({
                            unitIndex: e.unitIndex,
                            assignmentIndex: e.assignmentIndex
                        }, "retake") : e.update({}, "retookassignment"), n(t)
                    })()
                }
            }, Od("a", {
                className: "button is-primary"
            }, window.wplms_course_data.translations.resubmit, Od("span", {
                className: "vicon vicon-close"
            }))) : "") : "", s.type && "upload" == s.type && !s.already_submitted ? Od("div", {
                className: "upload_assignment"
            }, s.hasOwnProperty("custom_upload") && s.custom_upload ? Od("div", null, (v = new CustomEvent("custom_assignment_upload", {
                detail: {
                    data: s
                }
            }), document.dispatchEvent(v), Od("div", {
                className: "custom_assignment_upload",
                id: s.custom_upload
            }))) : Od(hd, {
                type: 1,
                update: (e, t) => {
                    let a = [...i];
                    a.push(new File([e[0]], e[0].name)), o(a)
                },
                args: _
            }), i ? Od("div", {
                className: "assignment_attachments"
            }, i.map(((e, t) => Od("div", null, Od("span", null, e.name), Od("span", {
                className: "vicon vicon-close",
                onClick: () => {
                    (e => {
                        let t = [...i];
                        t.splice(e, 1), o(t)
                    })(t)
                }
            }))))) : "", Od(Hs, r ? {
                field: {
                    id: "assignment_text",
                    value: r,
                    components: ["editor"]
                },
                update: (e, t, a) => {
                    l(e.value)
                }
            } : {
                field: {
                    id: "assignment_text",
                    components: ["editor"]
                },
                update: (e, t, a) => {
                    l(e.value)
                }
            })) : "", !s.hasOwnProperty("type") || s.type && "textarea" == s.type ? Od(Hs, {
                field: r ? {
                    id: "assignment_text",
                    value: r,
                    components: ["editor"]
                } : {
                    id: "assignment_text",
                    components: ["editor"]
                },
                update: (e, t, a) => {
                    l(e.value)
                }
            }) : "") : "", s.flag && s.hasOwnProperty("marks") && s.flag > 1 ? Od("div", {
                className: "assigment_evaluated"
            }, s.message ? Od("span", null, s.message) : "", s.marks ? Od("span", null, window.wplms_course_data.translations.marks_obtained, " : ", s.marks) : "", s.hasOwnProperty("instructor_remarks") ? Od("div", {
                className: "remarks"
            }, Od("h3", null, window.wplms_course_data.translations.instructor_remarks, " "), Od("div", {
                dangerouslySetInnerHTML: {
                    __html: s.instructor_remarks
                }
            })) : "") : "")), s.start && !s.already_submitted ? Od("a", {
                className: d ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    m()
                }
            }, window.wplms_course_data.translations.submit_assignment) : "");
            var v
        }, {
            createElement: Md,
            render: $d,
            useState: jd,
            useEffect: Ad,
            Fragment: Dd,
            useContext: Hd,
            useRef: Ud
        } = wp.element, {
            dispatch: Fd,
            select: Jd
        } = wp.data, Rd = e => {
            const t = Ud(null),
                [a, s] = jd(Math.round(1e4 * Math.random())),
                [n, i] = jd(!1),
                [o, r] = jd(!1),
                l = (e, t) => {
                    void 0 === t && (t = window.location.href);
                    var a = t.match("[?&]" + e + "=([^&]+)");
                    return a ? a[1] : null
                };
            Ad((() => (c().then((() => {
                if (document.querySelector("#item_" + e.index)) {
                    let t = {};
                    "youtube" == e.provider && (t.youtube = {
                        modestbranding: 1
                    }), "vimeo" == e.provider && (t.vimeo = {
                        controls: !0,
                        playsinline: !1
                    }), window.wplms_course_data.course.status.seek_lock && (t.listeners = {
                        seek: e => {
                            var t = n.currentTime;
                            if (_getTargetTime(n, e) > t) return e.preventDefault(), !1
                        }
                    });
                    let a = null;
                    if (e.hasOwnProperty("video") && e.video.hasOwnProperty("videotype") && "360" == e.video.videotype) a = new Plyr(document.querySelector("#item_" + e.index), t), a.mediainfo = a.mediainfo || {}, a.mediainfo.projection = "360", a.vr({
                        projection: "AUTO",
                        debug: !0,
                        forceCardboard: !1
                    });
                    else if (e.hasOwnProperty("src") && "mpd" == e.url.split(".").pop() && dashjs.MediaPlayer().create().initialize(document.querySelector("#item_" + e.index), e.url, !0), a = new Plyr(document.querySelector("#item_" + e.index), t), e.hasOwnProperty("src") && "m3u8" == e.url.split(".").pop())
                        if (Hls.isSupported()) {
                            const t = new Hls;
                            t.loadSource(e.url), t.attachMedia(document.querySelector("#item_" + e.index))
                        } else document.querySelector("#item_" + e.index).src = e.url;
                    a && (r(a), a.once("loadeddata", (() => {
                        let t = localStorage.getItem(e.url);
                        t && (a.currentTime = parseInt(t)), i({
                            plyr: a,
                            url: e.url
                        })
                    })), a.on("timeupdate", (() => {
                        localStorage.setItem(e.url, Math.floor(a.currentTime))
                    })), "youtube" == e.provider && a.pause(), a.on("ready", (() => {
                        if ("youtube" == e.provider) {
                            let t = l("t", e.url);
                            if (void 0 !== t && t) a.muted = !0, a.forward(parseInt(t)), a.play();
                            else {
                                let s = localStorage.getItem(e.url);
                                void 0 !== t && s && (a.muted = !0, a.forward(parseInt(s)), a.play())
                            }
                        }
                    })), a.on("playing", (() => {
                        if ("youtube" == e.provider) {
                            let t = l("t", e.url);
                            (void 0 !== t && t || localStorage.getItem(e.url)) && (a.seekDone || (a.pause(), a.muted = !1, a.seekDone = !0))
                        }
                    })), a.once("ended", d))
                }
            })), () => {
                document.querySelector(".video_wrapper") && document.querySelector(".video_wrapper > div") && document.querySelector(".video_wrapper > div").remove()
            })), [e.url]);
            const d = t => {
                    e.update("ended", {
                        index: e.index,
                        src: e.url,
                        event: t
                    })
                },
                c = () => {
                    if (document.querySelector(".video_wrapper") && document.querySelector(".video_wrapper > div") && document.querySelector(".video_wrapper > div").remove(), "youtube" == e.provider) return localforage.getItem(e.url).then((t => {
                        if (t) {
                            var a = document.createElement("div"),
                                s = document.createElement("video");
                            s.setAttribute("id", "item_" + e.index);
                            var n = document.createElement("source");
                            n.setAttribute("src", URL.createObjectURL(t)), n.setAttribute("type", t.type), s.appendChild(n), a.appendChild(s), document.querySelector(".video_wrapper").appendChild(a)
                        } else(a = document.createElement("div")).setAttribute("id", "item_" + e.index), a.setAttribute("data-plyr-provider", "youtube"), a.setAttribute("data-plyr-embed-id", e.embed_id), document.querySelector(".video_wrapper").appendChild(a)
                    }));
                    if ("vimeo" == e.provider) return new Promise((t => {
                        var a = document.createElement("div");
                        a.setAttribute("id", "item_" + e.index), a.setAttribute("data-plyr-provider", "vimeo"), a.setAttribute("data-plyr-embed-id", e.embed_id), document.querySelector(".video_wrapper").appendChild(a), t()
                    }));
                    if ("audio" == e.provider) {
                        var t = document.createElement("div");
                        (s = document.createElement("audio")).setAttribute("id", "item_" + e.index);
                        var a = document.createElement("source");
                        return localforage.getItem(e.url).then((t => {
                            t ? (a.setAttribute("src", URL.createObjectURL(t)), a.setAttribute("type", t.type)) : (a.setAttribute("src", e.url), a.setAttribute("type", e.mime_type))
                        })).then((() => {
                            s.appendChild(a), t.appendChild(s), document.querySelector(".video_wrapper").appendChild(t)
                        }))
                    }
                    var s;
                    return t = document.createElement("div"), (s = document.createElement("video")).setAttribute("id", "item_" + e.index), a = document.createElement("source"), localforage.getItem(e.url).then((t => {
                        t ? (a.setAttribute("src", URL.createObjectURL(t)), a.setAttribute("type", t.type)) : (a.setAttribute("src", e.url), a.setAttribute("type", e.mime_type))
                    })).then((() => {
                        s.appendChild(a), t.appendChild(s), document.querySelector(".video_wrapper").appendChild(t)
                    }))
                };
            return Md("div", {
                className: "video_wrapper item_player_" + a
            }, "youtube" == e.provider ? Md("div", {
                ref: t,
                id: "item_" + e.index,
                "data-plyr-provider": "youtube",
                "data-plyr-embed-id": e.embed_id
            }) : "vimeo" == e.provider ? Md("div", {
                ref: t,
                id: "item_" + e.index,
                "data-plyr-provider": "vimeo",
                "data-plyr-embed-id": e.embed_id
            }) : "local" == e.provider ? Md("div", null, Md("video", {
                className: "activity_meta video",
                ref: t,
                id: "item_" + e.index
            }, Md("source", {
                src: e.url,
                type: e.mime_type
            }))) : "audio" == e.provider ? Md("div", null, Md("audio", {
                className: "activity_meta video",
                ref: t,
                id: "item_" + e.index
            }, Md("source", {
                src: e.url,
                type: e.mime_type
            }))) : "")
        }, {
            createElement: Bd,
            render: Vd,
            useState: Xd,
            useEffect: Wd,
            Fragment: Yd
        } = wp.element, {
            dispatch: Qd,
            select: Kd
        } = wp.data, Gd = e => {
            const [t, a] = Xd({}), [s, n] = Xd(!1), [i, o] = Xd(null);
            Wd((() => {
                a(e.question), n(!0)
            }), [e.question]);
            const r = (e, s = 0, n) => {
                let i = {
                    ...t
                };
                "changed" == n && (i = e, a(i), function(e) {
                    if (null == e) return !0;
                    if ("number" == typeof e) return !0;
                    if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
                    for (var t in e)
                        if (e.hasOwnProperty(t)) return !1;
                    return !0
                }(e.marked_answer) ? null == e.marked_answer && localStorage.removeItem(e.id) : "object" == typeof e.marked_answer || Array.isArray(e.marked_answer) ? localStorage.setItem(e.id, JSON.stringify(e.marked_answer)) : localStorage.setItem(e.id, e.marked_answer))
            };
            return s ? t ? Bd(Yd, null, Bd("div", {
                className: "incourse"
            }, Bd("div", {
                className: "quiz_questions_content"
            }, Bd("div", {
                className: "question_cwrapper"
            }, Bd("div", {
                className: "question",
                "data-i": e.i
            }, Bd(br, {
                question: t,
                update: r
            }), (e => {
                switch (e.type) {
                    case "smalltext":
                        return Bd(Hi, {
                            question: e,
                            update: r
                        });
                    case "single":
                        return Bd(Vi, {
                            question: e,
                            update: r,
                            quiz_id: e.id
                        });
                    case "select":
                        return Bd(Gi, {
                            question: e,
                            update: r,
                            quiz_id: e.id
                        });
                    case "multiple":
                        return Bd(no, {
                            question: e,
                            update: r,
                            quiz_id: e.id
                        });
                    case "fillblank":
                        return Bd(ho, {
                            question: e,
                            update: r,
                            quiz_id: e.id
                        });
                    case "sort":
                        return Bd(So, {
                            question: e,
                            update: r,
                            quiz_id: e.id
                        });
                    case "match":
                        return Bd(Fo, {
                            question: e,
                            update: r,
                            quiz_id: e.id
                        });
                    case "truefalse":
                        return Bd(Wo, {
                            question: e,
                            update: r,
                            quiz_id: e.id
                        });
                    case "largetext":
                        return Bd(er, {
                            question: e,
                            update: r,
                            quiz_id: e.id
                        })
                }
            })({
                ...t
            }), t.attempted ? "" : Bd("div", {
                className: "quiz_check_answer button",
                onClick: e => {
                    (e => {
                        let t = {
                            ...e
                        };
                        n(!1), t = lr(t, null, null, null, !0), t.attempted = !0, n(!0), a(t)
                    })(t)
                }
            }, window.wplms_course_data.translations.check_answer), t.attempted ? Bd(wr, {
                question: t
            }) : "", t.attempted && t.explanation.length ? Bd("div", {
                className: "explanation"
            }, Bd("strong", null, window.wplms_course_data.translations.question_explanation), Bd("div", {
                dangerouslySetInnerHTML: {
                    __html: t.explanation
                }
            })) : "")), t.attempted && window.wplms_course_data.question_retries ? Bd("div", {
                className: "quiz_check_answer button",
                onClick: e => {
                    (() => {
                        let e = {
                            ...t
                        };
                        if (e.hasOwnProperty("original")) {
                            let t = e;
                            e = t.original, e.original = t.original, a(e)
                        }
                    })()
                }
            }, Bd("span", {
                className: "vicon vicon-reload"
            }), window.wplms_course_data.translations.retry) : ""))) : "" : Bd(wl, null)
        }, {
            createElement: Zd,
            render: ec,
            useState: tc,
            useEffect: ac,
            Fragment: sc
        } = wp.element, {
            dispatch: nc,
            select: ic
        } = wp.data;

        function oc(e) {
            if (null == e) return !0;
            if ("number" == typeof e) return !0;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }
        const rc = e => {
                const [t, a] = tc([]), [s, n] = tc(!1), [i, o] = tc(0);
                ac((() => {
                    r()
                }), [e.questions, i]);
                const r = () => {
                    n(!1);
                    let t = `${window.wplms_course_data.api_url}/course/questions/?client_id=${window.wplms_course_data.client_id}`;
                    e.hasOwnProperty("force") && e.force && (t += "&force"), fetch(t, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            questions: e.questions,
                            page: i + 1,
                            per_page: window.wplms_course_data.practice_questions
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (e.status) {
                            if (e.questions) {
                                let t = [];
                                e.questions.map((e => {
                                    let a = localStorage.getItem(e.id);
                                    !oc(a) && oc(e.marked_answer) && (function(e) {
                                        try {
                                            JSON.parse(e)
                                        } catch (e) {
                                            return !1
                                        }
                                        return !0
                                    }(a) ? e.marked_answer = JSON.parse(a) : e.marked_answer = a), t.push(e)
                                })), a(t)
                            }
                            n(!0)
                        } else console.log(e)
                    })).catch((e => {
                        n(!0), console.error("Uh oh, an error!", e), nc("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                };
                return Zd("div", {
                    className: "practice_questions"
                }, s ? t.filter(((e, t) => t < (i + 1) * window.wplms_course_data.practice_questions)).map((e => Zd(Gd, {
                    question: e,
                    i: i * window.wplms_course_data.practice_questions + t.indexOf(e) + 1
                }))) : Zd(wl, null), e.questions.length > window.wplms_course_data.practice_questions ? Zd("div", {
                    className: "buttons has-addons"
                }, i > 0 ? Zd("span", {
                    className: "button vicon vicon-angle-left",
                    onClick: () => {
                        s && o(i - 1)
                    }
                }) : "", i < Math.floor(e.questions.length / window.wplms_course_data.practice_questions) ? Zd("span", {
                    className: "button vicon vicon-angle-right",
                    onClick: () => {
                        s && o(i + 1)
                    }
                }) : "") : "")
            },
            {
                createContext: lc
            } = wp.element,
            dc = lc({
                courseStatus: {},
                current_unit_key: 0,
                update: e => {}
            }),
            {
                createElement: cc,
                render: uc,
                useState: mc,
                useEffect: pc,
                Fragment: _c,
                useContext: wc
            } = wp.element,
            {
                dispatch: vc,
                select: hc
            } = wp.data,
            fc = e => {
                const [t, a] = mc(null), [s, n] = mc(e.curriculumItem), [i, o] = mc(!1), [r, l] = mc(!1), [d, c] = mc(!1), [u, m] = mc(!1);
                wc(dc), pc((() => () => {
                    var t = new CustomEvent("unit_unloaded", {
                        detail: {
                            currentUnitKey: e.index,
                            coursestatus: e.coursestatus,
                            course: e.course,
                            user: hc("vibebp").getUser()
                        }
                    });
                    document.dispatchEvent(t)
                }), [s.id]), pc((() => {
                    if (n({
                            ...e.curriculumItem
                        }), e.curriculumItem.hasOwnProperty("meta") && e.curriculumItem.meta.hasOwnProperty("scorm_type") && e.curriculumItem.meta.scorm_type) {
                        window.scorm_page_type = "unit", window.hasOwnProperty("scorm_wplms_data") || (window.scorm_wplms_data = {});
                        let e = hc("vibebp").getUser();
                        window.scorm_wplms_data.module_id = s.id, window.scorm_wplms_data.type = "unit", window.scorm_wplms_data.user_email = e.email, window.scorm_wplms_data.user_name = e.username, window.scorm_wplms_data.token = hc("vibebp").getToken()
                    }
                }), [e.curriculumItem]), pc((() => {
                    var e, t;
                    if (document.querySelector(".wp-playlist.wp-video-playlist") && void 0 !== (e = JSON.parse(document.querySelector(".wp-playlist-script").innerHTML)) && e && e.hasOwnProperty("tracks") && e.tracks.length) {
                        document.querySelector(".wp-playlist video") && document.querySelector(".wp-playlist video").remove(), (t = document.createElement("div")).classList.add("wplms-playlist");
                        var a = document.createElement("video");
                        t.appendChild(a), document.querySelector(".wp-playlist.wp-video-playlist").parentNode.appendChild(t), setTimeout((() => {
                            new Plyr(".wplms-playlist video").source = {
                                type: "video",
                                sources: e.tracks
                            };
                            var t = document.createElement("div");
                            t.classList.add("wplms_playlist");
                            let a = document.createElement("div");
                            a.classList.add("prevnextbuttonsdiv");
                            let s = document.createElement("span");
                            s.classList.add("wp-playlist-prev-button");
                            let n = document.createElement("span");
                            n.classList.add("wp-playlist-next-button"), a.appendChild(s), a.appendChild(n), document.querySelector(".wp-playlist.wp-video-playlist").parentNode.prepend(a), n.onclick = e => {
                                _(e, "forward", "video")
                            }, s.onclick = e => {
                                _(e, "backward", "video")
                            }, e.tracks.map(((e, a) => {
                                var s = document.createElement("span");
                                s.classList.add("track"), s.setAttribute("data-url", e.src), s.innerHTML = e.title, a < 1 && s.classList.add("active"), s.onclick = t => {
                                    t.preventDefault(), document.querySelector(".wplms_playlist .track") && document.querySelectorAll(".wplms_playlist .track").forEach(((e, t) => {
                                        e.classList.remove("active")
                                    })), t.target.classList.add("active"), document.querySelector(".wplms-playlist video") && document.querySelector(".wplms-playlist video").remove();
                                    var a = document.createElement("div");
                                    a.classList.add("wplms-playlist");
                                    var s = document.createElement("video");
                                    a.appendChild(s), document.querySelector(".wp-playlist.wp-video-playlist").parentNode.appendChild(a), setTimeout((() => {
                                        new Plyr(".wplms-playlist video").source = {
                                            type: "video",
                                            sources: [e]
                                        }
                                    }), 200)
                                }, t.appendChild(s)
                            })), document.querySelector(".wp-playlist.wp-video-playlist").appendChild(t)
                        }), 200)
                    }
                    document.querySelector(".wp-playlist.wp-audio-playlist") && void 0 !== (e = JSON.parse(document.querySelector(".wp-playlist-script").innerHTML)) && e && e.hasOwnProperty("tracks") && e.tracks.length && (document.querySelector(".wp-playlist audio") && document.querySelector(".wp-playlist audio").remove(), document.querySelector(".wp-playlist-current-item") && document.querySelector(".wp-playlist-current-item").remove(), (t = document.createElement("div")).classList.add("wplms-playlist"), a = document.createElement("audio"), t.appendChild(a), document.querySelector(".wp-playlist.wp-audio-playlist").parentNode.appendChild(t), setTimeout((() => {
                        new Plyr(".wplms-playlist audio").source = {
                            type: "audio",
                            sources: e.tracks
                        };
                        var t = document.createElement("div");
                        t.classList.add("wplms_playlist");
                        let a = document.createElement("div");
                        a.classList.add("prevnextbuttonsdiv");
                        let s = document.createElement("span");
                        s.classList.add("wp-playlist-prev-button");
                        let n = document.createElement("span");
                        n.classList.add("wp-playlist-next-button"), a.appendChild(s), a.appendChild(n), document.querySelector(".wp-playlist.wp-audio-playlist").parentNode.prepend(a), n.onclick = e => {
                            _(e, "forward", "audio")
                        }, s.onclick = e => {
                            _(e, "backward", "audio")
                        }, e.tracks.map(((e, a) => {
                            var s = document.createElement("span");
                            s.classList.add("track"), s.setAttribute("data-url", e.src), s.innerHTML = e.title, a < 1 && s.classList.add("active"), s.onclick = t => {
                                t.preventDefault(), document.querySelector(".wplms_playlist .track") && document.querySelectorAll(".wplms_playlist .track").forEach(((e, t) => {
                                    e.classList.remove("active")
                                })), t.target.classList.add("active"), document.querySelector(".wplms-playlist") && document.querySelector(".wplms-playlist").remove();
                                var a = document.createElement("div");
                                a.classList.add("wplms-playlist");
                                var s = document.createElement("audio");
                                a.appendChild(s), document.querySelector(".wp-playlist.wp-audio-playlist").parentNode.appendChild(a), setTimeout((() => {
                                    let t = new Plyr(".wplms-playlist audio");
                                    t.source = {
                                        type: "audio",
                                        sources: [e]
                                    }, t.play()
                                }), 200)
                            }, t.appendChild(s)
                        })), document.querySelector(".wp-playlist.wp-audio-playlist").appendChild(t)
                    }), 200))
                }), [s]);
                const _ = (e, t, a) => {
                    if ("forward" == t) {
                        for (let e = 0; e < document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track").length; e++)
                            if (document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track")[e].classList.contains("active") && e < document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track").length - 1) {
                                document.querySelector(".wplms_playlist .track") && document.querySelectorAll(".wplms_playlist .track").forEach(((e, t) => {
                                    e.classList.remove("active")
                                })), document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track")[e + 1].classList.add("active"), document.querySelector(".wplms-playlist") && document.querySelector(".wplms-playlist").remove();
                                let t = document.createElement("div");
                                t.classList.add("wplms-playlist");
                                let s = document.createElement(a);
                                t.appendChild(s), document.querySelector(".wp-playlist.wp-" + a + "-playlist").parentNode.appendChild(t), setTimeout((() => {
                                    let t = new Plyr(".wplms-playlist " + a);
                                    t.source = {
                                        type: a,
                                        sources: [{
                                            src: document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track")[e + 1].getAttribute("data-url")
                                        }]
                                    }, t.play()
                                }), 200);
                                break
                            }
                    } else
                        for (let e = document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track").length - 1; e >= 0; e--)
                            if (document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track")[e].classList.contains("active") && 0 != e) {
                                document.querySelector(".wplms_playlist .track") && document.querySelectorAll(".wplms_playlist .track").forEach(((e, t) => {
                                    e.classList.remove("active")
                                })), document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track")[e - 1].classList.add("active"), document.querySelector(".wplms-playlist") && document.querySelector(".wplms-playlist").remove();
                                var s = document.createElement("div");
                                s.classList.add("wplms-playlist");
                                var n = document.createElement(a);
                                s.appendChild(n), document.querySelector(".wp-playlist.wp-" + a + "-playlist").parentNode.appendChild(s), setTimeout((() => {
                                    let t = new Plyr(".wplms-playlist " + a);
                                    t.source = {
                                        type: a,
                                        sources: [{
                                            src: document.querySelectorAll(".wp-" + a + "-playlist .wplms_playlist .track")[e - 1].getAttribute("data-url")
                                        }]
                                    }, t.play()
                                }), 200);
                                break
                            }
                };
                let w = "";
                if (s.meta.hasOwnProperty("video") && "object" == typeof s.meta.video && "video" == s.meta.video.type) {
                    let e = s.meta.video.url.split(".");
                    w = "mov" === e[e.length - 1] ? "video/mp4" : "video/" + e[e.length - 1]
                }
                if (s.meta.hasOwnProperty("audio") && "object" == typeof s.meta.audio && "audio" == s.meta.audio.type) {
                    let e = s.meta.audio.url.split(".");
                    switch (e[e.length - 1]) {
                        case "m4a":
                            w = "audio/mp4";
                            break;
                        case "oga":
                            w = "audio/ogg";
                            break;
                        default:
                            w = "audio/" + e[e.length - 1]
                    }
                }
                const v = async (t, a, n = null) => {
                    if (t) {
                        let r = {};
                        window.wplms_course_data.course.status.seek_lock && (r.listeners = {
                            seek: e => {
                                var t = i.currentTime,
                                    a = ((e, t) => "object" != typeof t || "input" !== t.type && "change" !== t.type ? Number(t) : t.target.value / t.target.max * e.media.duration)(i, e);
                                if (a > t) return e.preventDefault(), !1
                            }
                        });
                        const l = await localforage.getItem(a);
                        l && document.querySelector(".media_video_meta" + n + " source") && document.querySelector(".media_video_meta" + n + " source").setAttribute("src", URL.createObjectURL(l));
                        let d = new Plyr(t, r);
                        d.once("loadeddata", (() => {
                            let e = localStorage.getItem(a);
                            e && e <= d.duration && (d.currentTime = e), o({
                                plyr: d,
                                url: a
                            })
                        })), null === n || s.status || d.once("ended", (t => {
                            e.update({
                                index: n,
                                src: a,
                                event: t
                            }, "videosended")
                        }))
                    }
                };
                p((() => {
                    void 0 !== i.player && i.player.on("playing", (() => {
                        localStorage.setItem(i.url, i.player.currentTime)
                    }))
                }), 500, [i, r]);
                const h = (e, t) => {
                        let a = {
                            ...s
                        };
                        a.meta.hasOwnProperty("assignments") && a.meta.assignments.length && a.meta.assignments[t] && (a.meta.assignments[t].show = e), n(a)
                    },
                    f = (t, a) => {
                        "complete" == a && e.update({
                            assignmentIndex: t.assignmentIndex
                        }, "completeUnitAssigmnent"), "retake" == a && e.update({
                            assignmentIndex: t.assignmentIndex
                        }, "retakeUnitAssigmnent")
                    },
                    g = e => {
                        e && !t && a(e)
                    },
                    y = (t, a) => {
                        e.update(a, "mediaended")
                    };
                let b = [],
                    k = [];
                if (s.meta.hasOwnProperty("video") && "object" == typeof s.meta.video) {
                    if ("youtube" == s.meta.video.type) {
                        let e = s.meta.video.url.match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&|?]+)/);
                        e && e.length && (b = e[1])
                    }
                    "vimeo" == s.meta.video.type && (k = s.meta.video.url.match(/(http|https)?:\/\/(www\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^\/]*)\/videos\/|)(\d+)(?:|\/\?)/))
                }
                return cc("div", {
                    className: "course_content_content"
                }, e.hasOwnProperty("noLabels") && e.noLabels ? "" : cc(_c, null, cc("span", {
                    className: "lesson_info"
                }, cc("span", null, window.wplms_course_data.reports.module.unit + " ", e.item_number + "/" + e.total_item_count), cc("span", null, " "), cc(Ot, {
                    timestamp: s.duration,
                    notimediff: 1
                })), cc("h2", {
                    dangerouslySetInnerHTML: {
                        __html: s.title
                    }
                })), cc("div", null, s.meta.hasOwnProperty("access") && s.meta.access || !s.meta.hasOwnProperty("drip_time") ? s.meta.hasOwnProperty("video") && "object" == typeof s.meta.video && !Array.isArray(s.meta.video) ? "youtube" == s.meta.video.type ? cc("div", null, b && b.length ? cc(Rd, {
                    provider: "youtube",
                    index: e.index,
                    embed_id: b,
                    url: s.meta.video.url,
                    update: y
                }) : "") : "vimeo" == s.meta.video.type && void 0 !== k && k && void 0 !== k[4] && k[4] ? cc("div", null, cc(Rd, {
                    provider: "vimeo",
                    index: e.index,
                    embed_id: k[4],
                    url: s.meta.video.url,
                    update: y
                })) : cc("div", null, cc(Rd, {
                    provider: "local",
                    index: e.index,
                    src: s.meta.video.url,
                    mime_type: w,
                    url: s.meta.video.url,
                    video: s.meta.video,
                    update: y
                })) : s.meta.hasOwnProperty("audio") && "object" == typeof s.meta.audio && !Array.isArray(s.meta.audio) && s.meta.audio.url.length ? cc("div", null, cc(Rd, {
                    provider: "audio",
                    index: e.index,
                    src: s.meta.audio.url,
                    mime_type: w,
                    url: s.meta.audio.url,
                    video: s.meta.audio,
                    update: y
                })) : s.meta.hasOwnProperty("package") ? cc("div", {
                    className: "unit_iframe_wrapper"
                }, cc("iframe", {
                    src: s.meta.package.src,
                    width: "100%",
                    height: "100%",
                    frameborder: "0",
                    allowfullscreen: "allowfullscreen"
                })) : cc("div", {
                    className: s.type + "" + s.id
                }) : cc(kl, {
                    start: !0,
                    duration: s.meta.drip_time,
                    update: (t, a) => {
                        "expired" == a && e.update({
                            index: e.index
                        }, "loadunit")
                    },
                    quiz_id: e.index
                })), s.meta && s.meta.hasOwnProperty("access") && s.meta.access && s.meta.hasOwnProperty("video") && s.meta.video.length ? cc("div", {
                    className: "unit_videos"
                }, s.meta.video.map(((e, t) => cc("div", {
                    className: "video_wrapper"
                }, cc("video", {
                    className: "activity_meta video media_video_meta" + t,
                    ref: a => v(a, e, t)
                }, cc("source", {
                    src: e,
                    type: "video/mp4"
                })))))) : "", s.meta && s.meta.hasOwnProperty("access") && s.meta.access && s.meta.hasOwnProperty("audio") && s.meta.audio.length ? cc("div", {
                    className: "unit_videos"
                }, s.meta.audio.map(((e, t) => cc("div", {
                    className: "video_wrapper"
                }, cc("audio", {
                    className: "activity_meta video media_video_meta" + t,
                    ref: a => v(a, e, t)
                }, cc("source", {
                    src: e,
                    type: "audio/mpeg"
                })))))) : "", s.meta && s.meta.hasOwnProperty("access") && s.meta.access && s.meta.hasOwnProperty("iframes") && s.meta.iframes.length ? cc("div", {
                    className: "unit_iframes"
                }, s.meta.iframes.map(((e, t) => "object" == typeof e && e.hasOwnProperty("value") ? cc("div", {
                    className: "unit_iframe_wrapper " + e.shortcode
                }, cc("iframe", {
                    src: e.value,
                    width: "560",
                    height: "315",
                    frameborder: "0",
                    allowfullscreen: "allowfullscreen"
                })) : cc("div", {
                    className: "unit_iframe_wrapper"
                }, cc("iframe", {
                    src: e,
                    width: "560",
                    height: "315",
                    frameborder: "0",
                    allowfullscreen: "allowfullscreen"
                }))))) : "", s.hasOwnProperty("unit_type") && "elementor" === s.unit_type ? (() => {
                    if (s.meta.hasOwnProperty("access") && s.meta.access && s.hasOwnProperty("meta") && s.meta.hasOwnProperty("link") && s.meta.link.length) {
                        let e = s.meta.link;
                        return e.includes("?") ? e += "&token=" + hc("vibebp").getToken() : e += "?token=" + hc("vibebp").getToken(), cc("div", {
                            className: "wplms_iframe_wrapper"
                        }, cc("iframe", {
                            src: e,
                            width: "100%"
                        }))
                    }
                    return cc("div", {
                        dangerouslySetInnerHTML: {
                            __html: s.content
                        },
                        ref: g
                    })
                })() : cc("div", {
                    dangerouslySetInnerHTML: {
                        __html: s.content
                    },
                    ref: g
                }), s.meta && s.meta.hasOwnProperty("access") && s.meta.access && s.meta.attachments && s.meta.attachments.length ? cc("div", {
                    className: "unit_attachments"
                }, cc("h3", null, window.wplms_course_data.translations.attachments), s.meta.attachments.map(((e, t) => {
                    return cc("div", {
                        className: "attachment"
                    }, cc("span", null, "application/pdf" == (a = e.type) ? cc("span", {
                        className: "attachment_icon",
                        dangerouslySetInnerHTML: {
                            __html: window.wplms_course_data.course.attachment_types["application/pdf"]
                        }
                    }) : "image/jpeg" == a ? cc("span", {
                        className: "attachment_icon",
                        dangerouslySetInnerHTML: {
                            __html: window.wplms_course_data.course.attachment_types["image/jpeg"]
                        }
                    }) : "video/mp4" == a ? cc("span", {
                        className: "attachment_icon",
                        dangerouslySetInnerHTML: {
                            __html: window.wplms_course_data.course.attachment_types["video/mp4"]
                        }
                    }) : "application/pdf" == a || "application/pdf" == a ? "" : cc("span", {
                        className: "attachment_icon",
                        dangerouslySetInnerHTML: {
                            __html: window.wplms_course_data.course.attachment_types.default
                        }
                    }), cc("strong", {
                        dangerouslySetInnerHTML: {
                            __html: e.name
                        }
                    })), cc("a", {
                        href: e.link,
                        target: "_blank",
                        className: "vicon vicon-download"
                    }));
                    var a
                }))) : "", s.meta && s.meta.hasOwnProperty("access") && s.meta.access && s.meta.attachments && s.meta.assignments.length ? cc("div", {
                    className: "unit_assignments"
                }, cc("h3", null, window.wplms_course_data.translations.assignments), s.meta.assignments.map(((t, a) => cc("div", {
                    className: "assignment"
                }, cc("div", {
                    className: "assignment_heading"
                }, cc("span", null, t.title), cc("div", {
                    className: "assignment_meta"
                }, t && t.hasOwnProperty("show") && t.show ? cc("a", {
                    className: "vicon vicon-minus",
                    onClick: () => {
                        h(!1, a)
                    }
                }) : cc("a", {
                    className: "vicon vicon-plus",
                    onClick: () => {
                        h(!0, a)
                    }
                }))), t.show ? cc("div", {
                    className: "assignment_content_wrapper"
                }, cc(Ld, {
                    assignment: t,
                    assignmentIndex: a,
                    index: a,
                    unitIndex: e.index,
                    update: f
                })) : "")))) : "", s.meta.hasOwnProperty("pratice_questions") && s.meta.pratice_questions.length ? cc("div", {
                    className: "pratice_questions"
                }, cc(rc, {
                    questions: s.meta.pratice_questions
                })) : "")
            },
            {
                createElement: gc,
                render: yc,
                useState: bc,
                useEffect: kc,
                useContext: xc,
                Fragment: Nc,
                RawHTML: qc
            } = wp.element,
            {
                select: Oc,
                dispatch: Ic
            } = wp.data,
            Cc = e => {
                const t = xc(f),
                    [a, s] = bc(!1),
                    [n, i] = bc("view"),
                    [o, r] = bc(e.field),
                    [l, d] = bc(!1),
                    [c, u] = bc(0),
                    [m, p] = bc(!1),
                    [_, w] = bc(!1),
                    [h, g] = bc(!1),
                    [y, b] = bc({}),
                    [k, x] = bc({}),
                    [N, q] = bc(""),
                    [O, I] = bc(e.curriculum);
                kc((() => {
                    I(O)
                }), [e.curriculum]), kc((() => {
                    let a = {
                        ...e.field
                    };
                    if (i("view"), !e.hasOwnProperty("editFields")) {
                        let s = t.course[e.tabIndex].fields[e.fieldIndex].curriculum_elements,
                            n = s[s.findIndex((t => t.type == e.field.type))].types;
                        s.findIndex((t => t.type == e.field.type)) > -1 && n.findIndex((t => t.id == e.field.data.type)) > -1 && e.field.data.hasOwnProperty("type") ? x(n[n.findIndex((t => t.id == e.field.data.type))].fields) : (x(n[0].fields), a.data.type = n[0].id)
                    }
                    r(a)
                }), [e.field]), kc((() => {
                    "view" == n && "unit" == o.type && (u(0), s(!0), fetch(`${window.wplms_create_course_data.api_url}/curriculum/getElement?force`, {
                        method: "post",
                        body: JSON.stringify({
                            type: o.type,
                            id: o.data.id,
                            token: Oc("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        s(!1), u(e), document.dispatchEvent(new Event("VibeBP_Editor_Content"))
                    })).catch((e => {
                        s(!1), console.error("Uh oh, an error!", e), Ic("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))), "edit" == n && (s(!0), fetch(`${window.wplms_create_course_data.api_url}/curriculum/getElementFields?force`, {
                        method: "post",
                        body: JSON.stringify({
                            type: o.type,
                            id: o.data.id,
                            fields: k,
                            token: Oc("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status && (x(e.fields), Array.isArray(e.fields) && e.fields.map((e => {
                            "post_content" == e.id && q({
                                post_content: e.value,
                                raw: e.raw
                            })
                        }))), s(!1)
                    })).catch((e => {
                        s(!1), console.error("Uh oh, an error!", e), Ic("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })), window.wplms_course_data.course.hasOwnProperty("admin_approval") && window.wplms_course_data.course.admin_approval && fetch(`${window.wplms_course_data.api_url}/getapproval/?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            token: Oc("vibebp").getToken(),
                            courseid: o.data.id
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status && (Ic("vibebp").addNotification({
                            text: window.wplms_course_data.translations.draft_found
                        }), b(e.approval))
                    })).catch((e => {
                        w(!1), console.error("Uh oh, an error!", e), Ic("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })))
                }), [n, o]);
                const C = e => {
                    let t = {};
                    t = e.detail.field, t.hasOwnProperty("value") && void 0 !== e.detail.editFields[e.detail.editFields.findIndex((e => e.id == t.id))] && JSON.stringify(t.value) != JSON.stringify(e.detail.editFields[e.detail.editFields.findIndex((e => e.id == t.id))].value) && (e.detail.editFields[e.detail.editFields.findIndex((e => e.id == t.id))] = t, x(e.detail.editFields))
                };
                kc((() => {
                    document.removeEventListener("wplms_custom_unit_field_value_changed", C), document.addEventListener("wplms_custom_unit_field_value_changed", C, !1)
                }), []);
                const S = (e, t) => {
                    let a = {};
                    if (a = e.hasOwnProperty("field") ? e.field : e, a.hasOwnProperty("value") && void 0 !== k[k.findIndex((e => e.id == a.id))] && JSON.stringify(a.value) != JSON.stringify(k[k.findIndex((e => e.id == a.id))].value)) {
                        let e = [...k];
                        "post_content" == a.id && q({
                            post_content: a.value,
                            raw: a.raw
                        }), e[e.findIndex((e => e.id == a.id))] = a, x(e)
                    }
                };
                let P = 0;
                if ("section" !== o.type && o.data.hasOwnProperty("type")) {
                    let e = t.course[t.course.findIndex((e => "course_curriculum" == e.id))].fields[0].curriculum_elements;
                    if (e[e.findIndex((e => e.type == o.type))].hasOwnProperty("types")) {
                        let t = e[e.findIndex((e => e.type == o.type))].types;
                        t.findIndex((e => e.id == o.data.type)) > -1 && (P = t[t.findIndex((e => e.id == o.data.type))].icon)
                    }
                }
                let E = 1,
                    z = 1;
                if (Array.isArray(O)) {
                    let e = O.filter((e => "section" != e.type));
                    E = e.length, z = e.findIndex((e => e.data.id == o.data.id)) + 1
                }
                let T = t.course[e.tabIndex].fields[e.fieldIndex].curriculum_elements;
                return gc("div", {
                    className: "element_overlay"
                }, a ? gc(Ze, null) : "view" == n ? gc(Nc, null, gc("div", {
                    className: "element_actions"
                }, gc("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: e.close
                }), gc("span", null, gc("span", {
                    className: "vicon vicon-control-shuffle tip",
                    title: window.wplms_course_data.translations.switch_type,
                    onClick: () => i("changeType")
                }), gc("span", {
                    className: "vicon vicon-pencil",
                    title: window.wplms_course_data.translations.edit,
                    onClick: () => i("edit")
                }), gc("span", {
                    className: "vicon vicon-trash",
                    title: window.wplms_course_data.translations.delete,
                    onClick: () => p(!0)
                }))), gc("div", {
                    className: "element_content"
                }, "quiz" == o.type ? gc(Nc, null, gc("h2", null, P ? gc("span", {
                    className: P
                }) : "", o.data.text), gc(id, {
                    quizid: o.data.id,
                    force: 1,
                    update: () => {}
                })) : "unit" == o.type && c ? gc(fc, {
                    curriculumItem: c,
                    curriculum: O,
                    id: o.data.id,
                    item_number: z,
                    total_item_count: E
                }) : "assignment" == o.type ? gc(Ld, {
                    assignment: o.data,
                    force: 1
                }) : ""), m ? gc("div", {
                    className: "change_data_wrapper"
                }, gc("div", {
                    className: "change_data_content"
                }, gc("span", {
                    className: "vicon vicon-close close",
                    onClick: () => p(!1)
                }), gc("h3", null, window.wplms_course_data.translations.sure_delete), gc("div", {
                    className: "popup-footer"
                }, gc("a", {
                    className: l ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        (a => {
                            !a.hasOwnProperty("data") || a.hasOwnProperty("data") && !a.data.hasOwnProperty("id") ? Ic("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error
                            }) : (d(!0), fetch(`${window.wplms_create_course_data.api_url}/deleteElement/${a.data.id}?post`, {
                                method: "post",
                                body: JSON.stringify({
                                    token: Oc("vibebp").getToken(),
                                    course_id: t.courseID
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((t => {
                                p(!1), d(!1), t.status && (e.close(), e.update(e.cindex, "deleted")), t.hasOwnProperty("message") && Ic("vibebp").addNotification({
                                    text: t.message
                                })
                            })).catch((e => {
                                d(!1), console.error("Uh oh, an error!", e), Ic("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            })))
                        })(o)
                    }
                }, window.wplms_course_data.translations.ok), gc("a", {
                    className: "button is-primary",
                    onClick: () => p(!1)
                }, window.wplms_course_data.translations.cancel)))) : "") : "edit" == n ? gc(Nc, null, gc("div", {
                    className: "element_actions"
                }, gc("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: e.close
                }), gc("span", null, gc("span", {
                    className: "vicon vicon-eye",
                    onClick: () => i("view")
                }), gc("span", {
                    className: "vicon vicon-trash",
                    onClick: () => p(!0)
                }))), gc("div", {
                    className: "element_content"
                }, !a && k.length ? gc(Nc, null, v(y) ? "" : gc("span", {
                    onClick: () => {
                        s(!0), x(y), y && y.length && y.map((e => {
                            "post_content" == e.id && q({
                                post_content: e.value,
                                raw: e.raw
                            })
                        })), setTimeout((() => {
                            s(!1), b(!1)
                        }), 500)
                    }
                }, gc("span", {
                    className: "vicon vicon-user"
                }), window.wplms_create_course_data.translations.load_instrcutor_edit), k.map(((t, a) => "elementor" == t.type ? o.data.hasOwnProperty("id") ? gc(_i, {
                    id: o.data.id
                }) : gc("a", {
                    href: "# ",
                    className: "edit_with_elementor_wrapper"
                }, window.wplms_create_course_data.translations.save_post_to_edit_with_elementor) : gc(fm, {
                    field: t,
                    fieldIndex: e.fieldIndex,
                    ufieldIndex: a,
                    editFields: k,
                    tabIndex: e.tabIndex,
                    cindex: e.cindex,
                    update: S
                })))) : ""), gc("div", {
                    className: "element_buttons"
                }, gc("a", {
                    className: _ ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        let t = {
                            post_title: "",
                            post_content: "",
                            meta: [],
                            taxonomy: []
                        };
                        k.map((e => {
                            if ("post" == e.from && "post_content" != e.id && (t[e.id] = e.value), "meta" == e.from) {
                                let a = t.meta.findIndex((t => t.meta_key == e.id)),
                                    s = e.value;
                                if ("duration" == e.type && "object" == typeof e.value) {
                                    let a = t.meta.findIndex((t => t.meta_key == e.id + "_parameter"));
                                    a > -1 ? e.value.hasOwnProperty("parameter") && (t.meta[a].meta_value = e.value.parameter) : e.value.hasOwnProperty("parameter") && t.meta.push({
                                        meta_key: e.id + "_parameter",
                                        meta_value: e.value.parameter
                                    }), e.value = e.value.value
                                }
                                if ("editor" == e.type && e.hasOwnProperty("raw")) {
                                    let a = t.meta.findIndex((t => t.meta_key == e.id + "_raw"));
                                    a > -1 ? t.meta[a].meta_value = e.raw : t.meta.push({
                                        meta_key: e.id + "_raw",
                                        meta_value: e.raw
                                    })
                                }
                                if ("quiz_questions" == e.type) {
                                    let t = {
                                        ques: [],
                                        marks: []
                                    };
                                    Array.isArray(e.value) && !e.value.hasOwnProperty("marks") && e.value.map((e => {
                                        t.ques.push(e.data.id), t.marks.push(e.marks)
                                    })), e.value = t
                                }
                                if ("multiattachments" == e.type) {
                                    let t = [];
                                    Array.isArray(e.value) && e.value.map((e => {
                                        e && e.hasOwnProperty("id") && t.push(e.id)
                                    })), e.value = t
                                }
                                a > -1 ? t.meta[a].meta_value = e.value : t.meta.push({
                                    meta_key: e.id,
                                    meta_value: e.value
                                }), e.value = s
                            }
                            if ("taxonomy" == e.from) {
                                let a = t.taxonomy.findIndex((t => t.taxonomy == e.id));
                                a > -1 ? t.taxonomy[a].value = e.value : t.taxonomy.push({
                                    taxonomy: e.id,
                                    value: e.value
                                }), sessionStorage.removeItem(e.id)
                            }
                        }));
                        let a = t.meta.findIndex((e => "vibe_type" == e.id));
                        if (-1 == a ? t.meta.push({
                                meta_key: "vibe_type",
                                meta_value: o.data.type
                            }) : t.meta[a] = {
                                meta_key: "vibe_type",
                                meta_value: o.data.type
                            }, v(t.post_title)) return Ic("vibebp").addNotification({
                            text: window.wplms_course_data.translations.please_add_title
                        }), !1;
                        w(!0), fetch(`${window.wplms_create_course_data.api_url}/createElement/${o.type}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                type: o.type,
                                id: o.data.id,
                                ...t,
                                ...N,
                                token: Oc("vibebp").getToken(),
                                editfields: k
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((a => {
                            w(!1), a.status && (Ic("vibebp").addNotification({
                                text: a.message
                            }), e.update(t.post_title, "text"))
                        })).catch((e => {
                            w(!1), console.error("Uh oh, an error!", e), Ic("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_create_course_data.translations.save), gc("a", {
                    className: "link",
                    onClick: e.close
                }, window.wplms_create_course_data.translations.cancel)), _ ? gc("div", {
                    className: "small_message"
                }, gc("span", {
                    className: "vicon vicon-alert"
                }), window.wplms_create_course_data.translations.saving_content_message) : "") : "changeType" == n ? gc("div", {
                    className: "curriculum_elements_wrapper"
                }, gc("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        i("view")
                    }
                }), gc("div", {
                    className: "add_cpt_wrapper vibebp_form"
                }, T[T.findIndex((e => e.type == o.type))].hasOwnProperty("types") ? T[T.findIndex((e => e.type == o.type))].types.map((a => gc("div", {
                    className: o.data.hasOwnProperty("type") && o.data.type == a.id ? "add_cpt_type active" : "add_cpt_type",
                    onClick: () => {
                        h || (a => {
                            let s = {
                                ...o
                            };
                            g(a.id), fetch(`${window.wplms_create_course_data.api_url}/createElement/${s.type}?post`, {
                                method: "post",
                                body: JSON.stringify({
                                    type: s.type,
                                    id: s.data.id,
                                    meta: [{
                                        meta_key: "vibe_type",
                                        meta_value: a.id
                                    }],
                                    token: Oc("vibebp").getToken()
                                })
                            }).then((e => e.json())).then((n => {
                                if (g(!1), n.status) {
                                    s.data.type = a.id, r(s), e.update({
                                        cindex: e.cindex,
                                        type: a.id
                                    }, "changetype");
                                    let o = t.course[e.tabIndex].fields[e.fieldIndex].curriculum_elements,
                                        l = o[o.findIndex((e => e.type == s.type))].types;
                                    o.findIndex((e => e.type == s.type)) > -1 && l.findIndex((e => e.id == s.data.type)) > -1 && s.data.hasOwnProperty("type") && x(l[l.findIndex((e => e.id == s.data.type))].fields), i("edit"), Ic("vibebp").addNotification({
                                        text: n.message
                                    })
                                }
                            }))
                        })(a)
                    }
                }, h == a.id ? gc(Ze, null) : gc(Nc, null, -1 == a.icon.indexOf("<svg") ? gc("span", {
                    className: a.icon
                }) : gc("span", {
                    dangerouslySetInnerHTML: {
                        __html: a.icon
                    }
                }), a.label)))) : "")) : gc(Ze, null))
            },
            {
                createElement: Sc,
                render: Pc,
                useState: Ec,
                useEffect: zc,
                useContext: Tc,
                Fragment: Lc,
                useCallback: Mc
            } = wp.element,
            {
                dispatch: $c,
                select: jc
            } = wp.data,
            Ac = e => {
                const t = Tc(f),
                    [a, s] = Ec(e.field),
                    [n, i] = Ec(!1),
                    [o, r] = Ec(0),
                    [l, d] = Ec([]),
                    [m, _] = Ec([]),
                    [w, v] = Ec(!1),
                    [h, g] = Ec(""),
                    [y, b] = Ec({}),
                    [k, x] = Ec({
                        value: "",
                        raw: []
                    }),
                    [N, q] = Ec({
                        post_title: "",
                        post_content: "",
                        type: "",
                        taxonomy: [],
                        meta: []
                    }),
                    [O, I] = Ec(!1),
                    [C, S] = Ec(!1),
                    [P, E] = Ec(!1),
                    [z, T] = Ec(""),
                    [L, M] = Ec(!1),
                    [$, j] = Ec([]),
                    [A, D] = Ec(!1),
                    [H, U] = Ec([]),
                    [F, J] = Ec([]),
                    [R, B] = Ec([]),
                    [V, X] = Ec([]),
                    [W, Y] = Ec({
                        meta_value: "",
                        raw: []
                    });
                let Q = jc("vibebp").getUser();
                Q.token = jc("vibebp").getToken(), zc((() => {
                    let a = {
                        ...e.field
                    };
                    e.field.hasOwnProperty("curriculum") && e.field.curriculum.length ? e.field.hasOwnProperty("currentEditingunitIndex") || t.update({
                        field: e.field.curriculum.length - 1,
                        fieldIndex: e.fieldIndex
                    }, "currentEditingunitIndex") : a.curriculum = [], s(a), i(!0), q({
                        post_title: "",
                        post_content: "",
                        type: "",
                        taxonomy: [],
                        meta: []
                    }), d([]), v(!1)
                }), [e.field]), zc((() => {}), [t.field]), p((() => {
                    "string" == typeof h && h.length && z.length > 3 && (M(!0), fetch(`${window.wplms_create_course_data.api_url}/selectcpt/${h}?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            search: z,
                            token: Q.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        M(!1), e.status && j(e.posts)
                    })).catch((e => {
                        M(!1), console.error("Uh oh, an error!", e), $c("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })))
                }), 500, [z]);
                const K = (e, a) => {
                        if ("curriculumchanged" == a) {
                            let a = {
                                field: e.field,
                                cindex: e.cindex,
                                fieldIndex: e.fieldIndex
                            };
                            e.hasOwnProperty("ufieldIndex") && (a.setting_index = e.ufieldIndex), t.update(a, "curriculumchanged")
                        }
                    },
                    G = e => {
                        if (!c(N)) {
                            let t = {
                                ...N
                            };
                            if (c(t.post_title)) return $c("vibebp").addNotification({
                                text: window.wplms_course_data.translations.please_add_title
                            }), !1;
                            if (E(!0), W.meta_value.length) {
                                let e = t.meta.findIndex((e => e.meta_key == W.meta_key));
                                if (e < 0) t.meta.push({
                                    meta_key: W.meta_key,
                                    meta_value: W.meta_value
                                }), t.meta.push({
                                    meta_key: W.meta_key + "_raw",
                                    meta_value: W.raw
                                });
                                else {
                                    t.meta[e] = {
                                        meta_key: W.meta_key,
                                        meta_value: W.meta_value
                                    };
                                    let a = t.meta.findIndex((e => e.meta_key == W.meta_key + "_raw"));
                                    a < 0 ? t.meta.push({
                                        meta_key: W.meta_key + "_raw",
                                        meta_value: W.raw
                                    }) : t.meta[a] = {
                                        meta_key: W.meta_key + "_raw",
                                        meta_value: W.raw
                                    }
                                }
                            }
                            if (t.hasOwnProperty("meta") && t.meta.length) {
                                let e = t.meta.findIndex((e => "vibe_quiz_questions" == e.meta_key));
                                if (e > -1 && Array.isArray(t.meta[e].meta_value)) {
                                    let a = {
                                        ques: [],
                                        marks: []
                                    };
                                    t.meta[e].meta_value.map((e => {
                                        a.ques.push(e.data.id), a.marks.push(e.marks)
                                    })), t.meta[e].meta_value = a
                                }
                                let a = t.meta.findIndex((e => "vibe_unit_attachments" == e.meta_key));
                                if (a > -1 && Array.isArray(t.meta[a].meta_value)) {
                                    let e = [];
                                    t.meta[a].meta_value.map((t => {
                                        t && t.hasOwnProperty("id") && e.push(t.id)
                                    })), t.meta[a].meta_value = e
                                }
                                let s = t.meta.findIndex((e => "vibe_practice_questions" == e.meta_key));
                                if (s > -1 && Array.isArray(t.meta[s].meta_value)) {
                                    let e = [];
                                    t.meta[s].meta_value.map((t => {
                                        e.push(t.data.id)
                                    })), t.meta[s].meta_value = e
                                }
                            }
                            if ("quiz" == e) {
                                let e = t.meta.findIndex((e => "vibe_duration" == e.meta_key)); - 1 == e && t.meta.push({
                                    meta_key: "vibe_duration",
                                    meta_value: "6"
                                }), e = t.meta.findIndex((e => "vibe_duration_parameter" == e.meta_key)), -1 == e && t.meta.push({
                                    meta_key: "vibe_duration_parameter",
                                    meta_value: "60"
                                })
                            }
                            t.hasOwnProperty("taxonomy") && t.taxonomy.length && t.taxonomy.map(((e, t) => {
                                e.hasOwnProperty("taxonomy") && sessionStorage.removeItem(e.taxonomy)
                            })), fetch(`${window.wplms_create_course_data.api_url}/createElement/${e}?post`, {
                                method: "post",
                                body: JSON.stringify({
                                    ...t,
                                    post_content: k.value,
                                    raw: k.raw,
                                    token: Q.token,
                                    editfields: l,
                                    type: w
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((t => {
                                E(!1), t.status && (b(t.data), Z(e, t.data)), void 0 !== t && t.hasOwnProperty("message") && $c("vibebp").addNotification({
                                    text: t.message
                                })
                            })).catch((e => {
                                E(!1), console.error("Uh oh, an error!", e), $c("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    },
                    Z = (s, n = null) => {
                        c(n) && y && y.id && (n = y);
                        let i = {
                            ...a
                        };
                        i.curriculum || (i.curriculum = []), "section" == s ? i.curriculum.push({
                            type: s,
                            data: ""
                        }) : c(n) ? i.curriculum.push({
                            data: N,
                            type: s
                        }) : i.curriculum.push({
                            data: n,
                            type: s
                        }), q({
                            post_title: "",
                            post_content: "",
                            type: "",
                            taxonomy: [],
                            meta: []
                        }), d([]), g(!1), v(!1), t.update({
                            field: i,
                            index: e.fieldIndex
                        }, "fieldvaluechanged")
                    },
                    ee = e => {
                        if (e.detail.editFields.hasOwnProperty("meta")) {
                            let t = e.detail.editFields.meta.findIndex((t => t.meta_key == e.detail.field.id));
                            t > -1 ? e.detail.editFields.meta[t].meta_value = e.detail.field.value : e.detail.editFields.meta.push({
                                meta_key: e.detail.field.id,
                                meta_value: e.detail.field.value
                            })
                        }
                        q(e.detail.editFields);
                        let t = [...l],
                            a = t.findIndex((t => t.id == e.detail.field.id));
                        a > -1 && (t[a] = e.detail.field, d(t))
                    };
                zc((() => (document.removeEventListener("wplms_custom_unit_field_value_changed", ee), document.addEventListener("wplms_custom_unit_field_value_changed", ee, !1), () => {
                    document.removeEventListener("wplms_custom_unit_field_value_changed", ee)
                })), []), zc((() => {
                    t.adHocSettings && t.adHocSettings.collapse_into_sections && r(o + 1)
                }), [t.adHocSettings]);
                let te = 0;
                return Sc(Lc, null, Sc("div", {
                    className: "course_curriculum_wrapper"
                }, Sc("div", {
                    className: h || O ? "sidecurriculum" : ""
                }, Sc("div", {
                    className: "course_curriculum"
                }, a && a.curriculum && a.curriculum.length ? a.curriculum.map(((n, i) => {
                    if (t.adHocSettings && t.adHocSettings.collapse_into_sections)
                        if (a.curriculum[i].type && "section" != a.curriculum[i].type) {
                            if (void 0 === t.adHocSettings.uncollapsed_section) return;
                            if (t.adHocSettings.uncollapsed_section != te) return
                        } else te = i;
                    return Sc("div", {
                        className: "curriculum_field_wrapper " + ("section" == a.curriculum[i].type ? "course_section" : a.curriculum[i].type)
                    }, Sc("div", {
                        className: O && O.data.id == n.id ? "curriculum_field is_active" : "curriculum_field",
                        draggable: !0,
                        style: V[i],
                        ref: e => {
                            ((e, t) => {
                                if (e) {
                                    let a = H;
                                    a[t] || (a[t] = e), U(a)
                                }
                            })(e, i)
                        },
                        onTouchStart: e => {
                            let t = [...R];
                            H.map(((e, a) => {
                                let s = e.getBoundingClientRect();
                                t[a] = s
                            })), B(t), a.curriculum[i] && D(a.curriculum[i])
                        },
                        onTouchMove: e => {
                            e.preventDefault();
                            let t = [...V];
                            if (t[i] = {
                                    transform: "translateY(" + Math.floor(e.touches[0].clientY - R[i].top) + "px)"
                                }, X(t), "touchmove" === e.type) {
                                let t = [];
                                t.push(a.curriculum[i]);
                                let s = [];
                                if (e.touches[0].clientY && R.map(((n, o) => {
                                        n.top + n.height / 2 > e.touches[0].clientY && a.curriculum[o] !== a.curriculum[i] && t.push(a.curriculum[o]), n.bottom - n.height / 2 < e.touches[0].clientY && a.curriculum[o] !== a.curriculum[i] && s.push(a.curriculum[o])
                                    })), s.length)
                                    for (let e = s.length - 1; e >= 0; e--) t.unshift(s[e]);
                                J(t)
                            }
                        },
                        onTouchEnd: s => {
                            if (F && F.length) {
                                let s = {
                                    ...a
                                };
                                s.curriculum = F, t.update({
                                    field: s,
                                    index: e.fieldIndex
                                }, "fieldvaluechanged")
                            }
                            X([]), B([]), D(!1), J([])
                        },
                        onDragStart: s => {
                            a.curriculum[i] && (D(a.curriculum[i]), t.update({
                                field: -1,
                                fieldIndex: e.fieldIndex
                            }, "currentEditingunitIndex"))
                        },
                        onDragOver: s => {
                            s.preventDefault(), ((s, n) => {
                                if (!A) return;
                                let i = a.curriculum[n];
                                if (A === i) return;
                                let o = {
                                    ...a
                                };
                                o.curriculum = o.curriculum.filter((e => e != A)), o.curriculum.splice(n, 0, A), t.update({
                                    field: o,
                                    index: e.fieldIndex
                                }, "fieldvaluechanged")
                            })(0, i)
                        },
                        onDragEnd: () => {
                            t.update({
                                field: a.curriculum.indexOf(A),
                                fieldIndex: e.fieldIndex
                            }, "currentEditingunitIndex"), D(!1)
                        }
                    }, "section" == a.curriculum[i].type ? Sc(Jn, {
                        field: a.curriculum[i],
                        fieldIndex: e.fieldIndex,
                        cindex: i,
                        update: K,
                        tabIndex: e.tabIndex,
                        currentEditingunitIndex: e.field.currentEditingunitIndex
                    }) : "unit" == a.curriculum[i].type || "quiz" == a.curriculum[i].type || "assignment" == a.curriculum[i].type ? Sc(Kn, {
                        field: a.curriculum[i],
                        show: () => {
                            I(a.curriculum[i])
                        },
                        remove: () => {
                            let n = {
                                ...a
                            };
                            n.curriculum.splice(i, 1), s(n), t.update({
                                field: n,
                                index: e.fieldIndex
                            }, "fieldvaluechanged")
                        }
                    }) : "quiz" == a.curriculum[i].type || "assignment" == a.curriculum[i].type ? Sc(Kn, {
                        field: a.curriculum[i],
                        fieldIndex: e.fieldIndex,
                        cindex: i,
                        update: K,
                        tabIndex: e.tabIndex,
                        currentEditingunitIndex: e.field.currentEditingunitIndex
                    }) : Sc("div", {
                        className: "wplms_curriculum_field"
                    }, document.dispatchEvent(new CustomEvent("wplms_curriculum_field", {
                        detail: {
                            field: e
                        }
                    })), Sc("span", {
                        className: "vicon vicon-close",
                        onClick: () => {
                            let n = {
                                ...a
                            };
                            n.curriculum.splice(i, 1), s(n), t.update({
                                field: n,
                                index: e.fieldIndex
                            }, "fieldvaluechanged")
                        }
                    }))))
                })) : ""), Sc("div", {
                    className: "add_curriculum_element"
                }, a.curriculum_elements.map((e => Sc("a", {
                    className: "button is-primary",
                    onClick: () => {
                        var t;
                        "label" == e.curriculum_type && Z(e.type), "post_type" == e.curriculum_type && (t = e.type, g(t), q({
                            post_title: "",
                            post_content: "",
                            type: "",
                            taxonomy: [],
                            meta: []
                        }))
                    }
                }, Sc("span", {
                    className: "vicon vicon-plus"
                }), " ", e.label)))))), h ? Sc("div", {
                    className: "curriculum_elements_wrapper"
                }, Sc("div", {
                    className: "add_cpt_wrapper vibebp_form"
                }, !a.curriculum_elements[a.curriculum_elements.findIndex((e => e.type == h))].hasOwnProperty("types") || N.hasOwnProperty("type") && N.type.length ? "" : a.curriculum_elements[a.curriculum_elements.findIndex((e => e.type == h))].types.map((e => Sc("div", {
                    className: N.hasOwnProperty("type") && N.type == e.id ? "add_cpt_type active" : "add_cpt_type",
                    onClick: () => {
                        let t = {
                            ...N
                        };
                        t.type = e.id, t.meta.push({
                            meta_key: "vibe_type",
                            meta_value: e.id
                        }), q(t), v(t.type), d(a.curriculum_elements[a.curriculum_elements.findIndex((e => e.type == h))].types[a.curriculum_elements[a.curriculum_elements.findIndex((e => e.type == h))].types.findIndex((e => e.id == t.type))].fields)
                    }
                }, -1 == e.icon.indexOf("<svg") ? Sc("span", {
                    className: e.icon
                }) : Sc("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.icon
                    }
                }), e.label))), a.curriculum_elements[a.curriculum_elements.findIndex((e => e.type == h))].hasOwnProperty("types") ? N.hasOwnProperty("type") && N.type ? Sc(Lc, null, Sc("div", {
                    className: "curriculum_element_wrapper vibebp_form_field " + h + "_" + N.type
                }, Sc("div", {
                    className: L ? "control is-loading " : "control"
                }, Sc("input", {
                    className: "input",
                    type: "text",
                    value: z,
                    onChange: e => {
                        T(e.target.value)
                    },
                    placeholder: window.wplms_create_course_data.translations.type_to_search
                }), Sc("span", {
                    className: "vicon vicon-search"
                })), $.length ? Sc("div", {
                    className: "cpt_search_results"
                }, $.map((e => Sc("span", {
                    onClick: () => {
                        Z(h, e)
                    }
                }, e.text)))) : "", a.curriculum_elements[a.curriculum_elements.findIndex((e => e.type == h))].types[a.curriculum_elements[a.curriculum_elements.findIndex((e => e.type == h))].types.findIndex((e => e.id == N.type))].fields.map(((t, a) => Sc(fm, {
                    field: t,
                    fieldIndex: e.fieldIndex,
                    editFields: N,
                    tabIndex: e.tabIndex,
                    update: (e, t, a) => {
                        ((e, t, a) => {
                            let s = e.field,
                                n = {
                                    ...N
                                };
                            if ("taxonomy" == s.type) {
                                let e = n.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? n.taxonomy.push({
                                    taxonomy: s.taxonomy,
                                    value: s.value
                                }) : n.taxonomy[e].value = s.value
                            }
                            if ("meta" == s.from)
                                if ("duration" == s.type) {
                                    let e = n.meta.findIndex((e => e.meta_key == s.id));
                                    e > -1 ? n.meta[e].meta_value = s.value.value : n.meta.push({
                                        meta_key: s.id,
                                        meta_value: s.value.value
                                    });
                                    let t = n.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                                    t > -1 ? n.meta[t].meta_value = s.value.parameter : n.meta.push({
                                        meta_key: s.id + "_parameter",
                                        meta_value: s.value.parameter
                                    })
                                } else if ("editor" == s.type && s.hasOwnProperty("raw")) {
                                if ("vibe_quiz_message" == s.id) return void Y({
                                    meta_key: "vibe_quiz_message",
                                    meta_value: s.value,
                                    raw: s.raw
                                })
                            } else {
                                let e = n.meta.findIndex((e => e.meta_key == s.id));
                                e > -1 ? n.meta[e].meta_value = s.value : n.meta.push({
                                    meta_key: s.id,
                                    meta_value: s.value
                                })
                            }
                            "post" == s.from && ("post_content" == s.id ? x({
                                value: s.value,
                                raw: s.raw
                            }) : n[s.id] = s.value), "post_content" != s.id && q(n);
                            let i = [...l],
                                o = i.findIndex((t => t.id == e.field.id));
                            o > -1 && (i[o] = e.field, "post" == e.field.from && "post_content" == e.field.id && (i[o] = {
                                ...e.field,
                                value: e.field.value,
                                raw: e.field.raw
                            }), d(i))
                        })(e)
                    }
                }))), Sc("span", {
                    className: "curriculum_element_actions"
                }, Sc("a", {
                    className: P ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        G(h)
                    }
                }, window.wplms_course_data.course.hasOwnProperty("admin_approval") && window.wplms_course_data.course.admin_approval && !u() ? window.wplms_create_course_data.translations.send_for_approval : window.wplms_create_course_data.translations.add_cpt[h].add), Sc("a", {
                    className: "link",
                    onClick: () => {
                        g(!1), q({
                            post_title: "",
                            post_content: "",
                            type: "",
                            taxonomy: [],
                            meta: []
                        })
                    }
                }, window.wplms_create_course_data.translations.cancel)))) : "" : Sc(Lc, null, Sc("div", {
                    className: "curriculum_element_wrapper " + N.type
                }, Sc("div", {
                    className: L ? "control is-loading " : "control"
                }, Sc("input", {
                    className: "input",
                    type: "text",
                    value: z,
                    onChange: e => {
                        T(e.target.value)
                    },
                    placeholder: window.wplms_create_course_data.translations.type_to_search
                }), Sc("span", {
                    className: "vicon vicon-search"
                })), $.length ? Sc("div", {
                    className: "cpt_search_results"
                }, $.map((e => Sc("span", {
                    onClick: () => {
                        Z(h, e), g(!1)
                    }
                }, e.text)))) : "", Sc("a", {
                    className: P ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        G(h)
                    }
                }, window.wplms_create_course_data.translations.add_cpt[h].add), Sc("a", {
                    className: "link",
                    onClick: () => {
                        g(!1), q({
                            ...N,
                            type: ""
                        })
                    }
                }, window.wplms_create_course_data.translations.cancel))))) : O ? Sc(Cc, {
                    field: O,
                    fieldIndex: e.fieldIndex,
                    tabIndex: e.tabIndex,
                    curriculum: a.curriculum,
                    close: () => {
                        I(!1)
                    },
                    cindex: a.curriculum.findIndex((e => e.data.id == O.data.id)),
                    update: (n, i) => {
                        let o = {
                            ...a
                        };
                        "text" == i && (o.curriculum[o.curriculum.findIndex((e => e.data.id == O.data.id))].data.text = n, t.update({
                            field: o,
                            index: e.fieldIndex
                        }, "fieldvaluechanged")), "deleted" == i && (o.curriculum.splice(n, 1), s(o), I(!1), t.update({
                            field: o,
                            index: e.fieldIndex
                        }, "fieldvaluechanged")), "changetype" == i && (o.curriculum[n.cindex].data.type = n.type, s(o), t.update({
                            field: o,
                            index: e.fieldIndex
                        }, "fieldvaluechanged"))
                    }
                }) : "")
            },
            {
                createElement: Dc,
                render: Hc,
                useState: Uc,
                useEffect: Fc,
                useContext: Jc,
                Fragment: Rc,
                useRef: Bc
            } = wp.element,
            {
                select: Vc,
                dispatch: Xc
            } = wp.data,
            Wc = e => {
                Jc(f);
                const [t, a] = Uc(!0), [s, n] = Uc(e.field), [i, o] = Uc(!1), [r, l] = Uc(!1), [d, c] = Uc({
                    paged: 1,
                    s: ""
                }), [u, m] = Uc(""), [_, w] = Uc({
                    package_type: "",
                    name: ""
                }), [h, g] = Uc(!1), [y, b] = Uc([]), [k, x] = Uc(!0), [N, q] = Uc(!1), [O, I] = Uc(!1), [C, S] = Uc([]), [P, E] = Uc(!0), [z, T] = Uc(!1), L = Bc(null);
                Fc((() => {
                    E(!0);
                    let t = {
                        ...e.field
                    };
                    if (v(e.field.value)) n(t), E(!1);
                    else {
                        let e = {
                            ..._
                        };
                        t.hasOwnProperty("value") && t.value.hasOwnProperty("package_type") && (e.package_type = t.value.package_type), t.hasOwnProperty("value") && t.value.hasOwnProperty("name") && (e.name = t.value.name), n(t), w(e), a(!1), E(!1)
                    }
                }), [e.field]), p((() => {
                    fetch(`${window.wplms_create_course_data.api_url}/getUploadedPackages?force`, {
                        method: "post",
                        body: JSON.stringify({
                            ...d,
                            token: Vc("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (e.status)
                            if (N) {
                                let t = [...y, ...e.packages];
                                t.length < parseInt(e.total) ? x(!0) : x(!1), b(t), q(!1)
                            } else b(e.packages), parseInt(e.total) > e.packages.length ? x(!0) : x(!1);
                        else m(e.message)
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), Xc("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), 500, [d]);
                const M = e => {
                    let t = {
                        ...s
                    };
                    e.hasOwnProperty("type") && (e.package_type = e.type), _.hasOwnProperty("package_type") && (e.package_type = _.package_type), t.value = e, n(t)
                };
                return P ? Dc(Ze, null) : Dc("div", {
                    className: "course_upload_wrapper"
                }, t ? Dc(Rc, null, Dc("div", {
                    className: "curriculum_type_wrapper"
                }, s.upload_elements.length ? s.upload_elements.map((e => Dc("div", {
                    className: _.package_type == e.type ? "active curriculum_type" : "curriculum_type",
                    onClick: () => {
                        w({
                            ..._,
                            package_type: e.type
                        })
                    }
                }, Dc("span", {
                    className: e.icon
                }), Dc("span", null, e.label)))) : ""), _.hasOwnProperty("package_type") && _.package_type.length ? Dc("div", {
                    className: "course_upload_package_wrapper"
                }, Dc("label", {
                    for: "course_upload_package",
                    className: "upload_box"
                }, Dc("span", {
                    className: "vicon vicon-upload"
                }), _.hasOwnProperty("name") && _.name.length ? _.name : window.wplms_create_course_data.translations.upload_package, i ? Dc("div", {
                    className: "vibebp_progress_wrapper"
                }, Dc("span", {
                    className: "progress_wrapper"
                }, Dc("span", {
                    className: "progress_bar",
                    style: {
                        width: i + "%"
                    }
                })), Dc("span", null, i, "%")) : ""), Dc("input", {
                    id: "course_upload_package",
                    type: "file",
                    ref: L,
                    accept: ".zip,.rar,.7zip",
                    onChange: () => {
                        w({
                            ..._,
                            name: L.current.files[0].name
                        });
                        let e = {
                            ...s
                        };
                        e.value = {
                            ..._
                        }, n(e), I(!1), S(L.current.files)
                    }
                }), Dc("div", {
                    className: "upload_package_actions"
                }, r ? Dc("div", {
                    className: "existing_packages_wrapper"
                }, Dc("div", {
                    className: "existing_packages_header"
                }, Dc("input", {
                    type: "text",
                    value: d.s,
                    placeholder: window.wplms_create_course_data.translations.search_package,
                    onChange: e => c({
                        ...d,
                        s: e.target.value
                    })
                }), Dc("span", {
                    className: "vicon vicon-close",
                    onClick: () => l(!1)
                })), Dc("div", {
                    className: "existing_packages"
                }, y.length ? Dc(Rc, null, y.map((e => Dc("div", {
                    className: e == s.value ? "package active" : "package"
                }, Dc("div", {
                    className: "package_name",
                    onClick: () => {
                        s.value == e ? n({
                            ...s,
                            value: !1
                        }) : M(e)
                    }
                }, Dc("span", {
                    className: s.upload_elements[s.upload_elements.findIndex((t => t.type == e.type))].icon
                }), Dc("span", null, e.name)), Dc("span", {
                    className: "vicon vicon-trash",
                    onClick: () => {
                        g(e)
                    }
                })))), k ? Dc("span", {
                    className: "link",
                    onClick: () => {
                        q(!0), c({
                            ...d,
                            paged: d.paged + 1
                        })
                    }
                }, window.wplms_create_course_data.translations.load_more) : "") : u.length ? Dc("div", {
                    className: "vbp_message"
                }, u) : "")) : Dc("a", {
                    className: "button is-link",
                    onClick: () => l(!0)
                }, window.wplms_create_course_data.translations.select_existing_package), s.hasOwnProperty("value") && s.value.hasOwnProperty("path") ? Dc("a", {
                    className: "button is-primary",
                    onClick: () => {
                        e.update(s, e.fieldIndex, "fieldvaluechanged"), a(!1)
                    }
                }, Dc("span", {
                    className: "vicon vicon-check-box"
                }), " ", window.wplms_create_course_data.translations.set_package) : Dc("a", {
                    className: O ? "button is-primary is-loader" : "button is-primary",
                    onClick: () => {
                        if (!C.length) return void Xc("vibebp").addNotification({
                            text: window.wplms_create_course_data.translations.package_file_missing
                        });
                        I(!0);
                        let e = C[0].size / 1024 / 1024;
                        if (tus.isSupported && tus.canStoreURLs && e > 1) {
                            const e = `${window.vibebp.api.url}/user/upload_media_stream?upload`;
                            let t = new tus.Upload(C[0], {
                                endpoint: e,
                                chunkSize: 2097152,
                                retryDelays: [0, 3e3],
                                metadata: {
                                    token: Vc("vibebp").getToken(),
                                    filename: C[0].name,
                                    filetype: C[0].type,
                                    args: JSON.stringify(_)
                                },
                                onError: function(e) {
                                    e.hasOwnProperty("message") && Xc("vibebp").addNotification({
                                        text: e.message
                                    })
                                },
                                onProgress: function(e, t) {
                                    console.log("@");
                                    var a = (e / t * 100).toFixed(2);
                                    o(a)
                                },
                                onSuccess: function() {
                                    localStorage.removeItem(t._urlStorageKey), t.url = t.url.replace("?upload", ""), fetch(`${t.url}/complete_stream?upload`, {
                                        method: "post",
                                        body: JSON.stringify({
                                            token: Vc("vibebp").getToken()
                                        })
                                    }).then((e => e.ok ? e.json() : {
                                        status: 0,
                                        message: window.wplms_course_data.translations.error_loading_data
                                    })).then((e => {
                                        e.status && M(e.package), e.hasOwnProperty("message") && Xc("vibebp").addNotification({
                                            text: e.message
                                        })
                                    })).catch((e => {
                                        console.error("Uh oh, an error!", e), Xc("vibebp").addNotification({
                                            text: window.wplms_course_data.translations.error_loading_data
                                        })
                                    }))
                                }
                            });
                            t.findPreviousUploads().then((e => {
                                e.length > 0 && t.resumeFromPreviousUpload(e[0]), t.start()
                            })), tus.Upload.terminate(e).then((function() {})).catch((function(e) {
                                console.log(e)
                            }))
                        } else {
                            var t = new FormData;
                            t.append("body", JSON.stringify({
                                args: _,
                                token: Vc("vibebp").getToken()
                            })), t.append("file", C[0]), fetch(`${window.wplms_create_course_data.api_url}/uploadPackage?post&upload`, {
                                method: "post",
                                body: t
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                if (I(!1), e.status) {
                                    let t = {
                                        ...s
                                    };
                                    t.value = e.package;
                                    let a = [...y];
                                    a.unshift(e.package), b(a), n(t)
                                } else e.hasOwnProperty("message") && Xc("vibebp").addNotification({
                                    text: e.message
                                })
                            })).catch((e => {
                                I(!1), console.error("Uh oh, an error!", e), Xc("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    }
                }, window.wplms_create_course_data.translations.upload_package))) : "") : Dc("div", {
                    className: "uploaded_package"
                }, Dc("span", {
                    onClick: () => {
                        w({}), n({
                            ...s,
                            value: {}
                        }), a(!0)
                    }
                }, Dc("span", {
                    className: "vicon vicon-pencil-alt"
                })), Dc("i", {
                    className: s.upload_elements.findIndex((e => e.type == s.value.package_type)) > -1 ? s.upload_elements[s.upload_elements.findIndex((e => e.type == s.value.package_type))].icon : s.upload_elements[0].icon
                }), Dc("strong", null, s.value.name)), h ? Dc("div", {
                    className: "question_pop_wrapper",
                    onClick: e => {
                        e.preventDefault(), document.querySelector(".question_pop_wrapper") && e.target === document.querySelector(".question_pop_wrapper") && g(!1)
                    }
                }, Dc("div", {
                    className: "question_pop"
                }, Dc("div", {
                    className: "edit_question"
                }, Dc("div", {
                    className: "question_wrapper"
                }, window.wplms_course_data.translations.sure_delete, Dc("div", {
                    className: "question_actions"
                }, Dc("a", {
                    className: z ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        T(!0), fetch(`${window.wplms_create_course_data.api_url}/deletePackage?post`, {
                            method: "post",
                            body: JSON.stringify({
                                package: h,
                                token: Vc("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            if (T(!1), e.status) {
                                let e = [...y];
                                if (e.splice(e.findIndex((e => e.path == h.path)), 1), b(e), void 0 !== s.value && h == s.value) {
                                    w({});
                                    let e = {
                                        ...s
                                    };
                                    e.value = {}, n(e)
                                }
                            } else e.hasOwnProperty("message") && Xc("vibebp").addNotification({
                                text: e.message
                            });
                            g(!1)
                        })).catch((e => {
                            g(!1), console.error("Uh oh, an error!", e), Xc("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.yes), Dc("a", {
                    className: "link",
                    onClick: () => {
                        g(!1)
                    }
                }, window.wplms_course_data.translations.cancel)))))) : "")
            },
            {
                createElement: Yc,
                render: Qc,
                useState: Kc,
                useEffect: Gc,
                Fragment: Zc,
                useContext: eu
            } = wp.element,
            {
                dispatch: tu,
                select: au
            } = wp.data,
            su = e => {
                const [t, a] = Kc(!1), [s, n] = Kc([]), [i, o] = Kc([]), [r, l] = Kc(!1), [d, c] = Kc(!1), [u, m] = Kc(0), [_, w] = Kc(null), [v, h] = Kc([]), [f, g] = Kc("media"), [y, b] = Kc({
                    posts_per_page: 20,
                    paged: 1,
                    search_terms: "",
                    orderby: "",
                    post_mime_type: void 0 !== e.type ? e.type : null
                }), [k, x] = Kc({
                    name: "",
                    url: "",
                    type: "file"
                });
                p((() => {
                    _ && _.abort();
                    let e = {},
                        t = new AbortController;
                    _ && (e = {
                        signal: t.signal
                    }), w(t), a(!0), fetch(`${window.vibebp.api.url}/user/fetch_media?nocache`, {
                        method: "post",
                        ...e,
                        body: JSON.stringify({
                            ...y,
                            token: au("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (a(!1), e.status)
                            if (d) {
                                let t = [...s];
                                e.data.map((e => {
                                    t.push(e)
                                })), n(t), c(!1), t.length < parseInt(e.total) ? l(!0) : l(!1)
                            } else n(e.data), e.data.length < parseInt(e.total) ? l(!0) : l(!1)
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), tu("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), 500, [y]);
                const N = t => {
                    e.share(t)
                };
                Gc((() => {
                    tu("vibebp").setData("mediaTab", f), -1 == v.indexOf(f) && (document.dispatchEvent(new CustomEvent("vibebp_media_tab", {
                        detail: {
                            tab: f
                        }
                    })), document.addEventListener("vibebp_media_tab_submit", (t => {
                        e.share(t.detail.media), e.close(!1)
                    }), !1), h([...v, f]))
                }), [f]);
                const q = e => {
                    switch (e.type) {
                        case "image":
                            return Yc("img", {
                                src: e.url,
                                className: "content_to_html_image"
                            });
                        case "video":
                            return Yc("video", {
                                class: "video_plyr"
                            }, Yc("source", {
                                src: e.url,
                                type: "video/mp4"
                            }));
                        case "audio":
                            return Yc("audio", {
                                class: "audio_plyr",
                                controls: !0
                            }, Yc("source", {
                                src: e.url,
                                type: "audio/mp3"
                            }));
                        default:
                            if (void 0 !== e.url && e.type) return e.url.split(".pdf").length > 1 ? Yc("div", {
                                className: "embed_block_wrapper"
                            }, Yc("embed", {
                                width: "200px",
                                height: "300px",
                                controls: !0,
                                type: "application/pdf",
                                src: e.url
                            }), Yc("div", {
                                className: "embed_block"
                            })) : Yc("div", {
                                className: "embed_block_wrapper"
                            }, Yc("a", {
                                href: e.url
                            }, Yc("span", {
                                className: "vicon vicon-clip"
                            })))
                    }
                };
                return Yc("div", {
                    className: "vibe_editor_modal"
                }, Yc("span", {
                    onClick: e.close
                }), Yc("div", {
                    className: "ve_modal-content"
                }, Yc("div", {
                    className: "ve_modal-header"
                }, Yc("div", null, window.vibebp.settings.media_tabs ? Object.keys(window.vibebp.settings.media_tabs).map((t => {
                    if ("upload" != t || !window.vibebp.settings.hasOwnProperty("upload_capability") || !window.vibebp.settings.upload_capability) return Yc("a", {
                        className: f == t ? "active" : "",
                        onClick: () => {
                            g(t)
                        }
                    }, window.vibebp.settings.media_tabs[t]);
                    {
                        let a = au("vibebp").getUser();
                        if (void 0 !== a && a.hasOwnProperty("caps") && void 0 !== a.caps) {
                            let s = 0;
                            if (Array.isArray(a.caps) ? a.caps.findIndex(((e, t) => e == window.vibebp.settings.upload_capability)) > -1 && (s = 1) : "object" == typeof a.caps && Object.keys(a.caps).map(((e, t) => {
                                    e === window.vibebp.settings.upload_capability && a.caps[e] && (s = 1)
                                })), e.hasOwnProperty("allow_upload") && e.allow_upload && (s = 1), s) return Yc("a", {
                                className: f == t ? "active" : "",
                                onClick: () => {
                                    g(t)
                                }
                            }, window.vibebp.settings.media_tabs[t])
                        }
                    }
                })) : ""), Yc("span", {
                    className: "vicon vicon-close",
                    onClick: t => {
                        e.close(!1)
                    }
                })), Yc("div", {
                    className: "ve_modal-body"
                }, "media" === f ? Yc(Zc, null, Yc("div", {
                    className: "vibebp_form"
                }, Yc("div", {
                    className: "vibebp_form_field"
                }, Yc("input", {
                    type: "text",
                    placeholder: window.vibebp.translations.search_text,
                    onChange: e => b({
                        ...y,
                        search_terms: e.target.value
                    })
                })), Yc("div", {
                    className: "vibebp_form_field"
                }, Yc("select", {
                    onChange: e => {
                        b({
                            ...y,
                            order: e.target.value
                        })
                    }
                }, Object.keys(window.vibeEditor.media_order).map((e => Yc("option", {
                    value: e
                }, window.vibeEditor.media_order[e])))))), t && !d ? Yc("div", {
                    class: "lds-ellipsis"
                }, Yc("div", null), Yc("div", null), Yc("div", null), Yc("div", null)) : s && s.length ? Yc("div", {
                    className: "allMedia"
                }, s.map(((t, a) => Yc("div", {
                    className: "single_media"
                }, Yc("span", {
                    onClick: a => {
                        N(t), e.close(!1)
                    }
                }, q(t)), Yc("span", {
                    className: "filename",
                    onClick: a => {
                        N(t), e.close(!1)
                    }
                }, t.name), Yc("span", {
                    className: "vicon vicon-close",
                    onClick: () => (e => {
                        let t = [...s];
                        t.splice(t.findIndex((t => t.id == e.id)), 1), n(t), fetch(`${window.vibebp.api.url}/user/delete_media?post`, {
                            method: "post",
                            body: JSON.stringify({
                                token: au("vibebp").getToken(),
                                media: e
                            })
                        }).then((e => e.json())).then((e => {
                            e.hasOwnProperty("message") && tu("vibebp").addNotification({
                                text: e.message
                            })
                        }))
                    })(t)
                }))))) : Yc("div", {
                    className: "vbp_message"
                }, window.vibebp.translations.no_media), d && t ? Yc("div", {
                    class: "lds-ellipsis"
                }, Yc("div", null), Yc("div", null), Yc("div", null), Yc("div", null)) : r ? Yc("a", {
                    className: "link",
                    onClick: () => {
                        b({
                            ...y,
                            paged: y.paged + 1
                        }), c(!0)
                    }
                }, window.vibebp.translations.more) : "") : "upload" === f ? Yc(Zc, null, Yc("div", {
                    className: "upload_media"
                }, Yc("label", {
                    for: "vibe_editor_upload_media"
                }, u ? Yc("div", {
                    className: "vibebp_progress_wrapper"
                }, Yc("span", {
                    className: "progress_wrapper"
                }, Yc("span", {
                    className: "progress_bar",
                    style: {
                        width: u + "%"
                    }
                })), Yc("span", null, u, "%")) : Yc("span", {
                    className: "vicon vicon-plus"
                })), Yc("input", {
                    type: "file",
                    id: "vibe_editor_upload_media",
                    onChange: e => (e => {
                        if (e.target.files[0]) {
                            let t = e.target.files[0].size / 1024 / 1024;
                            if (tus.isSupported && tus.canStoreURLs && t > 4) {
                                const t = `${window.vibebp.api.url}/user/upload_media_stream?upload`;
                                let a = new tus.Upload(e.target.files[0], {
                                    endpoint: t,
                                    chunkSize: 2097152,
                                    retryDelays: [0, 3e3],
                                    metadata: {
                                        token: au("vibebp").getToken(),
                                        filename: e.target.files[0].name,
                                        filetype: e.target.files[0].type
                                    },
                                    onError: function(e) {
                                        e.hasOwnProperty("message") && tu("vibebp").addNotification({
                                            text: e.message
                                        })
                                    },
                                    onProgress: function(e, t) {
                                        var a = (e / t * 100).toFixed(2);
                                        m(a), 100 == a && setTimeout((() => {
                                            b({
                                                posts_per_page: 20,
                                                paged: 1,
                                                search_terms: "",
                                                orderby: ""
                                            }), m(0), g("media")
                                        }), 500)
                                    },
                                    onSuccess: function() {
                                        localStorage.removeItem(a._urlStorageKey), a.url = a.url.replace("?upload", ""), fetch(`${a.url}/complete_stream?nocache`, {
                                            method: "post",
                                            body: JSON.stringify({
                                                token: au("vibebp").getToken()
                                            })
                                        }).then((e => e.ok ? e.json() : {
                                            status: 0,
                                            message: window.wplms_course_data.translations.error_loading_data
                                        })).then((e => {
                                            e.status && (b({
                                                posts_per_page: 20,
                                                paged: 1,
                                                search_terms: "",
                                                orderby: ""
                                            }), m(0), g("media")), e.hasOwnProperty("message") && tu("vibebp").addNotification({
                                                text: e.message
                                            })
                                        })).catch((e => {
                                            console.error("Uh oh, an error!", e), tu("vibebp").addNotification({
                                                text: window.wplms_course_data.translations.error_loading_data
                                            })
                                        }))
                                    }
                                });
                                a.findPreviousUploads().then((e => {
                                    e.length > 0 && a.resumeFromPreviousUpload(e[0]), a.start()
                                })), tus.Upload.terminate(t).then((function() {})).catch((function(e) {}))
                            } else {
                                let t = new FormData;
                                t.append("file", e.target.files[0]), t.append("body", JSON.stringify({
                                    token: au("vibebp").getToken()
                                })), fetch(`${window.vibebp.api.url}/user/upload_media?post&upload`, {
                                    method: "post",
                                    body: t
                                }).then((e => e.ok ? e.json() : {
                                    status: 0,
                                    message: window.wplms_course_data.translations.error_loading_data
                                })).then((e => {
                                    if (e.status) {
                                        let t = [...s];
                                        t.unshift(e.data), n(t), g("media")
                                    } else e.hasOwnProperty("message") && tu("vibebp").addNotification({
                                        text: e.message
                                    })
                                })).catch((e => {
                                    console.error("Uh oh, an error!", e), tu("vibebp").addNotification({
                                        text: window.wplms_course_data.translations.error_loading_data
                                    })
                                }))
                            }
                        }
                    })(e)
                }), i && i.length ? Yc("div", {
                    className: "uploaded"
                }, Yc("strong", null, window.vibebp.translations.uploaded_media), Yc("div", {
                    className: "uploaded_files"
                }, i.map(((e, t) => Yc("div", {
                    className: "single_media",
                    onClick: t => {
                        N(e)
                    }
                }, q(e)))))) : "")) : "embed" === f ? Yc(Zc, null, Yc("div", {
                    className: "embed_media"
                }, Yc("label", {
                    for: "vibe_editor_embed_name"
                }, " ", window.vibebp.translations.enter_emabed_name, " "), Yc("input", {
                    type: "text",
                    id: "vibe_editor_embed_name",
                    onChange: e => x({
                        ...k,
                        name: e.target.value
                    })
                }), Yc("label", {
                    for: "vibe_editor_embed_url"
                }, " ", window.vibebp.translations.enter_embed_url, " "), Yc("input", {
                    type: "text",
                    id: "vibe_editor_embed_url",
                    onChange: e => x({
                        ...k,
                        url: e.target.value
                    })
                }), Yc("select", {
                    onChange: e => x({
                        ...k,
                        type: e.target.value
                    }),
                    value: k.type
                }, Object.keys(window.vibeEditor.embed_types).map((e => Yc("option", {
                    value: e
                }, window.vibeEditor.embed_types[e])))), Object.values(k).findIndex((e => "" == e || null == e)) > -1 ? "" : Yc("button", {
                    className: "button is-primary",
                    onClick: () => {
                        N(k), e.close(!1)
                    }
                }, window.vibebp.translations.embed))) : Yc("div", null, (O = new CustomEvent("vibebp_media_tab", {
                    detail: {
                        tab: f
                    }
                }), document.dispatchEvent(O), Yc("div", {
                    className: f
                }))))));
                var O
            },
            {
                createElement: nu,
                render: iu,
                useState: ou,
                useEffect: ru,
                Fragment: lu,
                useContext: du,
                useRef: cu
            } = wp.element,
            {
                dispatch: uu,
                select: mu
            } = wp.data,
            pu = e => {
                du(f);
                const [t, a] = ou(!1), [s, n] = ou({}), [i, o] = ou(!1), [r, l] = ou(!1), [d, c] = ou(!1), [u, m] = ou([]), [p, _] = ou(null), [w, v] = ou(null);
                ru((() => {
                    t ? document.querySelector(".vibebp_myprofile") && document.querySelector(".vibebp_myprofile").classList.remove("popup_active") : document.querySelector(".vibebp_myprofile") && document.querySelector(".vibebp_myprofile").classList.add("popup_active")
                }), [t]), ru((() => {
                    e.hasOwnProperty("media") && (e.field.value = e.media), e.field.hasOwnProperty("type") && n(e.field)
                }), [e.field]), ru((() => {
                    if (s.hasOwnProperty("value") && s.value && s.value.hasOwnProperty("type") && p) {
                        if ("audio" == s.value.type || "video" == s.value.type) {
                            let e = new Plyr(p);
                            v(e)
                        }
                        if ("youtube" == s.value.type) {
                            let e = new Plyr(p);
                            v(e)
                        }
                        if ("vimeo" == s.value.type) {
                            let e = new Plyr(p);
                            v(e)
                        }
                        if ("dash" == s.value.type) {
                            dashjs.MediaPlayer().create().initialize(p, s.value.url, !0);
                            let e = new Plyr(p, {
                                captions: {
                                    active: !0,
                                    update: !0
                                }
                            });
                            v(e)
                        }
                        if ("hls" == s.value.type) {
                            const e = new Plyr(p, {
                                captions: {
                                    active: !0,
                                    update: !0
                                }
                            });
                            if (Hls.isSupported()) {
                                const e = new Hls;
                                e.loadSource(s.value.url), e.attachMedia(p)
                            } else p.src = s.value.url;
                            v(e)
                        }
                    }
                }), [p, s]);
                const h = e => {
                    e && _(e)
                };
                return nu("div", {
                    className: "media_wrapper"
                }, s && s.hasOwnProperty("value") && s.value && s.value.hasOwnProperty("url") ? nu("div", {
                    className: "media_file"
                }, nu("span", {
                    className: "vicon vicon-close",
                    onClick: () => {
                        let t = {
                            ...s
                        };
                        o(!1), l(!1), w && (w.destroy(), v(null)), t.value = null, n(t), e.update(t, e.fieldIndex, "fieldvaluechanged")
                    }
                }), nu("div", null, " ", (() => {
                    if (s.hasOwnProperty("value") && s.value && s.value.hasOwnProperty("type") && s.value.hasOwnProperty("url")) switch (s.value.type) {
                        case "image":
                            return nu("img", {
                                src: s.value.url,
                                className: "content_to_html_image"
                            });
                        case "video":
                            return nu("div", {
                                className: "video_wrapper"
                            }, nu("video", {
                                className: "content_to_html_video",
                                ref: e => {
                                    e && _(e)
                                }
                            }, nu("source", {
                                src: s.value.url,
                                type: "video/mp4"
                            })));
                        case "audio":
                            return nu("div", {
                                className: "video_wrapper"
                            }, nu("audio", {
                                className: "content_to_html_audio",
                                ref: e => {
                                    e && _(e)
                                }
                            }, nu("source", {
                                src: s.value.url,
                                type: "audio/mp3"
                            })), " ");
                        case "youtube":
                            let e = (e => {
                                var t = e.match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&|?]+)/);
                                return !(!t || !t.length) && t[1]
                            })(s.value.url);
                            return e ? nu("div", {
                                className: "video_wrapper"
                            }, nu("div", {
                                ref: e => {
                                    e && _(e)
                                },
                                "data-plyr-provider": "youtube",
                                "data-plyr-embed-id": e
                            })) : nu("div", {
                                className: "video_wrapper"
                            }, " ", nu("span", {
                                className: "vicon vicon-alert"
                            }, window.wplms_course_data.translations.invalid_url));
                        case "vimeo":
                            let t = s.value.url.match(/(http|https)?:\/\/(www\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^\/]*)\/videos\/|)(\d+)(?:|\/\?)/);
                            return nu("div", {
                                className: "video_wrapper"
                            }, " ", nu("div", {
                                ref: e => {
                                    e && _(e)
                                },
                                "data-plyr-provider": "vimeo",
                                "data-plyr-embed-id": t[4]
                            }));
                        case "hls":
                            if ("m3u8" == s.value.url.split(".").pop()) return nu("div", {
                                className: "video_wrapper"
                            }, nu("video", {
                                ref: h,
                                controls: !0,
                                crossorigin: !0,
                                playsinline: !0
                            }));
                            break;
                        case "dash":
                            if ("mpd" == s.value.url.split(".").pop()) return nu("div", {
                                className: "video_wrapper"
                            }, nu("video", {
                                ref: h,
                                controls: !0,
                                crossorigin: !0,
                                playsinline: !0
                            }));
                            break;
                        default:
                            if (void 0 !== s.value.url && s.value.hasOwnProperty("type")) return s.value.url.split(".pdf").length > 1 ? nu("div", {
                                className: "embed_block_wrapper"
                            }, nu("embed", {
                                width: "200px",
                                height: "300px",
                                controls: !0,
                                type: "application/pdf",
                                src: s.value.url.url
                            }), nu("div", {
                                className: "embed_block"
                            })) : nu("div", {
                                className: "embed_block_wrapper"
                            }, nu("a", {
                                href: s.value.url.url
                            }, nu("span", {
                                className: "vicon vicon-clip"
                            }), nu("span", null, s.value.name)))
                    }
                })(), " ")) : "course_featured" == s.type ? nu("div", {
                    onClick: () => {
                        a(!0)
                    }
                }, nu("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "100%",
                    height: "100%",
                    viewBox: "0 0 24 24",
                    fill: "none",
                    stroke: "currentColor",
                    "stroke-width": "2",
                    "stroke-linecap": "round",
                    "stroke-linejoin": "round",
                    class: "feather feather-image"
                }, nu("rect", {
                    x: "3",
                    y: "3",
                    width: "18",
                    height: "18",
                    rx: "2",
                    ry: "2"
                }), nu("circle", {
                    cx: "8.5",
                    cy: "8.5",
                    r: "1.5"
                }), nu("polyline", {
                    points: "21 15 16 10 5 21"
                }))) : "featured_video" == s.type ? nu("div", {
                    className: "featured_video"
                }, nu("span", {
                    onClick: () => {
                        o(!1)
                    }
                }, s.label), i && !r ? nu("input", {
                    type: "text",
                    placeholder: window.wplms_create_course_data.translations.enter_video_link + " (" + i + ")",
                    value: s.value ? s.value.url : "",
                    className: r ? "is-success" : "is-danger",
                    onChange: t => {
                        if (c(!1), "youtube" == i)
                            if (/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&|?]+)/.test(t.target.value)) {
                                l(!0);
                                let a = {
                                    ...s
                                };
                                a.value = {
                                    type: "youtube",
                                    url: t.target.value
                                }, n(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                            } else l(!1);
                        if ("vimeo" == i)
                            if (/(http|https)?:\/\/(www\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^\/]*)\/videos\/|)(\d+)(?:|\/\?)/.test(t.target.value)) {
                                l(!0);
                                let a = {
                                    ...s
                                };
                                a.value = {
                                    type: "vimeo",
                                    url: t.target.value
                                }, n(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                            } else l(!1);
                        if ("hls" == i)
                            if ("m3u8" == t.target.value.split(".").pop()) {
                                l(!0);
                                let a = {
                                    ...s
                                };
                                a.value = {
                                    type: "hls",
                                    url: t.target.value
                                }, n(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                            } else l(!1);
                        if ("dash" == i)
                            if ("mpd" == t.target.value.split(".").pop()) {
                                l(!0);
                                let a = {
                                    ...s
                                };
                                a.value = {
                                    type: "dash",
                                    url: t.target.value
                                }, n(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                            } else l(!1)
                    }
                }) : nu("div", {
                    className: "featured_video_options"
                }, nu("span", {
                    className: "vicon vicon-control-play",
                    onClick: () => {
                        c(!1), a(!0)
                    }
                }), nu("span", {
                    className: "vicon vicon-youtube",
                    onClick: () => o("youtube")
                }), nu("span", {
                    className: "vicon vicon-vimeo-alt",
                    onClick: () => o("vimeo")
                }), window.wplms_create_course_data.settings.advanced_video_format_hls ? nu("span", {
                    className: "vicon vicon-video-clapper",
                    onClick: () => o("hls")
                }) : "", window.wplms_create_course_data.settings.advanced_video_format_dash ? nu("span", {
                    className: "vicon vicon-video-clapper",
                    onClick: () => o("dash")
                }) : "", window.wplms_create_course_data.settings.advanced_video_format_360 ? nu("span", {
                    className: "vicon vicon-loop",
                    onClick: () => {
                        c("360"), a(!0)
                    }
                }) : "")) : "featured_audio" == s.type ? nu("div", {
                    className: "featured_video",
                    onClick: () => {
                        a(!0)
                    }
                }, s.label, nu("span", {
                    className: "vicon vicon-control-play"
                })) : nu("div", {
                    className: "vicon vicon-plus",
                    onClick: () => {
                        a(!0)
                    }
                }), t ? nu("div", null, (() => {
                    document.querySelector("#vibemediamodal") && document.querySelector("#vibemediamodal").remove();
                    let t = document.createElement("div");
                    t.setAttribute("id", "vibemediamodal"), document.body.appendChild(t), iu(nu(su, {
                        type: e.type,
                        close: () => {
                            a(!1), document.querySelector("#vibemediamodal").remove()
                        },
                        share: t => {
                            (t => {
                                let a = {
                                    ...s
                                };
                                d && (t.videotype = d), a.value = t, n(a), console.log(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                            })(t)
                        }
                    }), document.getElementById("vibemediamodal"))
                })()) : "")
            },
            {
                createElement: _u,
                render: wu,
                useState: vu,
                useEffect: hu,
                Fragment: fu,
                useContext: gu
            } = wp.element,
            {
                dispatch: yu,
                select: bu
            } = wp.data,
            ku = e => {
                const [t, a] = vu({});
                hu((() => {
                    a(e.field)
                }), [e.field]);
                const s = (s, n, i) => {
                    if ("fieldvaluechanged" == i) {
                        let i = {
                            ...t
                        };
                        s.value && s.value.hasOwnProperty("url") ? i.value[n] = s.value : i.value.splice(n, 1), a(i), e.update(i, e.fieldIndex, "fieldvaluechanged")
                    }
                };
                return _u("div", {
                    className: "multimedia"
                }, _u("span", {
                    className: "vicon vicon-plus button",
                    onClick: () => {
                        let e = {
                            ...t
                        };
                        e.hasOwnProperty("value") && Array.isArray(e.value) || (e.value = []), e.value.push({}), a(e)
                    }
                }), t.value && t.value.length ? _u("div", {
                    className: "attachments"
                }, t.value.map(((e, a) => _u("div", {
                    className: "attachment"
                }, _u(pu, {
                    field: {
                        type: t.id
                    },
                    media: e,
                    fieldIndex: a,
                    update: s
                }))))) : "")
            },
            {
                createElement: xu,
                render: Nu,
                useState: qu,
                useEffect: Ou,
                useContext: Iu,
                Fragment: Cu,
                RawHTML: Su
            } = wp.element,
            Pu = e => {
                Iu(f);
                const [t, a] = qu(!1), [s, n] = qu({});
                Ou((() => {
                    let t = {
                        ...e.field
                    };
                    c(t.value) && (t.value = {
                        ...t.default
                    }, e.update(t, e.fieldIndex, "fieldvaluechanged")), n(t)
                }), [e.field]);
                const i = t => {
                    let a = {
                        ...s
                    };
                    a.value = t, n(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                };
                return xu("div", {
                    className: "duration_field_wrapper"
                }, t ? xu("div", {
                    className: "duration_field"
                }, xu("input", {
                    type: "text",
                    value: s.value && s.value.hasOwnProperty("value") ? s.value.value : "",
                    onChange: e => i({
                        ...s.value,
                        value: e.target.value
                    })
                }), xu("select", {
                    value: s.value && s.value.hasOwnProperty("parameter") ? s.value.parameter : 86400,
                    onChange: e => {
                        i({
                            ...s.value,
                            parameter: e.target.value
                        })
                    }
                }, window.wplms_create_course_data.duration.map((e => xu("option", {
                    value: e.value
                }, e.label)))), xu("span", {
                    className: "vicon vicon-close",
                    onClick: () => {
                        s.value.hasOwnProperty("parameter") || i({
                            ...s.value,
                            parameter: 86400
                        }), a(!t)
                    }
                })) : c(s.value) ? "number" == typeof s.default && 9999 == s.default && "object" == typeof s.default && 9999 == s.default.value ? xu("div", {
                    className: "duration_field"
                }, xu("span", null, window.wplms_create_course_data.translations.unlimited_duration), xu("span", {
                    className: "vicon vicon-pencil",
                    onClick: () => {
                        a(!0), i({
                            value: 9999,
                            parameter: 86400
                        })
                    }
                })) : xu("div", {
                    className: "duration_field"
                }, xu("span", null, xu("label", null, s.label), "object" == typeof s.default ? xu("span", null, xu("span", null, s.default.value), xu("span", null, window.wplms_create_course_data.duration.findIndex((e => e.value == s.default.parameter)) > -1 ? window.wplms_create_course_data.duration[window.wplms_create_course_data.duration.findIndex((e => e.value == s.default.parameter))].label : "")) : xu("span", null, xu("span", null, s.default), xu("select", {
                    onChange: e => {
                        i({
                            value: s.default,
                            parameter: e.target.value
                        })
                    }
                }, window.wplms_create_course_data.duration.map((e => xu("option", {
                    value: e.value
                }, e.label)))))), xu("span", {
                    className: "vicon vicon-pencil",
                    onClick: () => a(!0)
                })) : "object" == typeof s.value && 9999 == s.value.value ? xu("div", {
                    className: "duration_field"
                }, xu("span", null, window.wplms_create_course_data.translations.unlimited_duration), xu("span", {
                    className: "vicon vicon-pencil",
                    onClick: () => {
                        a(!0), i({
                            value: 9999,
                            parameter: 86400
                        })
                    }
                })) : xu("div", {
                    className: "duration_field"
                }, xu("span", null, "object" == typeof s.value ? xu("span", null, xu("span", null, s.value.value), xu("span", null, window.wplms_create_course_data.duration.findIndex((e => e.value == s.value.parameter)) > -1 ? window.wplms_create_course_data.duration[window.wplms_create_course_data.duration.findIndex((e => e.value == s.value.parameter))].label : "")) : xu("span", null, xu("span", null, s.value), xu("select", {
                    onChange: e => {
                        i({
                            value: s.default,
                            parameter: e.target.value
                        })
                    }
                }, window.wplms_create_course_data.duration.map((e => xu("option", {
                    value: e.value
                }, e.label)))))), xu("span", {
                    className: "vicon vicon-pencil",
                    onClick: () => a(!0)
                })))
            },
            {
                createElement: Eu,
                render: zu,
                useState: Tu,
                useEffect: Lu,
                useContext: Mu,
                Fragment: $u,
                RawHTML: ju
            } = wp.element,
            {
                createElement: Au,
                render: Du,
                useState: Hu,
                useEffect: Uu,
                useContext: Fu,
                Fragment: Ju,
                useCallback: Ru
            } = wp.element,
            {
                dispatch: Bu,
                select: Vu
            } = wp.data,
            Xu = e => {
                const t = Fu(f),
                    [a, s] = Hu(e.field),
                    [n, i] = Hu(!1),
                    [o, r] = Hu(0),
                    [l, d] = Hu([]),
                    [c, u] = Hu(""),
                    [m, p] = Hu({}),
                    [_, w] = Hu(!1),
                    [v, h] = Hu(!1),
                    [g, y] = Hu([]),
                    [b, k] = Hu([]);
                Vu("vibebp").getUser().token = Vu("vibebp").getToken(), Uu((() => {
                    let a = {
                        ...e.field
                    };
                    e.field.hasOwnProperty("curriculum") && e.field.curriculum.length ? e.field.hasOwnProperty("currentEditingunitIndex") || t.update({
                        field: e.field.curriculum.length - 1,
                        fieldIndex: e.fieldIndex
                    }, "currentEditingunitIndex") : (a.curriculum = [], t.course && t.course.map(((e, t) => {
                        "course_curriculum" == e.id && e.fields.length && e.fields.map(((e, t) => {
                            "vibe_course_curriculum" == e.id && e.hasOwnProperty("curriculum") && (e.curriculum.findIndex(((e, t) => "section" == e.type)) < 0 && e.curriculum.map(((t, a) => {
                                e.curriculum[a].show = !0
                            })), a.curriculum = e.curriculum)
                        }))
                    }))), e.field.hasOwnProperty("value") && e.field.value.length && Array.isArray(e.field.value) && k([...e.field.value]), s(a), i(!0)
                }), [e.field]);
                const x = (t, n) => {
                        if (a.curriculum && a.curriculum.length) {
                            let i = [...a.curriculum],
                                o = i.findIndex(((e, t) => t > n && "section" == e.type));
                            o < 0 ? o = i.length - 1 : o -= 1;
                            for (let e = n; e <= o; e++) i[e].show = t;
                            let r = {
                                ...e.field
                            };
                            r.curriculum = i, s(r)
                        }
                    },
                    N = (t, n, i) => {
                        if (a.curriculum && a.curriculum.length) {
                            let o = [...a.curriculum],
                                r = [...b];
                            if (i) {
                                let e = o.findIndex(((e, a) => a > t && "section" == e.type));
                                e < 0 ? e = o.length - 1 : e -= 1;
                                for (let a = t + 1; a <= e; a++) n ? r.indexOf(o[a].data.id) < 0 && r.push(o[a].data.id) : r.indexOf(o[a].data.id) >= 0 && r.splice(r.indexOf(o[a].data.id), 1)
                            } else n ? r.indexOf(o[t].data.id) < 0 && r.push(o[t].data.id) : r.indexOf(o[t].data.id) >= 0 && r.splice(r.indexOf(o[t].data.id), 1);
                            let l = {
                                ...a
                            };
                            l.value = r, k(r), s(l), e.update(l, e.fieldIndex, "fieldvaluechanged")
                        }
                    };
                return Au(Ju, null, Au("div", {
                    className: "course_curriculum_wrapper"
                }, Au("div", {
                    className: c || _ ? "sidecurriculum" : ""
                }, Au("div", {
                    className: "course_curriculum_partial"
                }, a && a.curriculum && a.curriculum.length ? Au("div", null, a.curriculum.map(((s, n) => {
                    let i = "";
                    if ("section" !== a.curriculum[n].type) {
                        let e = t.course[t.course.findIndex((e => "course_curriculum" == e.id))].fields[0].curriculum_elements;
                        if (void 0 !== e[e.findIndex((e => e.type == a.curriculum[n].type))] && e[e.findIndex((e => e.type == a.curriculum[n].type))] && e[e.findIndex((e => e.type == a.curriculum[n].type))].hasOwnProperty("types")) {
                            let t = e[e.findIndex((e => e.type == a.curriculum[n].type))].types;
                            t.findIndex((e => e.id == a.curriculum[n].data.type)) > -1 && (i = t[t.findIndex((e => e.id == a.curriculum[n].data.type))].icon)
                        }
                    }
                    let o = !1;
                    return "section" == a.curriculum[n].type ? o = (e => {
                        if (a.curriculum && a.curriculum.length) {
                            let t = [...a.curriculum],
                                s = [...b],
                                n = t.findIndex(((t, a) => a > e && "section" == t.type));
                            n < 0 ? n = t.length - 1 : n -= 1;
                            for (let a = e + 1; a <= n; a++)
                                if (s.indexOf(t[a].data.id) < 0) return !1;
                            return !0
                        }
                    })(n) : b.findIndex((e => e == a.curriculum[n].data.id)) > -1 && (o = !0), Au(Ju, null, "section" == a.curriculum[n].type ? Au("div", {
                        className: o ? "curriculum_element section active" : "curriculum_element section"
                    }, Au("span", {
                        onClick: () => {
                            N(n, !o, !0)
                        }
                    }, a.curriculum[n].data), Au(Ju, null, a.curriculum[n].hasOwnProperty("show") && a.curriculum[n].show ? Au("a", {
                        className: "vicon vicon-minus",
                        onClick: () => {
                            x(!1, n)
                        }
                    }) : Au("a", {
                        className: "vicon vicon-plus",
                        onClick: () => {
                            x(!0, n)
                        }
                    }))) : ("unit" == a.curriculum[n].type || "quiz" == a.curriculum[n].type || "assignment" == a.curriculum[n].type) && a.curriculum[n].hasOwnProperty("show") && a.curriculum[n].show ? Au("div", {
                        className: o ? "curriculum_element unit active" : "curriculum_element unit",
                        onClick: () => {
                            N(n, !o, !1)
                        }
                    }, Au("strong", {
                        onClick: e.show
                    }, i.length ? -1 == i.indexOf("<svg") ? Au("i", {
                        className: i
                    }) : Au("i", {
                        dangerouslySetInnerHTML: {
                            __html: i
                        }
                    }) : "", a.curriculum[n].data.text)) : "")
                }))) : ""))))
            },
            {
                createElement: Wu,
                render: Yu,
                useState: Qu,
                useEffect: Ku,
                useContext: Gu,
                Fragment: Zu
            } = wp.element,
            em = e => {
                const t = Gu(f),
                    [a, s] = Qu(e.field);
                Ku((() => {
                    let t = {
                        ...e.field
                    };
                    s(t)
                }), [e.field]), Ku((() => {
                    let a = {
                        ...e.field
                    };
                    e.field.hasOwnProperty("curriculum") && e.field.curriculum.length ? e.field.hasOwnProperty("currentEditingunitIndex") || t.update({
                        field: e.field.curriculum.length - 1,
                        fieldIndex: e.fieldIndex
                    }, "currentEditingunitIndex") : (a.curriculum = [], t.course && t.course.map(((e, t) => {
                        "course_curriculum" == e.id && e.fields.length && e.fields.map(((e, t) => {
                            "vibe_course_curriculum" == e.id && e.hasOwnProperty("curriculum") && (e.curriculum.findIndex(((e, t) => "section" == e.type)) < 0 && e.curriculum.map(((t, a) => {
                                e.curriculum[a].show = !0
                            })), a.curriculum = e.curriculum)
                        }))
                    }))), s(a)
                }), [e.field]);
                const n = (e, t) => {
                    if (a.curriculum && a.curriculum.length) {
                        let n = [...a.curriculum],
                            i = n.findIndex(((e, a) => a > t && "section" == e.type));
                        i < 0 ? i = n.length - 1 : i -= 1;
                        for (let a = t; a <= i; a++) n[a].show = e;
                        s((e => ({
                            ...e,
                            curriculum: n
                        })))
                    }
                };
                return Wu("div", {
                    className: "course_curriculum_wrapper"
                }, Wu("div", {
                    className: "course_curriculum_partial"
                }, a && a.curriculum && a.curriculum.length ? Wu("div", null, a.curriculum.map(((s, i) => {
                    let o = "";
                    if ("section" !== a.curriculum[i].type) {
                        let e = t.course[t.course.findIndex((e => "course_curriculum" == e.id))].fields[0].curriculum_elements;
                        if (void 0 !== e[e.findIndex((e => e.type == a.curriculum[i].type))] && e[e.findIndex((e => e.type == a.curriculum[i].type))] && e[e.findIndex((e => e.type == a.curriculum[i].type))].hasOwnProperty("types")) {
                            let t = e[e.findIndex((e => e.type == a.curriculum[i].type))].types;
                            t.findIndex((e => e.id == a.curriculum[i].data.type)) > -1 && (o = t[t.findIndex((e => e.id == a.curriculum[i].data.type))].icon)
                        }
                    }
                    let r = "";
                    return a.value && a.value.value && a.value.value.hasOwnProperty(a.curriculum[i].data.id) && a.value.type && "curriculum" == a.value.type && (r = a.value.value[a.curriculum[i].data.id]), Wu(Zu, null, "section" == a.curriculum[i].type ? Wu("div", {
                        className: "curriculum_element section"
                    }, Wu("span", null, a.curriculum[i].data), Wu(Zu, null, a.curriculum[i].hasOwnProperty("show") && a.curriculum[i].show ? Wu("a", {
                        className: "vicon vicon-minus",
                        onClick: () => {
                            n(!1, i)
                        }
                    }) : Wu("a", {
                        className: "vicon vicon-plus",
                        onClick: () => {
                            n(!0, i)
                        }
                    }))) : ("unit" == a.curriculum[i].type || "quiz" == a.curriculum[i].type || "assignment" == a.curriculum[i].type) && a.curriculum[i].hasOwnProperty("show") && a.curriculum[i].show ? Wu("div", {
                        className: "curriculum_element unit"
                    }, Wu("strong", {
                        onClick: e.show
                    }, o.length ? -1 == o.indexOf("<svg") ? Wu("i", {
                        className: o
                    }) : Wu("i", {
                        dangerouslySetInnerHTML: {
                            __html: o
                        }
                    }) : "", a.curriculum[i].data.text), Wu("input", {
                        type: "number",
                        value: r,
                        onChange: t => {
                            ((t, s, n) => {
                                if (a.curriculum && a.curriculum.length) {
                                    let n = [...a.curriculum],
                                        i = {
                                            type: "curriculum",
                                            value: {}
                                        };
                                    e.field.hasOwnProperty("value") && e.field.value && e.field.value.value && e.field.value.type && (i = {
                                        ...e.field.value
                                    });
                                    let o = {
                                        ...i.value
                                    };
                                    s && s >= 0 ? o[n[t].data.id] = s : o.hasOwnProperty(n[t].data.id) && delete o[n[t].data.id], i.value = o;
                                    let r = {
                                        ...a
                                    };
                                    r.value = i, e.update(r, e.fieldIndex, "fieldvaluechanged")
                                }
                            })(i, Number(t.target.value))
                        }
                    })) : "")
                }))) : ""))
            },
            {
                createElement: tm,
                render: am,
                useState: sm,
                useEffect: nm,
                useContext: im,
                Fragment: om,
                RawHTML: rm,
                useRef: lm
            } = wp.element,
            dm = e => {
                const [t, a] = sm(e.field), [s, n] = sm(null), i = lm(null);
                nm((() => {
                    a(e.field)
                }), [e.field]), nm((() => {
                    if (i.current) {
                        if (s) return void s.set("onChange", o);
                        let t = {
                            altInput: !0,
                            enableTime: !0,
                            dateFormat: "Y-m-d H:i",
                            defaultDate: e.field.hasOwnProperty("value") && parseInt(e.field.value) ? new Date(parseInt(e.field.value)) : [],
                            onChange: o
                        };
                        window.vibebp.settings.flatpickrLang && (t.locale = window.vibebp.settings.flatpickrLang);
                        let a = flatpickr(i.current, t);
                        n(a)
                    }
                }));
                const o = s => {
                    let n = {
                        ...t
                    };
                    if (s && s.length) {
                        var i = s[0].getTime();
                        n.value = i
                    } else n.value = "";
                    a(n), e.update(n, e.fieldIndex, "fieldvaluechanged")
                };
                return tm("div", {
                    className: "date"
                }, tm("input", {
                    type: "text",
                    ref: i
                }), t.hasOwnProperty("value") && t.value ? tm("span", {
                    className: "vicon vicon-close",
                    onClick: () => {
                        let a = {
                            ...t
                        };
                        a.value = null, e.update(a, e.fieldIndex, "fieldvaluechanged"), s && s.clear()
                    }
                }) : "")
            },
            {
                createElement: cm,
                render: um,
                useState: mm,
                useEffect: pm,
                useContext: _m,
                Fragment: wm,
                RawHTML: vm,
                useRef: hm
            } = wp.element,
            fm = e => {
                const t = hm(null),
                    a = _m(f),
                    [s, n] = mm({});
                pm((() => {
                    n(e.field)
                }), [e.field]);
                const i = (t, a, n) => {
                        "fieldvaluechanged" == n && (s && s.hasOwnProperty("required") && s.required && (s.hasOwnProperty("type") && "editor" == s.type && !c(m(s.value)) || s.hasOwnProperty("value") && !c(s.value)) && (s.is_warning = !1), e.hasOwnProperty("ufieldIndex") ? (console.log(t, e.ufieldIndex), e.update({
                            field: t,
                            index: a,
                            ufieldIndex: e.ufieldIndex
                        }, "fieldvaluechanged")) : e.update({
                            field: t,
                            index: a
                        }, "fieldvaluechanged")), "curriculumchanged" == n && e.update({
                            field: t,
                            cindex: a
                        }, "curriculumchanged"), "enabledrafting" == n && e.update({
                            field: t,
                            cindex: a
                        }, "enabledrafting")
                    },
                    o = () => {
                        let e = [...a.course],
                            t = 1;
                        return e[a.activeTab].hasOwnProperty("fields") && e[a.activeTab].fields.length && e[a.activeTab].fields.map(((e, s) => {
                            if (e && e.hasOwnProperty("required") && e.required)
                                if (e.hasOwnProperty("type") && "editor" == e.type && c(m(e.value))) {
                                    let e = a.course[a.activeTab].fields[s];
                                    e.is_warning = !0, a.update({
                                        index: s,
                                        field: e
                                    }, "fieldvaluechanged"), t = 0
                                } else if (void 0 === e.value || c(e.value)) {
                                let e = a.course[a.activeTab].fields[s];
                                e.is_warning = !0, a.update({
                                    index: s,
                                    field: e
                                }, "fieldvaluechanged"), t = 0
                            }
                        })), !!t
                    };
                let r = {};
                if (void 0 !== s && s && s.hasOwnProperty("is_warning") && s.is_warning) {
                    r = {
                        border: "1px solid var(--warning)",
                        padding: "1rem"
                    };
                    var l = window.scrollX,
                        d = window.scrollY;
                    window.scrollTo(l, d), t.current.scrollIntoView()
                }
                return cm(wm, null, void 0 !== s ? cm("div", {
                    className: "field_wrapper field_" + s.type,
                    style: r,
                    ref: t
                }, "next_button" != s.type && "prev_button" != s.type ? cm("span", null, s.label && "title" != s.type && "course_featured" != s.type && "next_button" != s.type && "prev_button" != s.type && "taxonomy" != s.type && "featured_video" != s.type && "group" != s.type && "forum" != s.type ? cm("label", null, s.label, s.desc ? cm("a", {
                    className: "tip_trigger",
                    onMouseEnter: e => {
                        a.update({
                            text: s.desc,
                            position: {
                                screenX: e.screenX,
                                screenY: e.screenY,
                                x: e.clientX,
                                y: e.clientY
                            }
                        }, "help")
                    },
                    onMouseLeave: () => {
                        a.update({}, "help")
                    }
                }, cm("i", {
                    className: "vicon vicon-help-alt"
                })) : "") : "", s.text ? cm("strong", null, s.text, s.hasOwnProperty("required") && s.required ? window.wplms_course_data.translations.required : "") : "") : "", cm("div", {
                    className: "field_value"
                }, ((t, n, r) => {
                    switch (s.type) {
                        case "title":
                            return cm(_e, {
                                field: t,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "taxonomy":
                            return cm(Oa, {
                                field: t,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "course_featured":
                        case "featured_image":
                            return cm(pu, {
                                field: t,
                                type: "image",
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "featured_video":
                            return cm(pu, {
                                field: t,
                                type: "video",
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "featured_audio":
                            return cm(pu, {
                                field: t,
                                type: "audio",
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "textarea":
                            return cm(L, {
                                field: t,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "editor":
                            return cm(Hs, {
                                field: t,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "next_button":
                            if (void 0 !== a.course[a.activeTab + 1]) return cm("a", {
                                className: "button major is-primary",
                                onClick: () => {
                                    let e = a.course[a.activeTab].fields.findIndex((e => "post_title" == e.id));
                                    if (e > -1)
                                        if (a.course[a.activeTab].fields[e].value && a.course[a.activeTab].fields[e].value.length) a.update(a.activeTab + 1, "setTab");
                                        else {
                                            let t = a.course[a.activeTab].fields[e];
                                            t.isEmpty = 1, t.random = Math.random(), a.update({
                                                index: e,
                                                field: t
                                            }, "fieldvaluechanged")
                                        }
                                    else o() && a.update(a.activeTab + 1, "setTab")
                                }
                            }, s.label, cm("span", null, a.course[a.activeTab + 1].fields.filter((e => e && e.hasOwnProperty("is_changed") && e.is_changed)).length + " / " + a.course[a.activeTab + 1].fields.length, " ", window.wplms_create_course_data.translations.changes));
                            if (a.hasOwnProperty("api") && a.api) return cm("a", {
                                className: "button major",
                                onClick: () => {
                                    o() && a.update({}, "createthecourse")
                                }
                            }, window.wplms_course_data.translations.save);
                            break;
                        case "prev_button":
                            if (void 0 !== a.course[a.activeTab - 1]) return cm(wm, null, a.activeTab ? cm("a", {
                                className: "button major",
                                onClick: () => {
                                    a.update(a.activeTab - 1, "setTab")
                                }
                            }, s.label, cm("span", null, a.course[a.activeTab - 1].fields.filter((e => e.hasOwnProperty("is_changed") && e.is_changed)).length + " / " + a.course[a.activeTab - 1].fields.length, " ", window.wplms_create_course_data.translations.changes)) : "");
                            break;
                        case "publish_button":
                            return cm("a", {
                                className: "button major",
                                onClick: () => {
                                    o() && a.update({}, "createthecourse")
                                }
                            }, u() ? s.label : window.wplms_course_data.course.hasOwnProperty("admin_approval") && window.wplms_course_data.course.admin_approval && !a.courseID || window.wplms_course_data.course.hasOwnProperty("admin_approval") && window.wplms_course_data.course.admin_approval && a.isDraft ? window.wplms_create_course_data.translations.send_for_approval : s.label);
                        case "unlimited_number":
                            return cm(F, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "number":
                            return cm(K, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "duration":
                            return cm(Pu, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "select":
                            return cm(ke, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "selectmulticpt":
                            return cm(In, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "multiselect":
                            return cm(Mn, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "showhide":
                        case "switch":
                        case "yesno":
                        case "conditionalswitch":
                        case "reverseconditionalswitch":
                            return cm(O, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "selectcpt":
                            return cm(hn, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "text":
                            return cm(ie, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "media":
                            return cm(pu, {
                                field: s,
                                type: "image",
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "multiattachments":
                            return cm(ku, {
                                field: s,
                                type: "image",
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "time":
                            return cm(He, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "date":
                            return cm(Ee, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "group":
                            return cm(Mt, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "forum":
                            return cm(Rt, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "curriculum":
                            return cm(Ac, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "upload_package":
                            return cm(Wc, {
                                field: s,
                                fieldIndex: n,
                                tabIndex: r,
                                update: i
                            });
                        case "assignment":
                            return cm(vt, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "quiz_questions":
                        case "unit_questions":
                            return cm($a, {
                                question: e.question,
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "practice_questions":
                            return cm(zs, {
                                question: e.question,
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "dynamic_quiz_questions":
                            return cm(rn, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "repeatable":
                        case "repeatable_count":
                            return cm(Qs, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "selectproduct":
                            return cm(Zt, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "vibe_partial_units":
                            return cm(Xu, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "gamification":
                            return cm(em, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "datetime":
                            return cm(dm, {
                                ufieldIndex: e.ufieldIndex,
                                field: s,
                                fieldIndex: n,
                                cindex: e.cindex,
                                tabIndex: r,
                                update: i
                            });
                        case "course_live":
                        case "save_course_creation_template":
                            break;
                        default:
                            var l = new CustomEvent("wplms_custom_field", {
                                detail: {
                                    field: s,
                                    index: n,
                                    courseContext: a,
                                    props: e,
                                    update: i
                                }
                            });
                            if (document.dispatchEvent(l), s && s.hasOwnProperty("id")) return cm("div", {
                                id: "wplms_custom_field_" + s.id
                            })
                    }
                    return ""
                })(s, e.fieldIndex, e.tabIndex))) : "")
            },
            {
                createElement: gm,
                render: ym,
                useState: bm,
                useEffect: km,
                useContext: xm,
                Fragment: Nm
            } = wp.element,
            {
                dispatch: qm,
                select: Om
            } = wp.data,
            Im = e => {
                const t = xm(f),
                    [a, s] = bm(!1),
                    [n, i] = bm({}),
                    [o, r] = bm({}),
                    [l, d] = bm({});
                km((() => {
                    i(t.course[t.activeTab]), s(!0)
                }), [t.course[t.activeTab]]), km((() => {
                    fetch(`${window.wplms_course_data.api_url}/getDraft/?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            token: Om("vibebp").getToken(),
                            course_id: t.courseID
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status && (qm("vibebp").addNotification({
                            text: window.wplms_course_data.translations.draft_found
                        }), r(e.draft))
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), qm("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })), window.wplms_course_data.course.hasOwnProperty("admin_approval") && window.wplms_course_data.course.admin_approval && t.courseID && fetch(`${window.wplms_course_data.api_url}/getapproval/?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            token: Om("vibebp").getToken(),
                            courseid: t.courseID
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status && (qm("vibebp").addNotification({
                            text: window.wplms_course_data.translations.draft_found
                        }), d(e.approval)), e.hasOwnProperty("is_draft") && t.update(e.is_draft, "setdraftstatus")
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), qm("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), []);
                const u = (a, s) => {
                    if ("fieldvaluechanged" == s) {
                        let s = n.fields.findIndex((e => e.id === a.field.id));
                        s > -1 && t.update({
                            field: a.field,
                            index: s
                        }, "fieldvaluechanged"), _(e.fieldIndex) || t.update({
                            field: a.field,
                            fieldIndex: e.fieldIndex,
                            index: e.index
                        }, "curriculumchangedunit")
                    }
                    "enabledrafting" == s && t.update({
                        field: a.field
                    }, "enabledrafting")
                };
                let m = [];
                return a ? gm("div", {
                    id: "create_course",
                    className: "tab_content"
                }, gm("div", {
                    className: "create_course_wrapper"
                }, gm("div", {
                    className: "create_course"
                }, gm("div", {
                    className: "create_course_left_panel"
                }, n.fields.filter((e => "aleft" == e.style)).map(((e, a) => {
                    if (!e.hasOwnProperty("is_child") || !e.is_child) return m.push(e), gm("div", {
                        class: "vibe_" + e.id
                    }, gm("div", {
                        className: (e.style, e.style)
                    }, gm(fm, {
                        field: e,
                        fieldIndex: a,
                        update: u,
                        tabIndex: t.activeTab
                    }), e.hasOwnProperty("children") && e.children.length ? e.children.map((e => {
                        let a = n.fields.findIndex((t => t && t.hasOwnProperty("id") && t.id == e));
                        return gm(fm, {
                            field: n.fields[a],
                            fieldIndex: a,
                            update: u,
                            tabIndex: t.activeTab
                        })
                    })) : ""))
                }))), gm("div", {
                    className: "create_course_right_panel"
                }, n.fields.filter((e => "aright" == e.style)).map(((e, a) => {
                    if (!e.hasOwnProperty("is_child") || !e.is_child) return m.push(e), gm("div", {
                        class: "vibe_" + e.id
                    }, gm("div", {
                        className: (e.style, e.style)
                    }, gm(fm, {
                        field: e,
                        fieldIndex: a,
                        update: u,
                        tabIndex: t.activeTab
                    }), e.hasOwnProperty("children") && e.children.length ? e.children.map((e => {
                        let a = n.fields.findIndex((t => t && t.hasOwnProperty("id") && t.id == e));
                        return gm(fm, {
                            field: n.fields[a],
                            fieldIndex: a,
                            update: u,
                            tabIndex: t.activeTab
                        })
                    })) : ""))
                })))), gm("div", {
                    className: "create_course_grid_panel"
                }, n.fields.filter((e => -1 == m.indexOf(e))).map(((e, a) => {
                    if (e.hasOwnProperty("is_child") && e.is_child);
                    else if ("next_button" != e.type) return gm("div", {
                        class: "vibe_" + e.id
                    }, gm("div", {
                        className: (e.style, e.style)
                    }, gm(fm, {
                        field: e,
                        fieldIndex: a,
                        update: u,
                        tabIndex: t.activeTab
                    }), e.hasOwnProperty("children") && e.children.length ? e.children.map((e => {
                        let a = n.fields.findIndex((t => t && t.hasOwnProperty("id") && t.id == e));
                        return gm(fm, {
                            field: n.fields[a],
                            fieldIndex: a,
                            update: u,
                            tabIndex: t.activeTab
                        })
                    })) : ""))
                }))), gm("div", {
                    className: "create_course_actions_panel"
                }, c(o) ? gm("div", {
                    className: "course_drafts"
                }) : gm("div", {
                    className: "course_drafts"
                }, gm("span", {
                    onClick: () => {
                        e.loadDraft(o), r(!1)
                    }
                }, gm("span", {
                    className: "vicon vicon-notepad"
                }), window.wplms_create_course_data.translations.load_draft), c(l) ? "" : gm("span", {
                    onClick: () => {
                        e.loadDraft(l.object), d(!1)
                    }
                }, gm("span", {
                    className: "vicon vicon-user"
                }), window.wplms_create_course_data.translations.load_instrcutor_edit)), gm("div", null, n.fields.filter((e => "next_button" == e.type)).map(((e, a) => gm("div", {
                    class: "vibe_" + e.id
                }, gm("div", {
                    className: (e.style, e.style)
                }, gm(fm, {
                    field: e,
                    fieldIndex: a,
                    update: u,
                    tabIndex: t.activeTab
                }), e.hasOwnProperty("children") && e.children.length ? e.children.map((e => {
                    let a = n.fields.findIndex((t => t && t.hasOwnProperty("id") && t.id == e));
                    return gm(fm, {
                        field: n.fields[a],
                        fieldIndex: a,
                        update: u,
                        tabIndex: t.activeTab
                    })
                })) : "")))))))) : ""
            },
            {
                createElement: Cm,
                render: Sm,
                useState: Pm,
                useEffect: Em,
                useContext: zm,
                Fragment: Tm
            } = wp.element,
            Lm = e => {
                const t = zm(f),
                    [a, s] = Pm(!1),
                    [n, i] = Pm(""),
                    [o, r] = Pm({}),
                    [l, d] = Pm({});
                Em((() => {
                    r(t.course[t.activeTab]), s(!0);
                    let e = {
                        ...l
                    };
                    t.course[t.activeTab] && t.course[t.activeTab].fields && t.course[t.activeTab].fields.length && (t.course[t.activeTab].fields.map(((t, a) => {
                        "conditionalswitch" != t.type && "reverseconditionalswitch" != t.type || t && t.hide_nodes && t.hide_nodes.length && t.hide_nodes.map((a => {
                            t.value ? e[a] = {
                                value: t.value,
                                pid: t.id
                            } : e[a] = {
                                value: null,
                                pid: t.id
                            }
                        }))
                    })), d(e))
                }), [t.course]);
                const c = (a, s) => {
                    "fieldvaluechanged" == s && (t.update({
                        field: a.field,
                        index: a.index
                    }, "fieldvaluechanged"), _(e.fieldIndex) || t.update({
                        field: a.field,
                        fieldIndex: e.fieldIndex,
                        index: e.index
                    }, "curriculumchangedunit"))
                };
                return a ? Cm("div", {
                    id: "course_settings",
                    className: "tab_content"
                }, Cm("div", {
                    className: "course_settings"
                }, o.fields.map(((e, a) => {
                    if (e.hasOwnProperty("is_child") && e.is_child);
                    else {
                        let s = "";
                        if (l && l[e.id] && (s = "conditional_display", !l[e.id].value || "H" == l[e.id].value)) return "";
                        if (!e.hasOwnProperty("hide") || !e.hide || u()) return Cm("div", {
                            className: "vibe_field vibe_" + e.id + " " + s
                        }, Cm("div", {
                            className: e.style ? e.style + " field_wrapper type_" + e.type + " " : "field_wrapper type_" + e.type + " "
                        }, Cm(fm, {
                            field: e,
                            fieldIndex: a,
                            update: c,
                            tabIndex: t.activeTab
                        }), e.hasOwnProperty("children") && e.children.length && !_(e.value) && "H" != e.value ? e.children.map((e => {
                            let a = o.fields.findIndex((t => t && t.hasOwnProperty("id") && t.id == e));
                            if (a > -1 && (!(o.fields[a] && o.fields[a].hasOwnProperty("hide") && o.fields[a].hide) || u())) return Cm(fm, {
                                field: o.fields[a],
                                fieldIndex: a,
                                update: c,
                                tabIndex: t.activeTab
                            })
                        })) : ""))
                    }
                })))) : ""
            },
            {
                createElement: Mm,
                render: $m,
                useState: jm,
                useEffect: Am,
                useContext: Dm,
                Fragment: Hm
            } = wp.element,
            Um = e => {
                const t = Dm(f),
                    [a, s] = jm(!1),
                    [n, i] = jm(""),
                    [o, r] = jm({}),
                    [l, d] = jm({});
                Am((() => {
                    r(t.course[t.activeTab]), s(!0);
                    let e = {
                        ...l
                    };
                    t.course[t.activeTab] && t.course[t.activeTab].fields && t.course[t.activeTab].fields.length && (t.course[t.activeTab].fields.map(((t, a) => {
                        "conditionalswitch" != t.type && "reverseconditionalswitch" != t.type || t && t.hide_nodes && t.hide_nodes.length && t.hide_nodes.map((a => {
                            t.value ? e[a] = {
                                value: t.value,
                                pid: t.id
                            } : e[a] = {
                                value: null,
                                pid: t.id
                            }
                        }))
                    })), d(e))
                }), [t.course]);
                const c = (a, s) => {
                    "fieldvaluechanged" == s && (t.update({
                        field: a.field,
                        index: a.index
                    }, "fieldvaluechanged"), _(e.fieldIndex) || t.update({
                        field: a.field,
                        fieldIndex: e.fieldIndex,
                        index: e.index
                    }, "curriculumchangedunit"))
                };
                return a ? Mm("div", {
                    id: "course_components",
                    className: "tab_content"
                }, Mm("div", {
                    className: "course_components"
                }, o.fields.map(((a, s) => {
                    if (a.hasOwnProperty("is_child") && a.is_child);
                    else if (!a.hasOwnProperty("hide") || !a.hide || u()) return Mm("div", {
                        className: "vibe_field vibe_" + a.id
                    }, Mm("div", {
                        className: a.style ? "component_field_wrapper " + a.style : "component_field_wrapper"
                    }, Mm(fm, {
                        field: a,
                        fieldIndex: s,
                        update: c,
                        tabIndex: t.activeTab,
                        course: e.course
                    }), a.hasOwnProperty("children") && a.children.length && !_(a.value) ? a.children.map((e => {
                        let a = o.fields.findIndex((t => t && t.hasOwnProperty("id") && t.id == e));
                        if (a > -1 && (!(o.fields[a] && o.fields[a].hasOwnProperty("hide") && o.fields[a].hide) || u())) return Mm(fm, {
                            field: o.fields[a],
                            fieldIndex: a,
                            update: c,
                            tabIndex: t.activeTab
                        })
                    })) : ""))
                })))) : ""
            },
            {
                createElement: Fm,
                render: Jm,
                useState: Rm,
                useEffect: Bm,
                useContext: Vm,
                Fragment: Xm,
                useRef: Wm
            } = wp.element,
            {
                select: Ym,
                dispatch: Qm
            } = wp.data,
            Km = e => {
                const t = Vm(f),
                    [a, s] = Rm(!1),
                    [n, i] = Rm({}),
                    [o, r] = Rm({}),
                    [l, d] = Rm(!1),
                    [c, u] = Rm(!1),
                    m = (a, s) => {
                        "fieldvaluechanged" == s && (t.update({
                            field: a.field,
                            index: a.index
                        }, "fieldvaluechanged"), _(e.fieldIndex) || t.update({
                            field: a.field,
                            fieldIndex: e.fieldIndex,
                            index: e.index
                        }, "curriculumchangedunit"))
                    };
                return Bm((() => {
                    const e = e => {
                        let t = e.detail.courseContext.course;
                        i(t[e.detail.courseContext.activeTab]), s(!1), setTimeout((() => {
                            s(!0), document.dispatchEvent(new CustomEvent("course_edit_curriculum_ready", {
                                detail: {
                                    courseContext: e.detail.courseContext
                                }
                            }))
                        }), 200)
                    };
                    return document.addEventListener("wplms_custom_field_value_changed", e), () => {
                        document.removeEventListener("wplms_custom_field_value_changed", e)
                    }
                }), [a, s]), Bm((() => {
                    i(t.course[t.activeTab]), s(!0), document.dispatchEvent(new CustomEvent("course_edit_curriculum_ready", {
                        detail: {
                            courseContext: t
                        }
                    })), 0 == l && (void 0 !== t.course[t.activeTab].fields[0].curriculum && t.course[t.activeTab].fields[0].curriculum.length && d("curriculum"), void 0 !== t.course[t.activeTab].fields[1].value && t.course[t.activeTab].fields[1].value.name && d("upload_package"));
                    let e = {
                        ...o
                    };
                    t.course[t.activeTab] && t.course[t.activeTab].fields && t.course[t.activeTab].fields.length && (t.course[t.activeTab].fields.map(((t, a) => {
                        "conditionalswitch" != t.type && "reverseconditionalswitch" != t.type || t && t.hide_nodes && t.hide_nodes.length && t.hide_nodes.map((a => {
                            t.value ? e[a] = {
                                value: t.value,
                                pid: t.id
                            } : e[a] = {
                                value: null,
                                pid: t.id
                            }
                        }))
                    })), r(e))
                }), [t.course]), console.log("render"), a ? Fm("div", {
                    className: "course_curriculum_builder_wrapper"
                }, l ? Fm("div", {
                    className: "course_curriculum_builder"
                }, Fm("span", null, Fm("a", {
                    className: "tip",
                    title: window.wplms_create_course_data.translations.change_curriculum_type,
                    onClick: () => d(!1)
                }, Fm("span", {
                    className: "vicon vicon-control-shuffle"
                })), "curriculum" == l ? Fm("a", {
                    className: "tip",
                    title: window.wplms_create_course_data.translations.collapse_into_sections,
                    onClick: () => {
                        t.adHocSettings && t.adHocSettings.collapse_into_sections ? (t.update(!1, "collapse_into_sections"), u(!1)) : (u(!0), t.update(!0, "collapse_into_sections"))
                    }
                }, Fm("span", {
                    className: c ? "vicon vicon-plus" : "vicon vicon-minus"
                })) : "", window.wplms_create_course_data.settings.hasOwnProperty("curriculum_icons") ? window.wplms_create_course_data.settings.curriculum_icons.map((e => Fm("div", {
                    className: e.key + " tip",
                    title: e.label
                }))) : ""), Fm("ul", {
                    className: "course_curriculum_builder_list"
                }, n.fields.map(((e, a) => {
                    if (!(e.type != l && "next_button" != e.type || e.hasOwnProperty("is_child") && e.is_child)) {
                        let s = "";
                        return o && o[e.id] && (s = "conditional_display", !o[e.id].value || "H" == o[e.id].value) ? "" : Fm("li", {
                            class: "vibe_" + e.id + " " + s
                        }, Fm("div", {
                            className: (e.style, e.style)
                        }, Fm(fm, {
                            field: e,
                            fieldIndex: a,
                            update: m,
                            tabIndex: t.activeTab
                        }), e.hasOwnProperty("children") && e.children.length && !_(e.value) ? e.children.map((e => {
                            let a = n.fields.findIndex((t => t && t.hasOwnProperty("id") && t.id == e));
                            return Fm(fm, {
                                field: n.fields[a],
                                fieldIndex: a,
                                update: m,
                                tabIndex: t.activeTab
                            })
                        })) : ""))
                    }
                })))) : Fm("div", {
                    className: "curriculum_type_wrapper"
                }, Fm("div", {
                    className: "curriculum_type",
                    onClick: () => {
                        if (void 0 !== t.course[t.activeTab].fields[1].value && t.course[t.activeTab].fields[1].value.name) {
                            let e = {
                                ...t.course[t.activeTab].fields[1]
                            };
                            e.value = {}, m({
                                field: e,
                                index: 1
                            }, "fieldvaluechanged")
                        }
                        d("curriculum")
                    }
                }, Fm("span", {
                    className: "vicon vicon-layout-menu-v"
                }), window.wplms_create_course_data.translations.build_curriculum), Fm("div", {
                    className: "curriculum_type",
                    onClick: () => {
                        if (void 0 !== t.course[t.activeTab].fields[0].curriculum && t.course[t.activeTab].fields[0].curriculum.length) {
                            let e = {
                                ...t.course[t.activeTab].fields[0]
                            };
                            e.curriculum = [], e.value = [], m({
                                field: e,
                                index: 0
                            }, "fieldvaluechanged")
                        }
                        d("upload_package")
                    }
                }, Fm("span", {
                    className: "vicon vicon-upload"
                }), window.wplms_create_course_data.translations.upload_package))) : ""
            },
            {
                createElement: Gm,
                render: Zm,
                useState: ep,
                useEffect: tp,
                useContext: ap,
                Fragment: sp
            } = wp.element,
            np = e => {
                const t = ap(f),
                    [a, s] = ep(!1),
                    [n, i] = ep(""),
                    [o, r] = ep({}),
                    [l, d] = ep({});
                tp((() => {
                    r(t.course[t.activeTab]), s(!0);
                    let e = {
                        ...l
                    };
                    t.course[t.activeTab] && t.course[t.activeTab].fields && t.course[t.activeTab].fields.length && (t.course[t.activeTab].fields.map(((t, a) => {
                        "conditionalswitch" != t.type && "reverseconditionalswitch" != t.type || t && t.hide_nodes && t.hide_nodes.length && t.hide_nodes.map((a => {
                            t.value ? e[a] = {
                                value: t.value,
                                pid: t.id
                            } : e[a] = {
                                value: null,
                                pid: t.id
                            }
                        }))
                    })), d(e))
                }), [t.course]);
                const c = (a, s) => {
                    "fieldvaluechanged" == s && (t.update({
                        field: a.field,
                        index: a.index
                    }, "fieldvaluechanged"), _(e.fieldIndex) || t.update({
                        field: a.field,
                        fieldIndex: e.fieldIndex,
                        index: e.index
                    }, "curriculumchangedunit"))
                };
                return a ? Gm("div", {
                    id: "course_pricing",
                    className: "tab_content"
                }, Gm("div", {
                    className: "course_pricing"
                }, o.fields.map(((a, s) => {
                    if (a.hasOwnProperty("is_child") && a.is_child);
                    else {
                        let n = "";
                        if (l && l[a.id] && (n = "conditional_display", !l[a.id].value || "H" == l[a.id].value)) return "";
                        if (!a.hasOwnProperty("hide") || !a.hide || u()) return Gm("div", {
                            class: "vibe_" + a.id + " " + n
                        }, Gm("div", {
                            className: (a.style, a.style)
                        }, Gm(fm, {
                            field: a,
                            fieldIndex: s,
                            update: c,
                            tabIndex: t.activeTab
                        }), a.hasOwnProperty("children") && a.children.length && !_(a.value) ? a.children.map((a => {
                            let s = o.fields.findIndex((e => e && e.hasOwnProperty("id") && e.id == a));
                            if (s > -1 && (!(o.fields[s] && o.fields[s].hasOwnProperty("hide") && o.fields[s].hide) || u())) return Gm(fm, {
                                field: o.fields[s],
                                fieldIndex: s,
                                update: c,
                                tabIndex: t.activeTab,
                                back: e.back
                            })
                        })) : ""))
                    }
                })))) : ""
            },
            {
                createElement: ip,
                render: op,
                useState: rp,
                useEffect: lp,
                useContext: dp,
                Fragment: cp
            } = wp.element,
            {
                dispatch: up,
                select: mp
            } = wp.data,
            pp = e => {
                const t = dp(f),
                    [a, s] = rp({});
                return lp((() => {
                    t.hasOwnProperty("help") && s(t.help)
                }), [t]), a.hasOwnProperty("position") && a.position.screenX ? ip("div", {
                    className: "wplms_create_course_help",
                    style: window.innerWidth < 1920 ? {
                        position: "fixed",
                        left: 0,
                        top: 0,
                        width: "240px",
                        transform: "translate(" + (a.position.x + 10) + "px," + (a.position.y + 10) + "px)"
                    } : {
                        transform: "translate(0," + a.position.y + "px)"
                    }
                }, ip("div", {
                    className: "wplms_create_course_help_text"
                }, a.text)) : ""
            },
            {
                createElement: _p,
                render: vp,
                useState: hp,
                useEffect: fp,
                Fragment: gp
            } = wp.element,
            {
                dispatch: yp,
                select: bp
            } = wp.data,
            kp = e => {
                let t = bp("vibebp").getUser();
                t.token = bp("vibebp").getToken();
                const [a, s] = hp(!1), [n, i] = hp(0), [o, r] = hp(!1), [l, d] = hp((() => {
                    let t = !1;
                    return e.course && (t = !0), t
                })), [c, _] = hp(!1), [w, h] = hp((() => {
                    let t = 0;
                    return e.course && (t = e.course), t
                })), [g, y] = hp(!1), [b, k] = hp({}), [x, N] = hp({}), [q, O] = hp(null), [I, C] = hp([]);
                fp((() => {
                    fetch(`${window.wplms_course_data.api_url}/gettabs/${w}?client_id=${window.wplms_course_data.client_id}?force`, {
                        method: "post",
                        body: JSON.stringify({
                            token: t.token,
                            course: I
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e && e.length && C(e)
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), yp("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), []), fp((() => {
                    const e = e => {
                        let t = e.detail.courseContext.course;
                        t[e.detail.courseContext.activeTab].fields[e.detail.index] = e.detail.field, t[e.detail.courseContext.activeTab].fields[e.detail.index].is_changed = !0, yp("vibebp").setData("CreateCourse", t), C(t)
                    };
                    return document.addEventListener("wplms_custom_field_value_changed", e), () => {
                        document.removeEventListener("wplms_custom_field_value_changed", e)
                    }
                }), [a, s]);
                const S = e => {
                    if (e <= n) return !0;
                    let t = [...I],
                        a = 1;
                    return t[n].hasOwnProperty("fields") && t[n].fields.length && t[n].fields.map(((e, s) => {
                        e && e.hasOwnProperty("required") && e.required && (e.hasOwnProperty("type") && "editor" == e.type && v(m(e.value)) || void 0 === e.value || v(e.value)) && (t[n].fields[s].is_warning = !0, C(t), a = 0)
                    })), !!a
                };
                return p((() => {
                    o && l && fetch(`${window.wplms_course_data.api_url}/


raft/?post`, {
                        method: "post",
                        body: JSON.stringify({
                            token: t.token,
                            course: I,
                            course_id: w
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status && (yp("vibebp").addNotification({
                            icon: "vicon vicon-check",
                            text: e.message
                        }), e.hasOwnProperty("course") && void 0 !== e.course && h(e.course), r(!1))
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), yp("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), 1500, [I]), _p(gp, null, I && I.length ? _p(f.Provider, {
                    value: {
                        course: I,
                        courseID: w,
                        activeTab: n,
                        help: b,
                        adHocSettings: x,
                        update: (a, s) => {
                            let o = [...I];
                            switch (s) {
                                case "fieldvaluechanged":
                                    a.field && (o[n].fields[a.index] = a.field, o[n].fields[a.index].is_changed = !0, C(o)), r(!0);
                                    break;
                                case "curriculumchanged":
                                    a.field && (o[n].fields[a.fieldIndex].is_changed = !0, o[n].fields[a.fieldIndex].curriculum[a.cindex] = a.field, a.hasOwnProperty("setting_index") && o[n].fields[a.fieldIndex].curriculum[a.cindex].hasOwnProperty("settings") && (o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.setting_index].is_changed = !0), C(o), r(!0));
                                    break;
                                case "curriculumchangedunitdata":
                                    a.field && (o[n].fields[a.fieldIndex].hasOwnProperty("curriculum") || (o[n].fields[a.fieldIndex].curriculum = []), void 0 === o[n].fields[a.fieldIndex].curriculum[a.cindex] && (o[n].fields[a.fieldIndex].curriculum[a.cindex] = {
                                        settings: []
                                    }), o[n].fields[a.fieldIndex].is_changed = !0, a.hasOwnProperty("child_index") && !v(a.child_index) && a.hasOwnProperty("value_index") && !v(a.value_index) && o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].value[a.value_index] && o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].value[a.value_index].hasOwnProperty("settings") && (o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].value[a.value_index].settings[a.child_index].is_changed = !0), r(!0), C(o));
                                    break;
                                case "curriculumchangedunit":
                                    a.field && (o[n].fields[a.fieldIndex].is_changed = !0, o[n].fields[a.fieldIndex].curriculum[a.index] = a.field, o[n].fields[a.fieldIndex].curriculum[a.index].is_changed = !0, C(o), r(!0));
                                    break;
                                case "currentEditingassignmentIndex":
                                    o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].currentEditingassignmentIndex = a.field, C(o), r(!0);
                                    break;
                                case "currentEditingquestionIndex":
                                    o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].currentEditingquestionIndex = a.field, C(o), r(!0);
                                    break;
                                case "currentEditingunitIndex":
                                    o[n].fields[a.fieldIndex].currentEditingunitIndex = a.field, C(o);
                                    break;
                                case "removecurriculum":
                                    if (o[n].fields[a.fieldIndex].curriculum && o[n].fields[a.fieldIndex].curriculum.length) {
                                        let e = [...o[n].fields[a.fieldIndex].curriculum],
                                            t = -1;
                                        parseInt(a.index) == parseInt(e.length - 1) && parseInt(e.length) >= 2 ? t = a.index - 1 : e[parseInt(a.index + 1)] && (t = a.index), o[n].fields[a.fieldIndex].curriculum.splice(a.index, 1), o[n].fields[a.fieldIndex].currentEditingunitIndex = t, o[n].fields[a.fieldIndex].is_changed = !0, r(!0)
                                    }
                                    C(o);
                                    break;
                                case "removeassigmentfromunit":
                                    o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].value && o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].value.length && (o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].value.splice(a.index, 1), o[n].fields[a.fieldIndex].is_changed = !0, o[n].fields[a.fieldIndex].curriculum[a.cindex].settings[a.ufieldIndex].is_changed = !0, r(!0)), C(o);
                                    break;
                                case "loadfull":
                                    C(a);
                                    break;
                                case "savethecourse":
                                case "createthecourse":
                                    (() => {
                                        y(1), document.querySelector(".vibebp_myprofile") && document.querySelector(".vibebp_myprofile").classList.add("popup_active");
                                        let a = {
                                            post_title: "",
                                            post_excerpt: "",
                                            post_content: "",
                                            meta: [],
                                            taxonomy: []
                                        };
                                        new Promise((e => {
                                            I.map(((t, s) => {
                                                t.fields.map((e => {
                                                    if (e.hasOwnProperty("from") && void 0 !== e.value || "curriculum" == e.type) {
                                                        if ("post" == e.from && (console.log("post", e.id), a[e.id] = e.value, "post_content" == e.id && e.hasOwnProperty("raw") && a.meta.push({
                                                                meta_key: "raw",
                                                                meta_value: e.raw
                                                            })), "meta" == e.from) {
                                                            let t = a.meta.findIndex((t => t.meta_key == e.id));
                                                            if ("duration" == e.type && "object" == typeof e.value) {
                                                                let t = a.meta.findIndex((t => t.meta_key == e.id + "_parameter"));
                                                                t > -1 && e.value.hasOwnProperty("parameter") ? a.meta[t].meta_value = e.value.parameter : e.value.hasOwnProperty("parameter") && a.meta.push({
                                                                    meta_key: e.id + "_parameter",
                                                                    meta_value: e.value.parameter,
                                                                    is_changed: e.is_changed
                                                                }), e.value = e.value.value
                                                            }
                                                            "media" == e.type && void 0 !== e.value && e.value && "object" == typeof e.value && Object.keys(e.value).length && (e.value = e.value.id), t > -1 ? a.meta[t].meta_value = e.value : a.meta.push({
                                                                meta_key: e.id,
                                                                meta_value: e.value,
                                                                is_changed: e.is_changed
                                                            })
                                                        }
                                                        if ("taxonomy" == e.type) {
                                                            let t = a.taxonomy.findIndex((t => t.taxonomy == e.taxonomy)); - 1 == t ? a.taxonomy.push({
                                                                taxonomy: e.taxonomy,
                                                                value: e.value
                                                            }) : a.taxonomy[t].value = e.value, sessionStorage.removeItem(e.taxonomy)
                                                        }
                                                        if ("upload_package" == e.type && a.meta.push({
                                                                meta_key: e.id,
                                                                meta_value: e.value,
                                                                is_changed: e.is_changed
                                                            }), "curriculum" == e.type && e.hasOwnProperty("curriculum") && e.curriculum.length) {
                                                            let t = [];
                                                            e.curriculum.map((e => {
                                                                "section" == e.type ? t.push(e.data) : e.data.hasOwnProperty("id") && t.push(e.data.id)
                                                            })), console.log("curriculum", t), a.meta.push({
                                                                meta_key: e.id,
                                                                meta_value: t,
                                                                is_changed: e.is_changed
                                                            })
                                                        }
                                                    }
                                                })), s == I.length - 1 && e()
                                            }))
                                        })).then((() => {
                                            y(2), fetch(`${window.wplms_create_course_data.api_url}/create/${w}?post`, {
                                                method: "post",
                                                body: JSON.stringify({
                                                    course: a,
                                                    object: I,
                                                    token: t.token,
                                                    course_id: w
                                                })
                                            }).then((e => e.ok ? e.json() : {
                                                status: 0,
                                                message: window.wplms_course_data.translations.error_loading_data
                                            })).then((t => {
                                                document.querySelector(".vibebp_myprofile.popup_active") && document.querySelector(".vibebp_myprofile").classList.remove("popup_active"), t.status && (h(t.course_id), y(I.length), setTimeout((() => {
                                                    e.back()
                                                }), 500)), y(!1), t.hasOwnProperty("message") && yp("vibebp").addNotification({
                                                    text: t.message
                                                })
                                            }))
                                        })).catch((e => {
                                            document.querySelector(".vibebp_myprofile.popup_active") && document.querySelector(".vibebp_myprofile").classList.remove("popup_active"), y(!1), console.error("Uh oh, an error!", e), yp("vibebp").addNotification({
                                                text: window.wplms_course_data.translations.error_loading_data
                                            })
                                        }))
                                    })();
                                    break;
                                case "setTab":
                                    i(a);
                                    break;
                                case "help":
                                    k(a);
                                    break;
                                case "setdraftstatus":
                                    _(a);
                                    break;
                                case "enabledrafting":
                                    w || a.field && a.field.hasOwnProperty("value") && a.field.value.length && fetch(`${window.wplms_course_data.api_url}/saveDraft/?post`, {
                                        method: "post",
                                        body: JSON.stringify({
                                            token: t.token,
                                            course: I,
                                            course_id: w
                                        })
                                    }).then((e => e.json())).then((e => {
                                        e.status && (yp("vibebp").addNotification({
                                            icon: "vicon vicon-check",
                                            text: e.message
                                        }), e.hasOwnProperty("course") && void 0 !== e.course && (h(e.course), d(!0)))
                                    }));
                                    break;
                                default:
                                    let l = {
                                        ...x
                                    };
                                    l[s] = a, N(l)
                            }
                        },
                        isDraft: c,
                        api: e.hasOwnProperty("api") && e.api.length ? e.api : ""
                    }
                }, _p("div", {
                    className: "wplms_create_course_overlay"
                }, _p("div", {
                    className: "wplms_create_course_wrapper"
                }, _p("div", {
                    className: "wplms_course_creation_tabs"
                }, _p("div", {
                    className: "wplms_course_creation_controls"
                }, _p("span", {
                    className: "vicon vicon-fullscreen",
                    onClick: () => {
                        document.body.classList.contains("create_fullscreen") ? document.body.classList.remove("create_fullscreen") : document.body.classList.add("create_fullscreen")
                    }
                })), e.hasOwnProperty("component") && e.component.length ? "" : _p("ul", null, (() => {
                    let e = [];
                    return I.map(((t, a) => {
                        let s = "";
                        n >= a && (s = "active"), n == a && (s += " current"), t.hasOwnProperty("hide") && t.hide && !u() || e.push(_p("li", {
                            className: t.id + " " + s,
                            onClick: e => {
                                if (e.preventDefault(), a > 0) {
                                    let e = I[0].fields.findIndex((e => "post_title" == e.id));
                                    if (e > -1)
                                        if (I[0].fields[e].hasOwnProperty("value") && I[0].fields[e].value.length) S(a) && i(a);
                                        else {
                                            let t = [...I];
                                            t[0].fields[e].isEmpty = 1, t[0].fields[e].random = Math.random(), C(t)
                                        }
                                    else S(a) && i(a)
                                } else S(a) && i(a)
                            }
                        }, _p("i", {
                            className: t.icon
                        }), _p("a", {
                            href: "#" + t.id
                        }, _p("strong", null, t.title), _p("span", null, t.subtitle))))
                    })), e
                })())), _p("div", {
                    className: "wplms_edit_course_content"
                }, "create_course" == I[n].id ? _p(Im, {
                    loadDraft: e => {
                        C(e)
                    },
                    back: () => e.back()
                }) : "course_settings" == I[n].id ? _p(Lm, null) : "course_components" == I[n].id ? _p(Um, {
                    course: w
                }) : "course_curriculum" == I[n].id ? _p(Km, null) : "course_pricing" == I[n].id ? _p(np, null) : "")), _p("div", {
                    className: "wplms_create_course_help_wrapper"
                }, _p(pp, null)))) : "", g ? _p("div", {
                    className: "saving_course_wrapper"
                }, _p("div", {
                    className: "saving_course"
                }, _p("h2", null, window.wplms_create_course_data.translations.saving_course), _p("div", {
                    className: "saving_course_elements"
                }, I.map(((e, t) => _p("div", {
                    className: "saving_course_element"
                }, _p("strong", null, e.title), _p("i", {
                    className: g >= t ? "vicon vicon-check-box" : "vicon vicon-check"
                }))))))) : "")
            },
            {
                createElement: xp,
                render: Np,
                useState: qp,
                useEffect: Op,
                useContext: Ip,
                Fragment: Cp,
                RawHTML: Sp
            } = wp.element,
            {
                dispatch: Pp,
                select: Ep
            } = wp.data,
            zp = e => {
                const [t, a] = qp({}), [s, n] = qp(!0), [i, o] = qp(!1), [r, l] = qp(!1), [d, c] = qp(!1), [u, m] = qp(!1);
                Op((() => {
                    a(e.course), n(!1)
                }), [e.course]);
                const p = () => {
                    c(!0), fetch(`${window.wplms_create_course_data.api_url}/instructor/makeoffline/${t.id}?post`, {
                        method: "post",
                        body: JSON.stringify({
                            token: Ep("vibebp").getToken(),
                            course_id: t.id,
                            offline: !t.offline
                        })
                    }).then((e => e.json())).then((s => {
                        if (c(!1), s.status) {
                            let s = {
                                ...t
                            };
                            s.offline = !s.offline, e.update(s, "offline"), a(s)
                        }
                        s.hasOwnProperty("message") && Pp("vibebp").addNotification({
                            text: s.message
                        })
                    }))
                };
                let _ = 0,
                    w = 0,
                    v = Ep("vibebp").getUser();
                return (window.wplms_course_data.wplms_course_delete && v && v.hasOwnProperty("caps") && v.caps.hasOwnProperty("manage_options") || t && t.hasOwnProperty("instructor") && t.instructor.hasOwnProperty("id") && t.instructor.id == Ep("vibebp").getUser().id) && (w = 1), ("draft" == e.filter.post_status || w) && (_ = 1), s ? xp(wl, null) : xp(Cp, null, xp("div", null, xp("div", {
                    className: "course_featured_image"
                }, xp("img", {
                    src: t.featured_image,
                    alt: t.name,
                    width: "460",
                    height: "300",
                    onClick: a => {
                        e.update(t, "loadcourse")
                    }
                }), xp("div", {
                    className: "course_actions"
                }, "draft" == e.filter.post_status ? xp("div", {
                    className: "post_time"
                }, xp(Ot, {
                    timestamp: t.date_created
                }), " " + window.wplms_course_data.translations.ago) : xp("span", null), _ ? xp("div", {
                    className: "actions"
                }, xp("span", {
                    className: "vicon vicon-trash",
                    title: window.wplms_course_data.translations.delete,
                    onClick: () => o(!0)
                })) : "")), xp("div", {
                    className: "course_block_content_wrapper",
                    onClick: a => {
                        a.target.classList.contains("offline") || a.target.classList.contains("offlineicon") || e.update(t, "loadcourse")
                    }
                }, xp("div", {
                    className: "course_title_wrapper"
                }, xp("div", {
                    className: "course_title"
                }, xp("h3", {
                    dangerouslySetInnerHTML: {
                        __html: t.name
                    }
                }), "undefined" != typeof localforage && window.vibebp.api.sw_enabled ? t.offline ? xp("a", {
                    className: d ? "offline is-loading" : "offline",
                    onClick: p,
                    title: window.wplms_course_data.translations.disable_offline
                }, xp("span", {
                    className: "offlineicon vicon vicon-close"
                })) : xp("a", {
                    className: d ? "offline is-loading " : "offline",
                    onClick: p,
                    title: window.wplms_course_data.translations.enable_offline
                }, xp("span", {
                    className: "offlineicon vicon vicon-save-alt"
                })) : ""), xp("div", {
                    className: "course_instructor"
                }, xp("img", {
                    src: t.instructor.avatar
                }), xp("span", {
                    dangerouslySetInnerHTML: {
                        __html: t.instructor.name
                    }
                })), xp("div", {
                    className: "course_categories"
                }, t.categories.length ? t.categories.map((e => xp("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.name
                    }
                }))) : "")))), xp("div", {
                    className: "course_meta"
                }, xp("span", null, xp("span", {
                    className: "vicon vicon-user"
                }), " ", t.total_students), t.start_date ? xp("span", null, xp("span", {
                    className: "vicon vicon-alarm-clock"
                }), " ", t.total_students) : "", t.seats ? xp("span", null, xp("span", {
                    className: "vicon vicon-view-grid"
                }), " ", t.seats) : "", xp("span", null, xp("span", {
                    className: "vicon vicon-star"
                }), " ", t.average_rating, " (", t.rating_count, ")")), i ? xp("div", {
                    className: "change_data_wrapper",
                    onClick: e => {
                        e.preventDefault(), document.querySelector(".change_data_wrapper") && e.target === document.querySelector(".change_data_wrapper") && o(!1)
                    }
                }, xp("div", {
                    className: "change_data_content"
                }, xp("span", {
                    className: "vicon vicon-close close",
                    onClick: () => o(!1)
                }), xp("h3", null, window.wplms_course_data.translations.sure_delete), xp("div", {
                    className: "checkbox",
                    onClick: () => {
                        m(!u)
                    }
                }, xp("input", {
                    id: "delete_curriculum",
                    type: "checkbox",
                    checked: u
                }), xp("label", {
                    for: "delete_curriculum"
                }, window.wplms_course_data.translations.delete_curriculum)), xp("div", {
                    className: "popup-footer"
                }, xp("a", {
                    className: r ? "button is-primary is-loading" : "button is-primary",
                    onClick: a => {
                        l(!0), fetch(`${window.wplms_create_course_data.api_url}/deleteElement/${t.id}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                token: Ep("vibebp").getToken(),
                                course_id: t.id,
                                delete_content: u
                            })
                        }).then((e => e.json())).then((a => {
                            o(!1), l(!1), a.status && e.update(t, "deleted"), a.hasOwnProperty("message") && Pp("vibebp").addNotification({
                                text: a.message
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.yes), xp("a", {
                    className: "button is-primary",
                    onClick: () => o(!1)
                }, window.wplms_course_data.translations.cancel)))) : "")
            },
            {
                createElement: Tp,
                useState: Lp,
                useEffect: Mp,
                useRef: $p,
                Fragment: jp,
                render: Ap
            } = wp.element,
            {
                dispatch: Dp,
                select: Hp
            } = wp.data,
            Up = Math.round(100 * Math.random()),
            Fp = e => {
                const t = $p(null),
                    [a, s] = Lp(!0),
                    [n, i] = Lp(!1),
                    [o, r] = Lp(!1),
                    [l, d] = Lp(""),
                    [c, u] = Lp(""),
                    [m, p] = Lp(""),
                    [_, w] = Lp(""),
                    [v, h] = Lp({
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0,
                        type: "image"
                    }),
                    [f, g] = Lp(""),
                    [y, b] = Lp(window.vibebp.translations.select_image);
                Mp((() => {
                    e.hasOwnProperty("crop") && e.crop && i(!0)
                }), []), Mp((() => {
                    o && f && n && new(rd())(f, {
                        returnMode: "ratio",
                        onCropEnd: function(t) {
                            let a = {
                                ...v
                            };
                            a.x = 100 * t.x, a.y = 100 * t.y, a.height = 100 * t.height, a.width = 100 * t.width, h(a);
                            let s = {
                                x: f.naturalWidth * t.x,
                                y: f.naturalHeight * t.y,
                                width: f.naturalWidth * t.width,
                                height: f.naturalHeight * t.height
                            };
                            e.update(_, s)
                        }
                    })
                }), [o, f]);
                let k = {
                    backgroundPosition: v.x + "% " + v.y + "%",
                    backgroundSize: 1e4 / v.width + "% " + 1e4 / v.height + "% ",
                    backgroundImage: "url(" + l + ")"
                };
                return Tp("div", {
                    className: "uploader"
                }, a ? Tp("label", {
                    for: "fileupload_" + Up,
                    className: "upload_file"
                }, y, "image" == e.type ? Tp("input", {
                    id: "fileupload_" + Up,
                    "data-type": e.type,
                    ref: t,
                    type: "file",
                    accept: "image/*",
                    onChange: a => {
                        t.current.files[0].size < window.vibebp.settings.upload_limit ? (d(window.URL.createObjectURL(t.current.files[0])), s(!1), w(t.current.files), e.update(t.current.files, {
                            ...v,
                            key: "image"
                        })) : (b(window.vibebp.translations.image_size_error), setTimeout((() => {
                            b(window.vibebp.translations.select_image)
                        }), 3500))
                    }
                }) : "video" == e.type ? Tp("input", {
                    id: "fileupload_" + Up,
                    "data-type": e.type,
                    ref: t,
                    type: "file",
                    accept: "video/*",
                    onChange: a => {
                        t.current.files[0].size < window.vibebp.settings.upload_limit ? (u(window.URL.createObjectURL(t.current.files[0])), s(!1), w(t.current.files), e.update(t.current.files, {
                            ...v,
                            key: "video"
                        })) : (b(window.vibebp.translations.image_size_error), setTimeout((() => {
                            b(window.vibebp.translations.select_image)
                        }), 3500))
                    }
                }) : Tp("input", {
                    id: "fileupload_" + Up,
                    "data-type": e.type,
                    ref: t,
                    type: "file",
                    onChange: a => {
                        t.current.files[0].size < window.vibebp.settings.upload_limit ? (p(window.URL.createObjectURL(t.current.files[0])), s(!1), w(t.current.files), e.update(t.current.files, {
                            ...v,
                            key: "attachment"
                        })) : (b(window.vibebp.translations.image_size_error), setTimeout((() => {
                            b(window.vibebp.translations.select_image)
                        }), 3500))
                    }
                })) : Tp("div", {
                    className: "uploaded_src"
                }, "image" == e.type ? Tp(jp, null, n ? Tp(jp, null, Tp("div", {
                    className: "uploaded_image",
                    style: k
                }), Tp("span", null, Tp("span", {
                    className: "vicon vicon-pencil",
                    onClick: () => {
                        r(!o)
                    }
                }), Tp("span", {
                    className: "vicon vicon-close",
                    onClick: () => {
                        i(!1), s(!0), g(""), d(""), h({
                            x: 0,
                            y: 0,
                            width: 0,
                            height: 0
                        })
                    }
                })), o ? Tp("div", {
                    className: "cropimage",
                    id: "cropper"
                }, Tp("img", {
                    src: l,
                    ref: e => {
                        g(e)
                    }
                })) : "") : Tp("img", {
                    src: l
                })) : "video" == e.type ? Tp(jp, null, Tp("video", {
                    src: c
                })) : Tp(jp, null, Tp("i", {
                    className: "vicon vicon-clip"
                }))))
            },
            {
                createElement: Jp,
                useState: Rp,
                useEffect: Bp,
                Fragment: Vp,
                render: Xp
            } = wp.element,
            {
                dispatch: Wp,
                select: Yp
            } = wp.data,
            Qp = e => {
                const [t, a] = Rp([]), [s, n] = Rp([]), [i, o] = Rp(""), [r, l] = Rp({
                    content: "",
                    component: "activity",
                    component_id: "",
                    parent_id: "",
                    meta: []
                });
                return Bp((() => {
                    e.hasOwnProperty("activity_id") && l({
                        content: "",
                        component: "activity_comment",
                        component_id: e.comment_id,
                        parent_id: e.activity_id,
                        meta: []
                    }), e.hasOwnProperty("component") && "personal" != e.component && l({
                        ...r,
                        component: e.component,
                        component_id: e.id
                    })
                }), []), Bp((() => {
                    r.component.length && "activity" !== r.component && "activity_comment" !== r.component && fetch(`${window.vibebp.api.url}/${r.component}/user/${Yp("vibebp").getUser().id}/get_items?force`, {
                        method: "post",
                        body: JSON.stringify({
                            token: Yp("vibebp").getToken()
                        })
                    }).then((e => e.json())).then((e => {
                        e.status && Array.isArray(e.groups) && a(e.groups)
                    }))
                }), [r.component]), Jp("div", {
                    className: "portal activity_post"
                }, Jp("div", {
                    className: "portal_body"
                }, Jp("textarea", {
                    placeholder: window.vibebp.translations.whats_new,
                    onChange: e => {
                        let t = {
                            ...r
                        };
                        t.content = e.target.value, l(t)
                    }
                }, r.content)), Jp("div", {
                    className: "portal_footer"
                }, e.hasOwnProperty("activity_id") || "activity" !== r.component ? "" : Jp("div", {
                    className: "footer_main"
                }, Jp("select", {
                    value: r.component,
                    onChange: e => {
                        let t = {
                            ...r
                        };
                        t.component = e.target.value, l(t)
                    }
                }, Object.keys(window.vibebp.components.activity.post.components).map((e => Jp("option", {
                    value: e
                }, window.vibebp.components.activity.post.components[e])))), t.length ? Jp("select", {
                    value: r.component_id,
                    onChange: e => {
                        let t = {
                            ...r
                        };
                        t.component_id = e.target.value, l(t)
                    }
                }, Jp("option", null, window.vibebp.translations.select_component), t.map((e => Jp("option", {
                    value: e.id
                }, e.label)))) : ""), Jp("div", {
                    className: "footer_links"
                }, s.length ? s.map(((e, t) => Jp(Vp, null, Jp("a", "image" == e ? {
                    className: "vicon vicon-image upload_type"
                } : "video" == e ? {
                    className: "vicon vicon-video-camera upload_type"
                } : {
                    className: "vicon vicon-clip upload_type"
                }), Jp(Fp, {
                    type: e,
                    update: (a, s) => {
                        let n = [...i];
                        n[t] = new File([a[0]], a[0].name), o(n), l({
                            ...r,
                            meta: [...r.meta, {
                                key: e,
                                value: t
                            }]
                        })
                    }
                }), Jp("a", {
                    className: "vicon vicon-close",
                    onClick: () => {
                        let e = [...s];
                        e.splice(t, 1);
                        let a = [...i];
                        a.splice(t, 1), o(a), n(e)
                    }
                })))) : "", Jp(Vp, null, Jp("a", {
                    className: "vicon vicon-clip",
                    onClick: () => {
                        let e = [...s];
                        e.push("attachment"), n(e)
                    }
                }), Jp("a", {
                    className: "vicon vicon-video-camera",
                    onClick: () => {
                        let e = [...s];
                        e.push("video"), n(e)
                    }
                }), Jp("a", {
                    className: "vicon vicon-image",
                    onClick: () => {
                        let e = [...s];
                        e.push("image"), n(e)
                    }
                })), Jp("a", {
                    className: "button is-primary",
                    onClick: () => {
                        if (r.content.length) {
                            var t = new FormData;
                            t.append("body", JSON.stringify({
                                args: r,
                                token: Yp("vibebp").getToken()
                            })), i.length && i.map(((e, a) => {
                                t.append("files_" + a, e)
                            })), fetch(`${window.vibebp.api.url}/${window.vibebp.api.endpoints.activity}/add?post`, {
                                method: "post",
                                body: t
                            }).then((e => e.json())).then((t => {
                                t.status && (e.update(t.activity, "add"), l({
                                    ...r,
                                    content: "",
                                    meta: []
                                }), o([]), Wp("vibebp").addNotification({
                                    text: t.activity.action
                                }))
                            }))
                        }
                    }
                }, window.vibebp.translations.post_update), e.hasOwnProperty("activity_id") ? Jp("a", {
                    className: "button is-text",
                    onClick: () => {
                        e.update("", "cancel")
                    }
                }, window.vibebp.translations.cancel) : "")))
            },
            {
                createElement: Kp,
                useState: Gp,
                useEffect: Zp,
                Fragment: e_,
                render: t_
            } = wp.element,
            {
                dispatch: a_,
                select: s_
            } = wp.data,
            n_ = e => {
                const [t, a] = Gp({}), [s, n] = Gp(!1), [o, r] = Gp(!1), [l, d] = Gp(!1), [c, u] = Gp([]);
                Zp((() => {
                    a(e.activity), localforage.getItem("favorite_activities_" + s_("vibebp").getUser().id).then((e => {
                        e && (e = JSON.parse(e), d(e))
                    })), localforage.getItem("liked_activities_" + s_("vibebp").getUser().id).then((e => {
                        e && (e = JSON.parse(e), u(e))
                    }))
                }), [e.activity]), t.hasOwnProperty("date_recorded") || (t.date_recorded = (new Date).getTime());
                let m = "activity_item " + t.type + " " + t.component;
                return t.hasOwnProperty("content") && t.content.length && (m += " with_activity_content"), s && (m += " removed"), Kp("div", {
                    className: m,
                    "data-activity-id": t.id
                }, Kp("div", {
                    className: "activity_avatar"
                }, Kp("img", {
                    src: t.avatar
                })), Kp("div", {
                    className: "activity_body"
                }, Kp("div", {
                    className: "activity_header"
                }, Kp("span", {
                    dangerouslySetInnerHTML: {
                        __html: t.action
                    }
                })), t.hasOwnProperty("content") && t.content.length ? Kp("div", {
                    className: "activity_content"
                }, Kp("span", {
                    dangerouslySetInnerHTML: {
                        __html: t.content
                    }
                }), Kp("div", {
                    className: "activity_attachments"
                }, t.hasOwnProperty("meta") && Object.keys(t.meta).length ? Object.keys(t.meta).map((e => Kp(e_, null, t.meta[e].map((t => {
                    if (t.length > 3) {
                        if ("image" == e) return Kp("img", {
                            src: t,
                            className: "activity_meta image"
                        });
                        if ("video" == e) return Kp("video", {
                            className: "activity_meta video",
                            ref: e => {
                                e && new Plyr(e)
                            }
                        }, Kp("source", {
                            src: t,
                            type: "video/mp4"
                        }));
                        if ("audio" == e) return Kp("audio", {
                            className: "activity_meta audio",
                            ref: e => {
                                e && new Plyr(e)
                            }
                        }, Kp("source", {
                            src: videoUrl,
                            type: "audio/mp3"
                        }));
                        if ("attachment" == e) return Kp("a", {
                            href: t,
                            target: "_blank",
                            className: "vicon vicon-clip activity_meta"
                        })
                    }
                }))))) : "")) : "", Kp("span", {
                    className: "datetime"
                }, Kp(Ot, {
                    timestamp: t.date_recorded
                })), Kp("div", {
                    className: "activity_actions"
                }, window.vibebp.settings.likes ? Kp("a", {
                    className: -1 === c.indexOf(t.id) ? "vicon vicon-thumb-up" : "vicon vicon-thumb-up filled",
                    onClick: () => {
                        let a = [],
                            s = -1;
                        c && (a = [...c], s = c.indexOf(t.id));
                        let n = "add-like"; - 1 === s ? a.push(t.id) : (n = "remove-like", e.update(t, "remove-like"), a.splice(s, 1)), fetch(`${window.vibebp.api.url}/${window.vibebp.api.endpoints.activity}/${n}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                activity_id: t.id,
                                token: s_("vibebp").getToken()
                            })
                        }).then((e => e.json())).then((e => {
                            e.hasOwnProperty("message") && s_("vibebp").addNotification({
                                text: e.message
                            }), localforage.setItem("liked_activities_" + s_("vibebp").getUser().id, JSON.stringify(a))
                        })), u(a)
                    }
                }) : "", Kp("a", {
                    className: t.hasOwnProperty("children") && t.children ? "vicon vicon-comment-alt" : "vicon vicon-comment",
                    onClick: () => {
                        r(!o)
                    }
                }), Kp("a", {
                    className: l && -1 !== l.indexOf(t.id) ? "vicon vicon-star filled" : "vicon vicon-star",
                    onClick: () => {
                        let a = [],
                            s = -1;
                        l && (a = [...l], s = l.indexOf(t.id));
                        let n = "add-favorite"; - 1 === s ? a.push(t.id) : (n = "remove-favorite", e.update(t, "remove-favorite"), a.splice(s, 1)), fetch(`${window.vibebp.api.url}/${window.vibebp.api.endpoints.activity}/${n}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                activity_id: t.id,
                                token: s_("vibebp").getToken()
                            })
                        }).then((e => e.json())).then((e => {
                            e.hasOwnProperty("message") && s_("vibebp").addNotification({
                                text: e.message
                            }), localforage.setItem("liked_activities_" + s_("vibebp").getUser().id, JSON.stringify(a))
                        }))
                    }
                }), Kp("a", {
                    className: "vicon vicon-trash",
                    onClick: () => {
                        fetch(`${window.vibebp.api.url}/${window.vibebp.api.endpoints.activity}/remove?post`, {
                            method: "post",
                            body: JSON.stringify({
                                activity_id: t.id,
                                parent_id: e.rootActivityId,
                                token: s_("vibebp").getToken()
                            })
                        }).then((e => e.json())).then((e => {
                            e.hasOwnProperty("message") && s_("vibebp").addNotification({
                                text: e.message
                            })
                        })), n(!0), e.update(t, "remove")
                    }
                })), o ? Kp(Qp, {
                    activity_id: e.rootActivityId,
                    update: (e, s) => {
                        let n = {
                            ...t
                        };
                        "add" === s && (n.children ? n.children[Object.keys(n.children).length] = e : ("object" == typeof n.children && null !== n.children || (n.children = {}), n.children[0] = e), r(!1), a(n)), "remove" === s && -1 !== Object.keys(n.children).findIndex((t => n.children[t].id === e.id)) && (delete n.children[i], a(n)), "cancel" === s && r(!1)
                    },
                    comment_id: t.id
                }) : "", t.hasOwnProperty("children") && t.children ? Kp("div", {
                    class: "activity_list"
                }, Object.keys(t.children).map((a => Kp(n_, {
                    activity: t.children[a],
                    rootActivityId: e.rootActivityId
                })))) : ""))
            },
            i_ = n_,
            {
                createElement: o_,
                render: r_,
                useState: l_,
                useEffect: d_,
                useContext: c_,
                Fragment: u_,
                RawHTML: m_
            } = wp.element,
            {
                dispatch: p_,
                select: __
            } = wp.data,
            w_ = e => {
                const [t, a] = l_(!1), [s, n] = l_(!1), [i, o] = l_([]), [r, l] = l_({
                    paged: 1,
                    search_terms: "",
                    per_page: 20,
                    action: "",
                    order: "DESC",
                    scope: e.hasOwnProperty("member") && void 0 !== e.member && e.member ? e.member : ""
                }), [d, c] = l_(""), [u, m] = l_(!1), [_, w] = l_(!1), [v, h] = l_(!1), [f, g] = l_(!1), [y, b] = l_(!1), [k, x] = l_(null);
                let N = __("vibebp").getUser();
                N.token = __("vibebp").getToken();
                const q = window.wplms_course_data.api_url,
                    O = () => {
                        g(!1), l({
                            ...r,
                            paged: 1
                        })
                    };
                d_((() => (document.addEventListener("vibebp_component_reload", O), () => {
                    document.removeEventListener("vibebp_component_reload", O)
                }))), d_((() => () => {
                    l({
                        paged: 1,
                        search_terms: "",
                        per_page: 20,
                        action: "",
                        order: "DESC",
                        scope: e.member
                    })
                }), []), p((() => {
                    if (f && !y) return;
                    a(!0), k && k.abort();
                    let t = {},
                        s = new AbortController;
                    k && (t = {
                        signal: s.signal
                    }), x(s);
                    let n = {
                            method: "POST",
                            ...t,
                            body: JSON.stringify({
                                id: e.id,
                                filter: r,
                                token: N.token
                            })
                        },
                        l = {
                            ...r
                        },
                        d = 0;
                    l && l.hasOwnProperty("search_terms") && "" !== l.search_terms && (delete l.search_terms, d = 1);
                    let c = `${q}/instructor/${e.cpt}/0/activity?args=${encodeURIComponent(JSON.stringify(l))}&force`;
                    e.hasOwnProperty("id") && void 0 !== e.id && (c = `${q}/instructor/${e.cpt}/${e.id}/activity?args=${encodeURIComponent(JSON.stringify(l))}&force`), d && (c += "&nocache"), fetch(c, n).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (a(!1), e.status) {
                            if (u) {
                                let t = [...i, ...e.data.activities];
                                o(t), m(!1)
                            } else o(e.data.activities);
                            e.data.has_more_items ? w(!0) : (w(!1), r.search_terms.length || r.action.length || r.scope || g(!0)), e.is_instructor && h(e.is_instructor)
                        } else e.hasOwnProperty("message") && p_("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        "AbortError" === e.name ? a(!0) : (console.error("Uh oh, an error!", e), setIsLoading(!1), b(!1), p_("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [r]);
                const I = (e, t) => {
                    let a = [...i];
                    if ("remove" === t || "remove-favorite" == t && "activity-favs" == args.filter) {
                        let t = a.findIndex((t => t.id === e.id)); - 1 !== t && (a.splice(t, 1), o(a))
                    }
                    "add" === t && (a.unshift(e), o(a))
                };
                let C = [...i];
                return r.search_terms.length && (C = C.filter((e => e.content.toLowerCase().includes(r.search_terms.toLowerCase())))), r.hasOwnProperty("scope") && void 0 !== r.scope && r.scope && r.scope.length && "personal" == r.scope && (C = C.filter((e => parseInt(e.user_id) === parseInt(N.id)))), r.hasOwnProperty("action") && r.action.length && (C = C.filter((e => e.type === r.action))), r.order && ("DESC" == r.order ? C.sort((function(e, t) {
                    return new Date(t.date_recorded).getTime() - new Date(e.date_recorded).getTime()
                })) : C.sort((function(e, t) {
                    return new Date(e.date_recorded).getTime() - new Date(t.date_recorded).getTime()
                }))), o_("div", {
                    className: "course_activity_wrapper"
                }, o_("div", {
                    className: "portal"
                }, o_("div", {
                    className: "portal_header"
                }, o_("div", {
                    className: "header_links"
                }, o_("div", {
                    className: "searchbox active"
                }, o_("span", {
                    className: "vicon vicon-search"
                }), o_("input", {
                    type: "text",
                    placeholder: window.wplms_course_data.translations.search,
                    value: r.search_terms,
                    onChange: e => {
                        l({
                            ...r,
                            search_terms: e.target.value
                        })
                    }
                }))), o_("div", {
                    className: "header_extras"
                }, o_("select", {
                    value: r.scope,
                    onChange: e => {
                        g(!1), l({
                            ...r,
                            scope: e.target.value,
                            paged: 1
                        })
                    }
                }, Object.keys(window.wplms_course_data.course.admin.activity_filters).length ? Object.keys(window.wplms_course_data.course.admin.activity_filters).map((e => o_("option", {
                    value: e
                }, window.wplms_course_data.course.admin.activity_filters[e]))) : ""), o_("div", {
                    className: "filter_by"
                }, o_("select", {
                    value: r.action,
                    onChange: e => {
                        g(!1), l({
                            ...r,
                            action: e.target.value,
                            paged: 1
                        })
                    }
                }, o_("option", {
                    value: ""
                }, window.wplms_course_data.translations.filter_by), Object.keys(window.wplms_course_data.course.admin.activity_sorters).length ? Object.keys(window.wplms_course_data.course.admin.activity_sorters).map((e => o_("option", {
                    value: e
                }, window.wplms_course_data.course.admin.activity_sorters[e]))) : ""), o_("span", null, o_("span", {
                    className: "ASC" == r.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                    onClick: () => {
                        l({
                            ...r,
                            order: "ASC"
                        })
                    }
                }), o_("span", {
                    className: "DESC" == r.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                    onClick: () => {
                        l({
                            ...r,
                            order: "DESC"
                        })
                    }
                }))))), o_("div", {
                    className: "portal_body"
                }, t ? o_(wl, null) : "", C && C.length ? o_("div", {
                    className: "activity_list"
                }, C.map((e => o_(i_, {
                    activity: e,
                    rootActivityId: e.id,
                    update: I
                })))) : o_("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_activity), _ ? o_("a", {
                    className: "link",
                    onClick: () => {
                        m(!0), l({
                            ...r,
                            paged: r.paged + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : null)))
            },
            {
                createElement: v_,
                render: h_,
                useState: f_,
                useEffect: g_,
                useContext: y_,
                Fragment: b_,
                RawHTML: k_
            } = wp.element,
            x_ = e => {
                const [t, a] = f_(e.member);
                return g_((() => {
                    a(e.member)
                }), [e.member]), t ? v_(b_, null, v_("div", {
                    className: "user_credentials"
                }, t.image ? v_("img", {
                    className: "user_image",
                    src: t.image
                }) : "", t.nickname ? v_("span", {
                    dangerouslySetInnerHTML: {
                        __html: t.nickname
                    }
                }) : "", t.hasOwnProperty("progress") ? v_("div", {
                    class: "course_progress_wrapper"
                }, v_("div", {
                    class: "course_progress"
                }, v_("span", {
                    style: {
                        width: t.progress + "%"
                    }
                })), v_("span", null, t.progress, "%")) : "", t.hasOwnProperty("expiry") ? v_(Ot, {
                    timestamp: t.expiry,
                    notimediff: 1
                }) : "", t.hasOwnProperty("meta") ? t.meta.map((e => {
                    v_("span", null, e.label, " ", v_("span", null), e.value)
                })) : ""), v_("div", null, e.is_instructor ? v_(b_, null, e.onReset ? v_("span", {
                    onClick: () => e.onReset(t.user_id),
                    className: "tip",
                    title: window.wplms_course_data.translations.reset_course
                }, v_("i", {
                    className: "vicon vicon-reload"
                })) : "", e.onMemberActivity ? v_("span", {
                    onClick: () => e.onMemberActivity(t.user_id),
                    className: "tip",
                    title: window.wplms_course_data.translations.user_activity
                }, v_("i", {
                    className: "vicon vicon-pulse"
                })) : "", e.onCourseStats ? v_("span", {
                    onClick: () => e.onCourseStats(t.user_id),
                    className: "tip",
                    title: window.wplms_course_data.translations.user_stats
                }, v_("i", {
                    className: "vicon vicon-pie-chart"
                })) : "", e.onRemove ? v_("span", {
                    onClick: () => e.onRemove(t.user_id),
                    className: "tip",
                    title: window.wplms_course_data.translations.remove_user
                }, " ", v_("i", {
                    className: "vicon vicon-close"
                })) : "", e.onCourseStructure ? v_("span", {
                    onClick: () => e.onCourseStructure(t.user_id)
                }, "   ", v_("i", {
                    className: "vicon vicon-bar-chart"
                }), " ") : "", e.onQuizReset ? v_("span", {
                    onClick: () => e.onQuizReset(t.user_id)
                }, " ", v_("i", {
                    className: "vicon vicon-reload"
                })) : "", e.onQuizStructure ? v_("span", {
                    onClick: () => e.onQuizStructure(t.user_id)
                }, " ", v_("i", {
                    className: "vicon vicon-medall"
                })) : "") : "")) : ""
            },
            {
                createElement: N_,
                render: q_,
                useState: O_,
                useEffect: I_,
                useContext: C_,
                Fragment: S_,
                RawHTML: P_
            } = wp.element,
            {
                createElement: E_,
                render: z_,
                useState: T_,
                useEffect: L_,
                useContext: M_,
                Fragment: $_,
                RawHTML: j_,
                useRef: A_
            } = wp.element,
            {
                dispatch: D_,
                select: H_
            } = wp.data;
        Math.floor((new Date).getTime() / 1e3);
        const U_ = e => {
                let t = H_("vibebp").getUser();
                t.token = H_("vibebp").getToken(), A_();
                const a = A_(null),
                    s = window.wplms_course_data.api_url,
                    [n, i] = T_(!1),
                    [o, r] = T_(!1),
                    [l, d] = T_(""),
                    [c, u] = T_(!1),
                    [m, _] = T_(!1),
                    [w, v] = T_(!1),
                    [h, f] = T_([]),
                    [g, y] = T_([]),
                    [b, k] = T_(!1),
                    [x, N] = T_(!1),
                    [q, O] = T_({
                        paged: 1,
                        orderby: "alphabetical",
                        order: "DESC",
                        course_status: "",
                        active_status: "",
                        search_terms: "",
                        per_page: 20
                    }),
                    [I, C] = T_(!1),
                    [S, P] = T_(),
                    [E, z] = T_(""),
                    T = e.course,
                    [L, M] = T_(),
                    [$, j] = T_(!1),
                    [A, D] = T_(!1),
                    [H, U] = T_(!1),
                    [F, J] = T_([]),
                    [R, B] = T_([]),
                    [V, X] = T_(""),
                    [W, Y] = T_(0),
                    [Q, K] = T_(""),
                    [G, Z] = T_(0),
                    [ee, te] = T_(""),
                    [ae, se] = T_(),
                    [ne, ie] = T_(""),
                    [oe, re] = T_(!1),
                    [le, de] = T_({
                        subject: "",
                        message: "",
                        all: !1
                    }),
                    [ce, ue] = T_(!1),
                    [me, pe] = T_(null),
                    _e = () => {
                        ue(!1), O({
                            ...q,
                            paged: 1
                        })
                    };
                L_((() => (document.addEventListener("vibebp_component_reload", _e), () => {
                    document.removeEventListener("vibebp_component_reload", _e)
                }))), L_((() => {
                    P(q)
                }), []), p((() => {
                    if (ce) return;
                    me && me.abort();
                    let e = {},
                        a = new AbortController;
                    me && (e = {
                        signal: a.signal
                    }), pe(a);
                    let n = {
                            method: "POST",
                            ...e,
                            body: JSON.stringify({
                                filter: q,
                                token: t.token
                            })
                        },
                        i = {
                            ...q
                        },
                        o = 0;
                    i && i.hasOwnProperty("search_terms") && void 0 !== i.search_terms && i.search_terms.length && (delete i.search_terms, o = 1);
                    let r = `${s}/instructor/courses/members/${T}?args=${encodeURIComponent(JSON.stringify(i))}&force`;
                    !ce && o && (r += "&nocache"), u(!0), fetch(r, n).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (u(!1), e) {
                            if (b) {
                                let t = [...g, ...e.data];
                                y(t), t.length < e.total ? C(!0) : (C(!1), q.search_terms.length || q.active_status.length || 0 != q.course_status || ue(!0)), k(!1)
                            } else y([...e.data]), e.data.length < e.total ? C(!0) : (C(!1), q.search_terms.length || q.active_status.length || 0 != q.course_status || ue(!0));
                            e.hasOwnProperty("is_instructor") && N(e.is_instructor)
                        }
                    })).catch((e => {
                        C(!1), "AbortError" === e.name ? u(!0) : (u(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [q]);
                const we = e => {
                        let t = L ? [...L] : [],
                            a = t.indexOf(e);
                        a >= 0 ? t.splice(a, 1) : t.push(e), M(t)
                    },
                    ve = e => !!L && L.includes(e);
                p((() => {
                    if (ne && ne.length) {
                        U(!0);
                        let e = {
                            method: "POST",
                            body: JSON.stringify({
                                course_id: T,
                                student_name: ne,
                                token: t.token
                            })
                        };
                        fetch(`${s}/instructor/courses/search_students_to_add?post`, e).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            U(!1), e && (e.status ? J(e.data) : e.hasOwnProperty("message") && D_("vibebp").addNotification({
                                text: e.message
                            }))
                        })).catch((e => {
                            U(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }), 500, [ne]);
                const he = e => {
                    let t = R ? [...R] : [],
                        a = [...F],
                        s = t.indexOf(e);
                    s >= 0 ? (t.splice(s, 1), a.unshift(e)) : (t.push(e), a.splice(a.indexOf(e), 1)), B(t), J(a)
                };
                let fe = [...g];
                if (q.search_terms.length && (fe = fe.filter((e => e.nickname.toLowerCase().includes(q.search_terms.toLowerCase()) || e.hasOwnProperty("email") && e.email.toLowerCase().includes(q.search_terms.toLowerCase())))), q.hasOwnProperty("active_status") && q.active_status.length && "all" !== q.active_status && (fe = "active" == q.active_status ? fe.filter((e => parseInt(e.expiry) > 0)) : fe.filter((e => parseInt(e.expiry) < 0))), q.hasOwnProperty("course_status") && q.course_status.length && 0 != q.course_status && (fe = fe.filter((e => parseInt(e.course_status) === parseInt(q.course_status)))), q.order && q.orderby.length) switch (q.orderby) {
                    case "recently_joined":
                    default:
                        "DESC" == q.order ? fe.sort((function(e, t) {
                            return parseInt(t.umeta_id) - parseInt(e.umeta_id)
                        })) : fe.sort((function(e, t) {
                            return parseInt(e.umeta_id) - parseInt(t.umeta_id)
                        }));
                        break;
                    case "alphabetical":
                        "DESC" == q.order ? fe.sort((function(e, t) {
                            return t.nickname.localeCompare(e.nickname)
                        })) : fe.sort((function(e, t) {
                            return e.nickname.localeCompare(t.nickname)
                        }));
                        break;
                    case "toppers":
                        "DESC" == q.order ? fe.sort((function(e, t) {
                            return parseInt(t.marks) - parseInt(e.marks)
                        })) : fe.sort((function(e, t) {
                            return parseInt(e.marks) - parseInt(t.marks)
                        }))
                }
                return E_("div", {
                    className: "course_admin_wrapper"
                }, E_("div", {
                    className: "course_admin"
                }, E_("div", {
                    className: "students_filter vibebp_form"
                }, E_("div", {
                    className: "vibebp_form_field"
                }, E_("input", {
                    type: "text",
                    onChange: e => {
                        ((e, t) => {
                            let a = {
                                ...q,
                                search_terms: e,
                                paged: 1
                            };
                            O(a)
                        })(e.target.value)
                    },
                    placeholder: window.wplms_course_data.translations.search_student
                })), E_("select", {
                    onChange: e => {
                        (e => {
                            let t = {
                                ...q,
                                active_status: e,
                                paged: 1
                            };
                            O(t)
                        })(e.target.value)
                    }
                }, Object.keys(window.wplms_course_data.course.admin.access).map((e => E_("option", {
                    value: e
                }, window.wplms_course_data.course.admin.access[e])))), E_("select", {
                    onChange: e => {
                        (e => {
                            let t = {
                                ...q,
                                course_status: e,
                                paged: 1
                            };
                            O(t)
                        })(e.target.value)
                    }
                }, Object.keys(window.wplms_course_data.course.admin.status).map((e => E_("option", {
                    value: e
                }, window.wplms_course_data.course.admin.status[e])))), E_("div", {
                    className: ""
                }, E_("select", {
                    onChange: e => {
                        (e => {
                            let t = {
                                ...q,
                                orderby: e,
                                paged: 1
                            };
                            O(t)
                        })(e.target.value)
                    }
                }, Object.keys(window.wplms_course_data.course.admin.student_orderby).map((e => E_("option", {
                    value: e
                }, window.wplms_course_data.course.admin.student_orderby[e])))), E_("span", null, E_("span", {
                    className: "ASC" == q.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                    onClick: () => {
                        O({
                            ...q,
                            order: "ASC"
                        })
                    }
                }), E_("span", {
                    className: "DESC" == q.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                    onClick: () => {
                        O({
                            ...q,
                            order: "DESC"
                        })
                    }
                })))), c ? E_(wl, null) : null, fe && fe.length ? E_("div", {
                    className: "course_students"
                }, fe.map((a => E_("div", {
                    className: ve(a.user_id) ? "selected course_student" : "course_student"
                }, ve(a.user_id) ? E_("div", {
                    onClick: () => we(a.user_id)
                }, E_("i", {
                    className: "vicon vicon-check-box"
                })) : "", ve(a.user_id) ? "" : E_("div", {
                    onClick: () => we(a.user_id)
                }, E_("i", {
                    className: "vicon vicon-layout-width-full"
                })), E_(x_, {
                    member: a,
                    is_instructor: x,
                    onReset: e => (e => {
                        if (1 == confirm(window.vibebp.translations.confirm)) {
                            u(!0);
                            let a = {
                                method: "POST",
                                body: JSON.stringify({
                                    course_id: T,
                                    member_id: e,
                                    token: t.token
                                })
                            };
                            fetch(`${s}/instructor/courses/reset_course?post`, a).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                if (u(!1), e)
                                    if (e.status) {
                                        let t = [...g];
                                        t.findIndex((t => t.user_id == e.data)) > -1 && (t[t.findIndex((t => t.user_id == e.data))].progress = 0, y(t)), z(e.message), _(!0), e.hasOwnProperty("rtm") && D_("vibebp").sendRealTimeNotification(e.rtm.user_id, e.rtm.message)
                                    } else z(e.message), _(!0)
                            })).catch((e => {
                                u(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    })(e),
                    onRemove: e => (e => {
                        if (1 == confirm(window.vibebp.translations.confirm)) {
                            u(!0);
                            let a = {
                                method: "POST",
                                body: JSON.stringify({
                                    course_id: T,
                                    member_id: e,
                                    token: t.token
                                })
                            };
                            fetch(`${s}/instructor/courses/remove_member?post`, a).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                if (u(!1), e)
                                    if (e.status) {
                                        if (e.data) {
                                            let t = [...g];
                                            if (t.length) {
                                                let a = t.findIndex((t => e.data == t.user_id));
                                                a >= 0 && (t.splice(a, 1), y(t))
                                            }
                                        }
                                        e.hasOwnProperty("rtm") && D_("vibebp").sendRealTimeNotification(e.rtm.user_id, e.rtm.message), D_("vibebp").addNotification({
                                            text: e.message
                                        })
                                    } else D_("vibebp").addNotification({
                                        text: e.message
                                    })
                            })).catch((e => {
                                u(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    })(e),
                    onMemberActivity: t => {
                        return a = t, void e.update(a, "setactivityuser");
                        var a
                    },
                    onCourseStats: e => (e => {
                        u(!0);
                        let a = {
                            method: "POST",
                            body: JSON.stringify({
                                course_id: T,
                                user_id: e,
                                token: t.token
                            })
                        };
                        fetch(`${s}/instructor/courses/get_course_user_stats?post`, a).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            u(!1), t && (t.status ? t.data && se({
                                ...t.data,
                                id: e
                            }) : D_("vibebp").addNotification({
                                text: t.message
                            }))
                        })).catch((e => {
                            u(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    })(e)
                }), ae && ae.hasOwnProperty("user_id") && ae.user_id == a.user_id ? ae.hasOwnProperty("curriculum") && ae.curriculum.length ? E_("div", {
                    className: "user_course_stat"
                }, ae.hasOwnProperty("curriculum") && ae.curriculum.length ? ae.curriculum.map(((e, a) => E_($_, null, "section" == e.type ? E_($_, null, E_("div", {
                    className: e.type
                }, e.title ? E_("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.title
                    }
                }) : "")) : E_("div", {
                    className: e.type
                }, E_("span", null, void 0 !== e.icon ? E_("span", {
                    className: e.icon
                }) : "", e.title ? E_("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.title
                    }
                }) : ""), null != typeof e.completed ? 1 == e.completed ? E_("span", {
                    className: "completed"
                }, e.hasOwnProperty("marks") ? E_("span", null, window.wplms_course_data.translations.total_marks, " ", e.marks, e.hasOwnProperty("max") ? "/" + e.max : "") : "", E_("span", {
                    onClick: () => ((e, a) => {
                        u(!0);
                        let n = {
                            method: "POST",
                            body: JSON.stringify({
                                course_id: T,
                                user_id: ae.user_id,
                                item_id: e,
                                token: t.token
                            })
                        };
                        fetch(`${s}/instructor/courses/uncomplete_course_curriculum?post`, n).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            if (u(!1), e)
                                if (e.status) {
                                    let t = {
                                        ...ae
                                    };
                                    t.curriculum[a].completed = !1, se(t), e.hasOwnProperty("rtm") && D_("vibebp").sendRealTimeNotification(e.rtm.user_id, e.rtm.message)
                                } else D_("vibebp").addNotification({
                                    text: e.message
                                })
                        })).catch((e => {
                            u(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    })(e.id, a),
                    className: "vicon vicon-check-box"
                })) : E_("span", {
                    onClick: () => ((e, a) => {
                        u(!0);
                        let n = {
                            method: "POST",
                            body: JSON.stringify({
                                course_id: T,
                                user_id: ae.user_id,
                                item_id: e,
                                token: t.token
                            })
                        };
                        fetch(`${s}/instructor/courses/complete_course_curriculum?post`, n).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            if (u(!1), e)
                                if (e.status) {
                                    let t = {
                                        ...ae
                                    };
                                    t.curriculum[a].completed = !0, se(t), e.hasOwnProperty("rtm") && D_("vibebp").sendRealTimeNotification(e.rtm.user_id, e.rtm.message)
                                } else D_("vibebp").addNotification({
                                    text: e.message
                                })
                        })).catch((e => {
                            u(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    })(e.id, a),
                    className: "vicon vicon-timer"
                }) : "")))) : "") : E_("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no) : "")))) : E_("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.members_not_found), I ? E_("a", {
                    className: "link",
                    expand: "block",
                    fill: "outline",
                    onClick: () => (() => {
                        let e = {
                            ...q,
                            paged: q.paged + 1
                        };
                        O(e), k(!0)
                    })()
                }, window.wplms_course_data.translations.load_more) : "", c ? "" : E_("div", null, x ? E_("div", {
                    className: "bulk_action"
                }, e.hasOwnProperty("permissions") && e.permissions.hasOwnProperty("instructor_add_students") && e.permissions.instructor_add_students || t.caps.hasOwnProperty("manage_options") ? E_("span", {
                    onClick: () => j("add_student"),
                    className: "add_student" == $ ? "tip active" : "tip",
                    title: window.wplms_course_data.translations.add_students_to_course
                }, " ", E_("i", {
                    className: "vicon vicon-user"
                })) : "", e.hasOwnProperty("permissions") && e.permissions.hasOwnProperty("instructor_assign_badges") && e.permissions.instructor_assign_badges || t.caps.hasOwnProperty("manage_options") ? E_("span", {
                    onClick: () => j("badge_certificate"),
                    className: "badge_certificate" == $ ? "tip active" : "tip",
                    title: window.wplms_course_data.translations.assign_certificate
                }, " ", E_("i", {
                    className: "vicon vicon-key"
                })) : "", e.hasOwnProperty("permissions") && e.permissions.hasOwnProperty("instructor_extend_subscription") && e.permissions.instructor_extend_subscription || t.caps.hasOwnProperty("manage_options") ? E_("span", {
                    onClick: () => j("extend_subscription"),
                    className: "extend_subscription" == $ ? "tip active" : "tip",
                    title: window.wplms_course_data.translations.extend_subscription
                }, " ", E_("i", {
                    className: "vicon vicon-shift-right"
                })) : "", e.hasOwnProperty("permissions") && e.permissions.hasOwnProperty("instructor_change_status") && e.permissions.instructor_change_status || t.caps.hasOwnProperty("manage_options") ? E_("span", {
                    onClick: () => j("change_status"),
                    className: "change_status" == $ ? "tip active" : "tip",
                    title: window.wplms_course_data.translations.change_status
                }, " ", E_("i", {
                    className: "vicon vicon-panel"
                })) : "", e.hasOwnProperty("permissions") && e.permissions.hasOwnProperty("instructor_add_students") && e.permissions.instructor_add_students || t.caps.hasOwnProperty("manage_options") ? E_("span", {
                    onClick: () => j("bulk_message_students"),
                    className: "bulk_message_students" == $ ? "tip active" : "tip",
                    title: window.wplms_course_data.translations.bulk_message_students
                }, " ", E_("i", {
                    className: "vicon vicon-email"
                })) : "", e.hasOwnProperty("permissions") && e.permissions.hasOwnProperty("instructor_add_students") && e.permissions.instructor_add_students || t.caps.hasOwnProperty("manage_options") ? E_("span", {
                    onClick: () => j("upload_csv_to_add_students"),
                    className: "add_students_csv" == $ ? "tip active" : "tip",
                    title: window.wplms_course_data.translations.upload_csv_to_add_students
                }, " ", E_("i", {
                    className: "vicon vicon-export"
                })) : "", "badge_certificate" == $ ? E_("div", {
                    className: "bulk_action_single"
                }, E_($_, null, E_("label", null, window.wplms_course_data.translations.select_badge_certificate_assign), E_("select", {
                    onChange: e => {
                        te(e.target.value)
                    }
                }, E_("option", {
                    value: "add_badge"
                }, window.wplms_course_data.translations.add_badge), E_("option", {
                    value: "add_certificate"
                }, window.wplms_course_data.translations.add_certificate), E_("option", {
                    value: "remove_badge"
                }, window.wplms_course_data.translations.remove_badge), E_("option", {
                    value: "remove_certificate"
                }, window.wplms_course_data.translations.remove_certificate))), E_("div", {
                    className: "bulk_action_button"
                }, E_("a", {
                    className: A ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => (() => {
                        if (L && L.length && ee) {
                            D(!0);
                            let e = {
                                method: "POST",
                                body: JSON.stringify({
                                    course_id: T,
                                    members: L,
                                    assign_action: ee,
                                    token: t.token
                                })
                            };
                            fetch(`${s}/instructor/courses/assign_badge_certificate?post`, e).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                D(!1), e && (e.status ? (D_("vibebp").addNotification({
                                    text: e.message
                                }), e.hasOwnProperty("rtm") && e.rtm.length && e.rtm.map((e => {
                                    D_("vibebp").sendRealTimeNotification(e.user_id, e.message)
                                }))) : D_("vibebp").addNotification({
                                    text: e.message
                                }))
                            })).catch((e => {
                                D(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    })()
                }, window.wplms_course_data.translations.assign_badge_certificate), E_("a", {
                    className: "link",
                    onClick: () => j(!1)
                }, window.wplms_course_data.translations.cancel))) : "change_status" == $ ? E_("div", {
                    className: "bulk_action_single"
                }, E_($_, null, E_("label", null, window.wplms_course_data.translations.select_course_status), E_("select", {
                    onChange: e => {
                        K(e.target.value)
                    }
                }, window.wplms_course_data.course.admin.status.map(((e, t) => E_("option", {
                    value: t
                }, e))))), Q && 4 == Q ? E_("input", {
                    type: "number",
                    placeholder: window.wplms_course_data.translations.enter_marks,
                    onChange: e => {
                        Z(e.target.value)
                    }
                }) : "", E_("div", {
                    className: "bulk_action_button"
                }, E_("a", {
                    className: A ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => (() => {
                        if (L && L.length && Q) {
                            D(!0);
                            let e = {
                                method: "POST",
                                body: JSON.stringify({
                                    course_id: T,
                                    members: L,
                                    status_action: Q,
                                    data: G,
                                    token: t.token
                                })
                            };
                            fetch(`${s}/instructor/courses/update_course_status?post`, e).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                D(!1), e && (e.status ? (D_("vibebp").addNotification({
                                    text: e.message
                                }), e.hasOwnProperty("rtm") && e.rtm.length && e.rtm.map((e => {
                                    D_("vibebp").sendRealTimeNotification(e.user_id, e.message)
                                }))) : D_("vibebp").addNotification({
                                    text: e.message
                                }))
                            })).catch((e => {
                                D(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        } else D_("vibebp").addNotification({
                            text: window.wplms_course_data.translations.select_members
                        })
                    })()
                }, window.wplms_course_data.translations.change_course_status), E_("a", {
                    className: "link",
                    onClick: () => j(!1)
                }, window.wplms_course_data.translations.cancel))) : "extend_subscription" == $ ? E_("div", {
                    className: "bulk_action_single"
                }, E_($_, null, E_("label", null, window.wplms_course_data.translations.select_extend_subscription), E_("select", {
                    onChange: e => {
                        X(e.target.value)
                    }
                }, window.wplms_create_course_data.duration.map((e => E_("option", {
                    value: e.value
                }, e.label))))), E_("input", {
                    type: "number",
                    placeholder: window.wplms_course_data.translations.enter_time_amount,
                    onChange: e => {
                        Y(e.target.value)
                    }
                }), E_("div", {
                    className: "bulk_action_button"
                }, E_("a", {
                    className: A ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => (() => {
                        if (L && L.length && V && W) {
                            D(!0);
                            let e = {
                                method: "POST",
                                body: JSON.stringify({
                                    course_id: T,
                                    members: L,
                                    course_duration_parameter_type: V,
                                    extend_amount: W,
                                    token: t.token
                                })
                            };
                            fetch(`${s}/instructor/courses/extend_course_subscription?post`, e).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                D(!1), e && (e.status ? (D_("vibebp").addNotification({
                                    text: e.message
                                }), e.hasOwnProperty("rtm") && e.rtm.length && e.rtm.map((e => {
                                    D_("vibebp").sendRealTimeNotification(e.user_id, e.message)
                                }))) : D_("vibebp").addNotification({
                                    text: e.message
                                }))
                            })).catch((e => {
                                D(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        } else D_("vibebp").addNotification({
                            text: window.wplms_course_data.translations.select_members
                        })
                    })()
                }, window.wplms_course_data.translations.extend_subscription), E_("a", {
                    className: "link",
                    onClick: () => j(!1)
                }, window.wplms_course_data.translations.cancel))) : "upload_csv_to_add_students" == $ ? E_("div", {
                    className: "change_data_wrapper"
                }, E_("div", {
                    className: "change_data_content"
                }, E_("div", {
                    className: "heading_area"
                }, E_("span", {
                    className: "vicon vicon-close close",
                    onClick: () => {
                        j(!1)
                    }
                }), E_("h3", null, window.wplms_course_data.translations.upload_csv_to_add_students)), E_("div", {
                    className: "upload_csv_area"
                }, E_("input", {
                    type: "file",
                    id: "import_students",
                    ref: a,
                    type: "file",
                    onChange: e => {
                        a.current.files[0].size < window.vibebp.settings.upload_limit ? (d(a.current.files[0]), i(!0)) : D_("vibebp").addNotification({
                            text: window.vibebp.translations.image_size_error
                        })
                    }
                }), E_("label", {
                    for: "import_students"
                }, l ? l.name ? l.name : window.wplms_course_data.translations.uploaded : window.wplms_course_data.translations.click_to_upload)), E_("div", {
                    className: "upload_csv_actions"
                }, E_("a", n ? {
                    className: o ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        r(!0);
                        let e = {
                            token: H_("vibebp").getToken(),
                            course_id: T
                        };
                        var t = new FormData;
                        t.append("body", JSON.stringify(e)), t.append("file", l), fetch(`${window.wplms_course_data.api_url}/instructor/import_students?upload`, {
                            method: "post",
                            body: t
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            r(!1), e.status && (j(!1), O({
                                paged: 1,
                                orderby: "alphabetical",
                                order: "DESC",
                                course_status: "",
                                active_status: "",
                                search_terms: "",
                                per_page: 20
                            })), e.hasOwnProperty("message") && D_("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            r(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                } : {
                    className: "button is-primary is-disabled"
                }, window.wplms_course_data.translations.upload), E_("a", {
                    className: "button is-primary",
                    href: window.wplms_course_data.course.admin.sample_import_students_file,
                    target: "_blank",
                    download: "download"
                }, window.wplms_course_data.translations.download_sample)))) : "bulk_message_students" == $ ? E_("div", {
                    className: "bulk_action_single"
                }, E_("label", null, window.wplms_course_data.translations.bulk_message_students), E_("div", {
                    className: "checkbox"
                }, E_("input", {
                    type: "checkbox",
                    id: "all_students",
                    checked: le.all,
                    onClick: () => de({
                        ...le,
                        all: !le.all
                    })
                }), E_("label", {
                    for: "all_students"
                }, window.wplms_course_data.translations.all_students)), E_("input", {
                    type: "text",
                    placeholder: window.wplms_course_data.translations.message_subject,
                    value: le.subject,
                    onChange: e => de({
                        ...le,
                        subject: e.target.value
                    })
                }), E_("textarea", {
                    value: le.message,
                    placeholder: window.wplms_course_data.translations.message_content,
                    onChange: e => de({
                        ...le,
                        message: e.target.value
                    })
                }), E_("div", {
                    className: "bulk_action_button"
                }, E_("a", {
                    className: oe ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => (() => {
                        if (L && L.length || le.all) {
                            if (!(le.message.length > 5 && le.subject.length > 5)) return void D_("vibebp").addNotification({
                                text: window.wplms_course_data.translations.message_length_error
                            });
                            re(!0);
                            let e = {
                                method: "POST",
                                body: JSON.stringify({
                                    course_id: T,
                                    members: L && L.length ? L : 0,
                                    all: le.all ? 1 : 0,
                                    ...le,
                                    token: t.token
                                })
                            };
                            fetch(`${s}/instructor/courses/send_bulk_message?post`, e).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                re(!1), e && (e.status ? (D_("vibebp").addNotification({
                                    text: e.message
                                }), e.hasOwnProperty("rtm") && e.rtm.length && e.rtm.map((e => {
                                    D_("vibebp").sendRealTimeNotification(e.user_id, e.message)
                                })), j(!1)) : D_("vibebp").addNotification({
                                    text: e.message
                                }))
                            })).catch((e => {
                                re(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        } else D_("vibebp").addNotification({
                            text: window.wplms_course_data.translations.select_members
                        })
                    })()
                }, window.wplms_course_data.translations.send_message), E_("a", {
                    className: "link",
                    onClick: () => j(!1)
                }, window.wplms_course_data.translations.cancel))) : "") : ""), "add_student" == $ ? E_("div", {
                    className: "add_student"
                }, E_("div", {
                    className: "bulk_action_single vibebp_form"
                }, R.length ? E_("div", {
                    className: "search_student_results selected_students"
                }, R.map((e => E_("div", {
                    className: "search_student",
                    onClick: () => he(e)
                }, E_("img", {
                    className: "searched_image",
                    width: "32",
                    src: e.image
                }), E_("span", {
                    className: "searched_nickname"
                }, e.nickname))))) : "", E_("div", {
                    className: H ? "control is-loading vibebp_form_field" : "control vibebp_form_field"
                }, E_("input", {
                    type: "text",
                    placeholder: window.wplms_course_data.translations.search_student_to_add,
                    onChange: e => {
                        ie(e.target.value)
                    }
                })), F && F.length ? E_("div", {
                    className: "search_student_results"
                }, F.map((e => E_("div", {
                    className: "search_student",
                    onClick: () => he(e)
                }, E_("img", {
                    className: "searched_image",
                    width: "32",
                    src: e.image
                }), E_("span", {
                    className: "searched_nickname"
                }, e.nickname))))) : "", E_("div", {
                    className: "bulk_action_button"
                }, E_("a", {
                    className: A ? "button is-primary is-loading" : "button is-primary",
                    expand: "block",
                    fill: "outline",
                    onClick: () => (() => {
                        if (R && R.length) {
                            D(!0);
                            let e = {
                                method: "POST",
                                body: JSON.stringify({
                                    course_id: T,
                                    members: R.map((e => e.user_id)),
                                    token: t.token
                                })
                            };
                            fetch(`${s}/instructor/courses/add_members?post`, e).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                if (D(!1), e)
                                    if (e.status) {
                                        if (M([]), J([]), B([]), e.data && Array.isArray(e.data) && e.data.length) {
                                            let t = [...g];
                                            e.data.map((e => {
                                                t.push(e)
                                            })), y(t)
                                        }
                                        e.hasOwnProperty("rtm") && e.rtm.length && e.rtm.map((e => {
                                            D_("vibebp").sendRealTimeNotification(e.user_id, e.message)
                                        })), D_("vibebp").addNotification({
                                            text: e.message
                                        })
                                    } else D_("vibebp").addNotification({
                                        text: e.message
                                    })
                            })).catch((e => {
                                D(!1), console.error("Uh oh, an error!", e), D_("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    })()
                }, window.wplms_course_data.translations.add_students_to_course), E_("a", {
                    className: "link",
                    onClick: () => j(!1)
                }, window.wplms_course_data.translations.cancel)))) : ""))
            },
            {
                createElement: F_,
                render: J_,
                useState: R_,
                useEffect: B_,
                useContext: V_,
                Fragment: X_,
                RawHTML: W_
            } = wp.element,
            {
                dispatch: Y_,
                select: Q_
            } = wp.data,
            K_ = e => {
                const [t, a] = R_({}), [s, n] = R_(!1), [i, o] = R_(!1);
                return B_((() => {
                    a(e.note)
                }), [e.note]), t.hasOwnProperty("id") ? F_("div", {
                    className: "comment_wrapper"
                }, F_("span", null, t.course ? t.course.title : ""), F_("h3", {
                    className: "unit_title"
                }, F_("span", null, t.unit.icon.length > 100 ? F_("span", {
                    dangerouslySetInnerHTML: {
                        __html: t.unit.icon
                    }
                }) : F_("span", {
                    className: t.unit.icon
                }), F_("strong", {
                    dangerouslySetInnerHTML: {
                        __html: t.unit.title
                    }
                })), F_("span", null, s ? F_("span", {
                    className: "vicon vicon-close",
                    onClick: () => n(!1)
                }) : F_(X_, null, F_("span", {
                    className: "vicon vicon-pencil-alt",
                    onClick: () => n(!0)
                }), F_("span", {
                    className: "vicon vicon-trash",
                    onClick: () => {
                        fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${t.unit.id}/trash/${t.id}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...t,
                                token: Q_("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            e.remove()
                        })).catch((e => {
                            console.error("Uh oh, an error!", e), Y_("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                })))), F_("div", {
                    className: "comments_comment_content"
                }, F_(Ot, {
                    timestamp: t.comment_date
                }), s ? F_("textarea", {
                    value: t.comment_content,
                    onChange: e => a({
                        ...t,
                        comment_content: e.target.value
                    })
                }) : F_("div", {
                    dangerouslySetInnerHTML: {
                        __html: t.comment_content
                    }
                }), s ? F_("div", {
                    className: "comment_actions"
                }, F_("a", {
                    className: i ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        o(!0), fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${t.unit.id}/edit/${t.id}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...t,
                                token: Q_("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            o(!1), e.hasOwnProperty("message") && Y_("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            o(!1), console.error("Uh oh, an error!", e), Y_("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.edit), F_("a", {
                    className: "link",
                    onClick: () => n(!1)
                }, window.wplms_course_data.translations.cancel)) : "")) : ""
            },
            {
                createElement: G_,
                render: Z_,
                useState: ew,
                useEffect: tw,
                useContext: aw,
                Fragment: sw,
                RawHTML: nw
            } = wp.element,
            {
                dispatch: iw,
                select: ow
            } = wp.data,
            rw = e => {
                const [t, a] = ew({}), [s, n] = ew(!1), [i, o] = ew(!1);
                return tw((() => {
                    a(e.discussion)
                }), [e.discussion]), t && t.id ? G_("div", {
                    className: "comment_wrapper"
                }, G_("span", null, t.course ? t.course.title : ""), G_("h3", {
                    className: "unit_title"
                }, G_("span", null, t.unit.icon.length > 100 ? G_("span", {
                    dangerouslySetInnerHTML: {
                        __html: t.unit.icon
                    }
                }) : G_("span", {
                    className: t.unit.icon
                }), G_("strong", {
                    dangerouslySetInnerHTML: {
                        __html: t.unit.title
                    }
                })), G_("span", null, s ? G_("span", {
                    className: "vicon vicon-close",
                    onClick: () => n(!1)
                }) : G_(sw, null, G_("span", {
                    className: "vicon vicon-pencil-alt",
                    onClick: () => n(!0)
                }), G_("span", {
                    className: "vicon vicon-trash",
                    onClick: () => {
                        fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${t.unit.id}/edit/${t.id}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...t,
                                token: ow("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            e.remove()
                        })).catch((e => {
                            console.error("Uh oh, an error!", e), iw("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                })))), G_("div", {
                    className: "comments_parent"
                }, G_("div", {
                    className: "comments_comment"
                }, G_(jl, {
                    id: {
                        user_id: t.user_id
                    },
                    type: "user"
                }), G_("div", {
                    className: "comments_comment_content"
                }, G_(Ot, {
                    timestamp: t.comment_date
                }), s ? G_("textarea", {
                    value: t.comment_content,
                    onChange: e => a({
                        ...t,
                        comment_content: e.target.value
                    })
                }) : G_("div", {
                    dangerouslySetInnerHTML: {
                        __html: t.comment_content
                    }
                }), s ? G_("div", {
                    className: "comment_actions"
                }, G_("a", {
                    className: i ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        o(!0), fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${t.unit.id}/edit/${t.id}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...t,
                                token: ow("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            o(!1), e.hasOwnProperty("message") && iw("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            o(!1), console.error("Uh oh, an error!", e), iw("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.edit), G_("a", {
                    className: "link",
                    onClick: () => n(!1)
                }, window.wplms_course_data.translations.cancel)) : "")), t.hasOwnProperty("chain") ? G_("div", {
                    className: "comments_children"
                }, G_(Al, {
                    user_ids: t.chain.map(((e, t) => e.user_id)),
                    type: "user_tip"
                }, t.chain.map((e => G_("div", {
                    className: "comments_comment"
                }, G_(jl, {
                    id: {
                        user_id: e.user_id
                    },
                    type: "user_tip"
                }), G_("div", {
                    className: "comments_comment_content"
                }, G_(Ot, {
                    timestamp: e.comment_date
                }), G_("div", {
                    dangerouslySetInnerHTML: {
                        __html: e.comment_content
                    }
                }))))))) : "")) : ""
            },
            {
                createElement: lw,
                render: dw,
                useState: cw,
                useEffect: uw,
                useContext: mw,
                Fragment: pw,
                RawHTML: _w
            } = wp.element,
            ww = e => {
                const [t, a] = cw([]), [s, n] = cw((() => {
                    let t = e.maxstars ? e.maxstars - 1 : 4,
                        a = [];
                    for (; t >= 0;) a.unshift(t), t--;
                    return a
                }));
                return uw((() => {
                    let t = e.rating ? e.rating - 1 : -1,
                        s = [];
                    for (; t >= 0;) s.unshift(t), t--;
                    a(s)
                }), [e.rating]), t && t.length >= 0 ? lw("div", {
                    className: "wplms-course-star-rating"
                }, s.map(((s, n) => {
                    let i = 0;
                    return t.includes(n) && (i = 1), lw("span", {
                        className: "vicon vicon-star " + (i ? "golden" : ""),
                        onClick: t => {
                            (t => {
                                let s = [];
                                for (; t >= 0;) s.unshift(t), t--;
                                a(s), e.update(s, "ratingchanged")
                            })(n)
                        }
                    })
                }))) : ""
            },
            {
                createElement: vw,
                render: hw,
                useState: fw,
                useEffect: gw,
                useContext: yw,
                Fragment: bw,
                RawHTML: kw
            } = wp.element,
            {
                dispatch: xw,
                select: Nw
            } = wp.data,
            qw = e => {
                const [t, a] = fw({}), [s, n] = fw(!1), [i, o] = fw(!1), [r, l] = fw(!1), [d, c] = fw({}), [u, m] = fw(!1);
                let p = Nw("vibebp").getUser();
                return gw((() => {
                    a(e.review)
                }), [e.review]), t && t.id ? vw("div", {
                    className: "comment_wrapper"
                }, vw("span", null, vw("span", null, t.course ? t.course.title : ""), vw("span", null, parseInt(p.id) === parseInt(t.user_id) ? vw("span", i ? {
                    className: "vicon vicon-close",
                    onClick: () => o(!1)
                } : {
                    className: "vicon vicon-pencil-alt",
                    onClick: () => o(!0)
                }) : "")), vw("div", {
                    className: "review_main"
                }, vw("div", {
                    className: "comments_comment"
                }, vw(jl, {
                    id: {
                        user_id: t.user_id
                    },
                    type: "user_tip"
                }), vw("div", {
                    className: "comments_comment_content"
                }, i ? vw(bw, null, vw("input", {
                    type: "text",
                    value: t.review_title,
                    onChange: e => {
                        a({
                            ...t,
                            review_title: e.target.value
                        })
                    }
                }), vw("span", null, vw("span", null, vw(ww, {
                    rating: t.review_rating,
                    maxstars: "5",
                    update: (e, s) => {
                        if ("ratingchanged" == s) {
                            let s = 0;
                            e && (s = e.length), a({
                                ...t,
                                review_rating: s
                            })
                        }
                    }
                }), t.review_rating), vw(Ot, {
                    timestamp: t.comment_date
                })), vw("textarea", {
                    value: t.comment_content,
                    onChange: e => {
                        a({
                            ...t,
                            comment_content: e.target.value
                        })
                    }
                })) : vw(bw, null, vw("h3", {
                    className: "creview_title"
                }, t.review_title), vw("span", null, vw("span", null, vw(ww, {
                    rating: t.review_rating,
                    maxstars: "5"
                }), t.review_rating), vw(Ot, {
                    timestamp: t.comment_date
                })), vw("div", {
                    dangerouslySetInnerHTML: {
                        __html: t.comment_content
                    }
                })), i ? vw("div", {
                    className: "comment_actions"
                }, vw("a", {
                    className: s ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        n(!0), fetch(`${window.wplms_course_data.api_url}/updatecourse/addreview?post`, {
                            method: "post",
                            body: JSON.stringify({
                                review: t.comment_content,
                                title: t.review_title,
                                rating: t.review_rating,
                                course_id: t.course.id,
                                token: Nw("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            n(!1), e.hasOwnProperty("message") && xw("vibebp").addNotification({
                                text: e.message
                            }), o(!1)
                        })).catch((e => {
                            n(!1), console.error("Uh oh, an error!", e), xw("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.edit), vw("a", {
                    className: "link",
                    onClick: () => o(!1)
                }, window.wplms_course_data.translations.cancel)) : "")), t.hasOwnProperty("chain") ? vw("div", {
                    className: "discussion_children"
                }, t.chain.map((e => vw("div", {
                    className: "comments_comment"
                }, vw(jl, {
                    id: {
                        user_id: e.user_id
                    },
                    type: "user_tip"
                }), vw("div", {
                    className: "comments_comment_content"
                }, vw(Ot, {
                    timestamp: e.comment_date
                }), vw("div", {
                    dangerouslySetInnerHTML: {
                        __html: e.comment_content
                    }
                })), vw("a", {
                    className: "vicon vicon-pencil-alt cursor",
                    onClick: () => {
                        c({
                            ...e
                        }), l(!0)
                    }
                }))))) : "", vw("div", {
                    className: "replybox"
                }, !t.hasOwnProperty("can_reply") || !t.can_reply || t.hasOwnProperty("chain") && t.chain.length || r ? "" : vw("a", {
                    className: "link",
                    onClick: () => {
                        l(!0), c({
                            ...d,
                            comment_parent: t.id,
                            comment_post_ID: t.comment_post_ID
                        })
                    }
                }, window.wplms_course_data.translations.reply), r ? vw(bw, null, vw("textarea", {
                    onChange: e => {
                        c({
                            ...d,
                            comment_content: e.target.value
                        })
                    },
                    value: d.comment_content,
                    placeHolder: window.wplms_course_data.translations.enter_your_reply
                }), d.hasOwnProperty("comment_content") && d.comment_content.length ? vw("div", {
                    className: "buttons"
                }, vw("a", {
                    className: "button is-primary " + (u ? "is-loading" : ""),
                    onClick: () => {
                        if (d.hasOwnProperty("comment_content") && d.comment_content.length) {
                            if (m(!0), !d.comment_content || d.comment_content.length < 4) return void xw("vibebp").addNotification({
                                text: window.wplms_course_data.translations.add_more_content
                            });
                            fetch(`${window.wplms_course_data.api_url}/instructor/comments/item/reply?post`, {
                                method: "post",
                                body: JSON.stringify({
                                    ...d,
                                    token: Nw("vibebp").getToken()
                                })
                            }).then((e => e.json())).then((e => {
                                if (m(!1), e)
                                    if (e.comment_data) {
                                        let s = {
                                            ...t
                                        };
                                        if (s.hasOwnProperty("chain") || (s.chain = []), s.chain.length) {
                                            let t = s.chain.findIndex((t => parseInt(t.comment_ID) == parseInt(e.comment_data.comment_ID)));
                                            t > -1 && (s.chain[t] = e.comment_data)
                                        } else s.chain.push(e.comment_data);
                                        a(s), c({}), l(!1)
                                    } else xw("vibebp").addNotification({
                                        text: window.wplms_course_data.translations.error
                                    })
                            }))
                        }
                    }
                }, window.wplms_course_data.translations.reply), vw("a", {
                    className: "link",
                    onClick: () => {
                        c({}), l(!1)
                    }
                }, window.wplms_course_data.translations.cancel)) : "") : ""))) : ""
            },
            {
                createElement: Ow,
                render: Iw,
                useState: Cw,
                useEffect: Sw,
                useContext: Pw,
                Fragment: Ew,
                RawHTML: zw
            } = wp.element,
            {
                dispatch: Tw,
                select: Lw
            } = wp.data,
            Mw = e => {
                const [t, a] = Cw(!1), [s, n] = Cw({
                    type: window.wplms_course_data.notes.tabs[0].key,
                    s: "",
                    page: 1,
                    orderby: "comment_date_gmt",
                    order: "DESC",
                    post_author: "",
                    type: "notes",
                    user_id: ""
                }), [i, o] = Cw(!1), [r, l] = Cw(!0), [d, c] = Cw([]), [u, m] = Cw(""), [_, w] = Cw(null), [v, h] = Cw(!1), [f, g] = Cw(!1);
                Sw((() => {
                    let t = {
                        ...s
                    };
                    e.hasOwnProperty("tabs") && (t.type = e.tabs[0]), e.hasOwnProperty("course") && ("object" == typeof e.course ? t.course = e.course.id : t.course = e.course), t.user_id = Lw("vibebp").getUser().id, n(t)
                }), []), Sw((() => (document.addEventListener("vibebp_component_reload", y, !1), () => {
                    document.removeEventListener("vibebp_component_reload", y)
                })));
                const y = () => {
                    g(!1), n({
                        ...s,
                        page: 1
                    })
                };
                p((() => {
                    if (f && !v) return;
                    _ && _.abort();
                    let t = {},
                        n = new AbortController;
                    _ && (t = {
                        signal: n.signal
                    }), w(n);
                    let r = {
                        ...s
                    };
                    "notes" == r.type ? r.type = "notes" : "discussions" == r.type ? r.type = "discussions" : "reviews" == r.type ? (r.type = "reviews", r.fetch_meta = ["review_title", "review_rating"]) : r.type = "public";
                    let u = `${window.wplms_course_data.api_url}/student/comments/0`;
                    void 0 !== r.course && (u = "instructor" == e.type ? `${window.wplms_course_data.api_url}/instructor/comments/${r.course}` : `${window.wplms_course_data.api_url}/student/comments/${r.course}`);
                    let p = {
                            ...s
                        },
                        y = 0;
                    p && p.hasOwnProperty("s") && void 0 !== p.s && p.s.length && (delete p.s, y = 1), u += `?args=${encodeURIComponent(JSON.stringify(p))}&force`, !f && y && (u += "&nocache"), a(!0), fetch(u, {
                        method: "post",
                        ...t,
                        body: JSON.stringify({
                            ...r,
                            token: Lw("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (l(!1), e.status)
                            if (i) {
                                if (e.hasOwnProperty("comments") && e.comments.length) {
                                    let t = [...d, e.comments];
                                    c(t), l(!0)
                                } else s.s.length || g(!0);
                                o(!1)
                            } else c([]), e.hasOwnProperty("comments") && e.comments.length ? (l(!0), c(e.comments)) : s.s.length || g(!0);
                        else v && c([]), e.hasOwnProperty("message") && m(e.message);
                        a(!1), h(!1)
                    })).catch((e => {
                        "AbortError" === e.name ? console.log("Fetch aborted") : (a(!1), h(!1), console.error("Uh oh, an error!", e), Tw("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [s]);
                let b = [...d];
                if (s.s.length && (b = b.filter((e => e.comment_content.toLowerCase().includes(s.s.toLowerCase())))), s.orderby.length && s.order) switch (s.orderby) {
                    case "comment_date_gmt":
                    default:
                        "DESC" == s.order ? b.sort((function(e, t) {
                            return t.comment_date - e.comment_date
                        })) : b.sort((function(e, t) {
                            return e.comment_date - t.comment_date
                        }));
                        break;
                    case "alphabetical":
                        "DESC" == s.order ? b.sort((function(e, t) {
                            return t.comment_content.localeCompare(e.comment_content)
                        })) : b.sort((function(e, t) {
                            return e.comment_content.localeCompare(t.comment_content)
                        }))
                }
                return Ow("div", {
                    className: "all_comments_wrapper"
                }, Ow("div", {
                    className: "mycourses_header vibebp_form"
                }, e.hasOwnProperty("tabs") ? "" : Ow("div", {
                    className: "header_tabs"
                }, window.wplms_course_data.notes.tabs.map((t => {
                    if (!e.hasOwnProperty("tabs") || e.tabs.indexOf(t)) return t.key == s.type ? Ow("a", {
                        className: "button is-primary"
                    }, t.label) : Ow("a", {
                        className: "link",
                        onClick: () => {
                            h(!0), g(!1), n({
                                ...s,
                                type: t.key,
                                page: 1
                            }), c([])
                        }
                    }, t.label)
                }))), Ow("div", {
                    className: "flex2"
                }, Ow("div", {
                    className: "control vibebp_form_field"
                }, Ow("input", {
                    type: "text",
                    placeholder: window.wplms_course_data.translations.search,
                    value: s.s,
                    onChange: e => {
                        n({
                            ...s,
                            s: e.target.value
                        })
                    }
                }), Ow("span", {
                    className: "vicon vicon-search"
                })), Ow("span", null, Ow("span", null, Ow("span", {
                    className: "DESC" == s.order ? "active vicon vicon-angle-down" : "vicon vicon-angle-down",
                    onClick: () => n({
                        ...s,
                        order: "DESC"
                    })
                }), Ow("span", {
                    className: "ASC" == s.order ? "active vicon vicon-angle-up" : "vicon vicon-angle-up",
                    onClick: () => n({
                        ...s,
                        order: "ASC"
                    })
                }))))), v ? Ow(wl, null) : Ow("div", {
                    className: "comments_wrapper"
                }, !i && t ? Ow(wl, null) : "", b.length ? Ow(Ew, null, b.map(((e, t) => {
                    switch (s.type) {
                        case "notes":
                            return Ow(K_, {
                                note: e,
                                update: e => updateComment(t, e),
                                remove: () => {
                                    let e = [...d];
                                    e.splice(t, 1), c(e)
                                }
                            });
                        case "discussions":
                            return Ow(rw, {
                                discussion: e,
                                update: e => updateComment(t, e),
                                remove: () => {
                                    let e = [...d];
                                    e.splice(t, 1), c(e)
                                }
                            });
                        case "reviews":
                            return Ow(qw, {
                                review: e,
                                update: e => updateComment(t, e),
                                remove: () => {
                                    let e = [...d];
                                    e.splice(t, 1), c(e)
                                }
                            })
                    }
                })), !t && r ? Ow("a", {
                    className: "link",
                    onClick: () => {
                        o(!0), n({
                            ...s,
                            page: s.page + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : t && i ? Ow(wl, null) : "") : window.wplms_course_data.notes.tabs && window.wplms_course_data.notes.tabs.length && window.wplms_course_data.notes.tabs.findIndex((e => s.type == e.key)) > -1 ? Ow("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.notes.tabs[window.wplms_course_data.notes.tabs.findIndex((e => s.type == e.key))].not_found) : ""))
            },
            {
                createElement: $w,
                render: jw,
                useState: Aw,
                useEffect: Dw,
                useContext: Hw,
                Fragment: Uw,
                RawHTML: Fw
            } = wp.element,
            {
                dispatch: Jw,
                select: Rw
            } = wp.data,
            Bw = e => {
                const [t, a] = Aw(e.question), [s, n] = Aw(!1), [i, o] = Aw(!1);
                return Dw((() => {
                    a(e.question)
                }), [e.question]), t.hasOwnProperty("unit") ? $w("div", {
                    className: "comment_wrapper"
                }, $w("h3", null, $w("span", null, $w("span", {
                    className: t.unit.icon
                }), $w("p", {
                    dangerouslySetInnerHTML: {
                        __html: t.unit.title
                    }
                })), " ", $w("span", {
                    dangerouslySetInnerHTML: {
                        __html: t.course.title
                    }
                })), $w("div", {
                    className: "question_main"
                }, $w("div", {
                    className: "comments_comment"
                }, $w(jl, {
                    id: {
                        user_id: t.user_id
                    },
                    type: "user_tip"
                }), $w("div", {
                    className: "comments_comment_content"
                }, $w("span", null, $w(Ot, {
                    timestamp: t.comment_date
                })), $w("div", {
                    dangerouslySetInnerHTML: {
                        __html: t.comment_content
                    }
                }))), t.hasOwnProperty("chain") && t.chain.length ? $w("div", {
                    className: "discussion_children"
                }, $w(Al, {
                    user_ids: t.chain.map((e => e.user_id)),
                    type: "user_tip"
                }, t.chain.map((e => $w("div", {
                    className: "comments_comment"
                }, $w(jl, {
                    id: {
                        user_id: e.user_id
                    },
                    type: "user_tip"
                }), $w("div", {
                    className: "comments_comment_content"
                }, $w(Ot, {
                    timestamp: e.comment_date
                }), $w("div", {
                    dangerouslySetInnerHTML: {
                        __html: e.comment_content
                    }
                })), e.user_id == Rw("vibebp").getUser().id ? $w("span", {
                    className: "vicon vicon-pencil",
                    onClick: () => n({
                        id: e.id,
                        ctype: "edit",
                        comment_content: e.comment_content,
                        comment_author: Rw("vibebp").getUser().id,
                        comment_post_ID: t.unit.id,
                        comment_parent: t.id
                    })
                }) : ""))))) : "", $w("div", {
                    className: "comments_actions"
                }, s ? $w("div", {
                    className: "add_answer"
                }, $w(Hs, {
                    field: {
                        id: "comment_" + s.id,
                        value: s.comment_content
                    },
                    update: (e, t, a) => {
                        n({
                            ...s,
                            comment_content: e.value
                        })
                    }
                }), $w("div", {
                    className: "answer_actions"
                }, $w("a", {
                    className: i ? "button is-primary -is-loading" : "button is-primary",
                    onClick: () => {
                        if (!(s.comment_content && s.comment_content.length > 3)) return Jw("vibebp").addNotification({
                            text: window.wplms_course_data.translations.add_more_content
                        }), !1;
                        {
                            s.comment_post_ID || (s.comment_post_ID = e.question.unit.id);
                            let i = {
                                ...t
                            };
                            switch (s.ctype) {
                                case "new":
                                    i.chain.push(s), fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${e.question.unit.id}/new/0?post`, {
                                        method: "post",
                                        body: JSON.stringify({
                                            ...s,
                                            token: Rw("vibebp").getToken()
                                        })
                                    }).then((e => e.ok ? e.json() : {
                                        status: 0,
                                        message: window.wplms_course_data.translations.error_loading_data
                                    })).then((e => {
                                        e && (e.comment_data ? a(i) : Jw("vibebp").addNotification({
                                            text: e.message
                                        }))
                                    })).catch((e => {
                                        console.error("Uh oh, an error!", e), Jw("vibebp").addNotification({
                                            text: window.wplms_course_data.translations.error_loading_data
                                        })
                                    }));
                                    break;
                                case "edit":
                                    if (!s.comment_content || s.comment_content.length < 4) return void Jw("vibebp").addNotification({
                                        text: window.wplms_course_data.translations.add_more_content
                                    });
                                    o(!0), i.chain.splice(i.chain.findIndex((e => e.comment_ID == s.comment_ID)), 1, s), s.comment_content, fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${e.question.unit.id}/edit/${comment_id}?post`, {
                                        method: "post",
                                        body: JSON.stringify({
                                            ...s,
                                            token: Rw("vibebp").getToken()
                                        })
                                    }).then((e => e.json())).then((e => {
                                        o(!1), e && (e.comment_data ? a(i) : Jw("vibebp").addNotification({
                                            text: window.wplms_course_data.translations.error
                                        }))
                                    }));
                                    break;
                                case "reply":
                                    if (o("reply"), !s.comment_content || s.comment_content.length < 4) return void Jw("vibebp").addNotification({
                                        text: window.wplms_course_data.translations.add_more_content
                                    });
                                    i.chain.push(s), fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${e.question.unit.id}/reply/${s.comment_parent}?post`, {
                                        method: "post",
                                        body: JSON.stringify({
                                            ...s,
                                            token: Rw("vibebp").getToken()
                                        })
                                    }).then((e => e.json())).then((e => {
                                        o(!1), e && (e.comment_data ? a(i) : Jw("vibebp").addNotification({
                                            text: window.wplms_course_data.translations.error
                                        }))
                                    }))
                            }
                            n(!1)
                        }
                    }
                }, window.wplms_course_data.translations.answer_question), $w("a", {
                    className: "link",
                    onClick: () => n(!1)
                }, window.wplms_course_data.translations.cancel))) : Rw("vibebp").getUser().id == t.user_id || Rw("vibebp").getUser().caps.hasOwnProperty("edit_posts") ? $w(Uw, null, $w("a", {
                    className: i && "reply" == i ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => n({
                        id: 0,
                        ctype: "reply",
                        comment_content: "",
                        comment_author: Rw("vibebp").getUser().id,
                        comment_post_ID: t.unit.id,
                        comment_parent: t.id
                    })
                }, window.wplms_course_data.translations.answer), "pending" == e.args.type ? $w("a", {
                    className: i && "answered" == i ? "button is-link is-loading" : "button is-link",
                    onClick: () => {
                        o("answered"), fetch(`${window.wplms_course_data.api_url}/instructor/mark_question_answered?post`, {
                            method: "post",
                            body: JSON.stringify({
                                id: t.id,
                                token: Rw("vibebp").getToken()
                            })
                        }).then((e => e.json())).then((a => {
                            o(!1), a && a.status && e.update(t.id, "answered")
                        }))
                    }
                }, window.wplms_course_data.translations.mark_answered) : "") : $w("a", {
                    className: "button is-primary",
                    onClick: () => n({
                        id: 0,
                        ctype: "reply",
                        comment_content: "",
                        comment_author: Rw("vibebp").getUser().id,
                        comment_post_ID: t.unit.id,
                        comment_parent: t.id
                    })
                }, window.wplms_course_data.translations.reply)))) : ""
            },
            {
                createElement: Vw,
                render: Xw,
                useState: Ww,
                useEffect: Yw,
                useContext: Qw,
                Fragment: Kw,
                RawHTML: Gw
            } = wp.element,
            {
                dispatch: Zw,
                select: ev
            } = wp.data,
            tv = e => {
                const [t, a] = Ww(!1), [s, n] = Ww({
                    type: window.wplms_course_data.qna.tabs[0].key,
                    s: "",
                    page: 1,
                    orderby: "comment_date_gmt",
                    order: "DESC"
                }), [i, o] = Ww(!1), [r, l] = Ww(!1), [d, c] = Ww([]), [u, m] = Ww(""), [_, w] = Ww({}), [v, h] = Ww(null), [f, g] = Ww(!1), [y, b] = Ww(!1);
                Yw((() => {
                    g(!0), b(!1), n({
                        ...s,
                        course: e.course
                    })
                }), [e.course]), p((() => {
                    if (y && !f) return;
                    v && v.abort();
                    let t = {},
                        n = new AbortController;
                    v && (t = {
                        signal: n.signal
                    }), h(n);
                    let u = `${window.wplms_course_data.api_url}/instructor/comments/${e.course}`;
                    e.hasOwnProperty("type") && e.type.length && (u = `${window.wplms_course_data.api_url}/${e.type}/comments/${e.course}`);
                    let p = {
                            ...s
                        },
                        _ = 0;
                    p && p.hasOwnProperty("s") && void 0 !== p.s && p.s.length && (delete p.s, _ = 1), u += `?args=${encodeURIComponent(JSON.stringify(p))}&force`, r && _ && (u += "&nocache"), a(!0), fetch(u, {
                        method: "post",
                        ...t,
                        body: JSON.stringify({
                            ...s,
                            token: ev("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (a(!1), l(!1), e.status)
                            if (i) {
                                if (e.hasOwnProperty("comments") && e.comments.length) {
                                    let t = [...d, ...e.comments];
                                    l(!0), c(t)
                                } else l(!1), s.s.length || b(!0);
                                o(!1)
                            } else c([]), e.hasOwnProperty("comments") && e.comments.length ? (l(!0), c(e.comments)) : (l(!1), s.s.length || b(!0));
                        else f && c([]), e.hasOwnProperty("message") && m(e.message);
                        g(!1)
                    })).catch((e => {
                        "AbortError" === e.name ? a(!0) : (a(!1), g(!1), console.error("Uh oh, an error!", e), Zw("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [s]);
                const k = (e, t) => {
                    if ("answered" == t) {
                        let t = [...d],
                            a = t.findIndex((t => t.id == e));
                        a > -1 && (t.splice(a, 1), c(t))
                    }
                };
                let x = [...d];
                if (s.s.length && (x = x.filter((e => e.comment_content.toLowerCase().includes(s.s.toLowerCase())))), s.orderby.length && s.order) switch (s.orderby) {
                    case "comment_date_gmt":
                    default:
                        "DESC" == s.order ? x.sort((function(e, t) {
                            return t.comment_date - e.comment_date
                        })) : x.sort((function(e, t) {
                            return e.comment_date - t.comment_date
                        }));
                        break;
                    case "alphabetical":
                        "DESC" == s.order ? x.sort((function(e, t) {
                            return t.comment_content.localeCompare(e.comment_content)
                        })) : x.sort((function(e, t) {
                            return e.comment_content.localeCompare(t.comment_content)
                        }))
                }
                return Vw("div", {
                    className: "questionanswers_wrapper"
                }, Vw("div", {
                    className: "mycourses_header vibebp_form"
                }, Vw("div", {
                    className: "header_tabs"
                }, window.wplms_course_data.qna.tabs.map((e => e.key == s.type ? Vw("a", {
                    className: "button is-primary"
                }, e.label) : Vw("a", {
                    className: "link",
                    onClick: () => {
                        g(!0), b(!1), n({
                            ...s,
                            type: e.key,
                            page: 1
                        }), c([])
                    }
                }, e.label)))), Vw("div", null, Vw("div", {
                    className: "control vibebp_form_field"
                }, Vw("input", {
                    type: "text",
                    placeholder: window.wplms_course_data.translations.search,
                    value: s.s,
                    onChange: e => {
                        n({
                            ...s,
                            s: e.target.value
                        })
                    }
                }), Vw("span", {
                    className: "vicon vicon-search"
                })), Vw("span", null, Vw("span", null, Vw("span", {
                    className: "DESC" == s.order ? "active vicon vicon-angle-down" : "vicon vicon-angle-down",
                    onClick: () => n({
                        ...s,
                        order: "DESC"
                    })
                }), Vw("span", {
                    className: "ASC" == s.order ? "active vicon vicon-angle-up" : "vicon vicon-angle-up",
                    onClick: () => n({
                        ...s,
                        order: "ASC"
                    })
                }))))), !i && f ? Vw(wl, null) : Vw("div", {
                    className: "questions_answers"
                }, !i && t ? Vw(wl, null) : "", Vw("div", {
                    className: "comments_wrapper"
                }, x.length ? Vw(Kw, null, Vw(Al, {
                    user_ids: x.map((e => e.user_id)),
                    type: "user_tip"
                }, x.map((e => Vw(Bw, {
                    question: e,
                    update: k,
                    args: s
                }))), !t && r ? Vw("a", {
                    className: "link",
                    onClick: () => {
                        o(!0), n({
                            ...s,
                            page: s.page + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : t && i ? Vw(wl, null) : "")) : Vw("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_questions))))
            },
            {
                createElement: av,
                render: sv,
                useState: nv,
                useEffect: iv,
                Fragment: ov,
                useContext: rv
            } = wp.element,
            {
                dispatch: lv,
                select: dv
            } = wp.data,
            cv = e => {
                const [t, a] = nv(!1), [s, n] = nv([]), [i, o] = nv([]), [r, l] = nv(!1), [d, c] = nv(!1), [u, m] = nv("media"), [_, w] = nv((() => {
                    let t = {
                        posts_per_page: 20,
                        paged: 1,
                        search_terms: "",
                        orderby: ""
                    };
                    if (e.hasOwnProperty("type") && void 0 !== e.type) {
                        let a = e.type;
                        !1 !== e.type.indexOf(",") && (a = e.type.split(",")), t.post_mime_type = a
                    }
                    return t
                }));
                p((() => {
                    a(!0), fetch(`${window.vibebp.api.url}/user/fetch_media`, {
                        method: "post",
                        body: JSON.stringify({
                            ..._,
                            token: dv("vibebp").getToken()
                        })
                    }).then((e => e.json())).then((e => {
                        if (a(!1), e.status)
                            if (d) {
                                let t = [...s];
                                e.data.map((e => {
                                    t.push(e)
                                })), n(t), c(!1), t.length < parseInt(e.total) ? l(!0) : l(!1)
                            } else n(e.data), e.data.length < parseInt(e.total) ? l(!0) : l(!1)
                    }))
                }), 500, [_]);
                const v = t => {
                        e.share(t)
                    },
                    h = e => {
                        switch (e.type) {
                            case "image":
                                return av("img", {
                                    src: e.url,
                                    className: "content_to_html_image"
                                });
                            case "video":
                                return av("div", {
                                    className: "video_wrapper"
                                }, av("video", {
                                    className: "content_to_html_video",
                                    ref: e => {
                                        e && new Plyr(e)
                                    }
                                }, av("source", {
                                    src: e.url,
                                    type: "video/mp4"
                                })));
                            case "audio":
                                return av("div", {
                                    className: "video_wrapper"
                                }, av("audio", {
                                    className: "content_to_html_audio audio",
                                    ref: e => {
                                        e && new Plyr(e)
                                    }
                                }, av("source", {
                                    src: e.url,
                                    type: "audio/mp3"
                                })))
                        }
                    };
                return av("div", {
                    className: "vibe_editor_modal"
                }, av("div", {
                    className: "ve_modal-content"
                }, av("div", {
                    className: "ve_modal-header"
                }, av("div", null, window.vibebp.settings.media_tabs ? Object.keys(window.vibebp.settings.media_tabs).map((t => {
                    if ("upload" != t || !window.vibebp.settings.hasOwnProperty("upload_capability") || !window.vibebp.settings.upload_capability) return av("a", {
                        className: u == t ? "active" : "",
                        onClick: () => {
                            m(t)
                        }
                    }, window.vibebp.settings.media_tabs[t]);
                    {
                        let a = dv("vibebp").getUser();
                        if (void 0 !== a && a.hasOwnProperty("caps") && void 0 !== a.caps) {
                            let s = 0;
                            if (Array.isArray(a.caps) ? a.caps.findIndex(((e, t) => e == window.vibebp.settings.upload_capability)) > -1 && (s = 1) : "object" == typeof a.caps && Object.keys(a.caps).map(((e, t) => {
                                    e === window.vibebp.settings.upload_capability && a.caps[e] && (s = 1)
                                })), e.hasOwnProperty("allow_upload") && e.allow_upload && (s = 1), s) return av("a", {
                                className: u == t ? "active" : "",
                                onClick: () => {
                                    m(t)
                                }
                            }, window.vibebp.settings.media_tabs[t])
                        }
                    }
                })) : ""), av("span", {
                    className: "vicon vicon-close",
                    onClick: t => {
                        e.close(!1)
                    }
                })), av("div", {
                    className: "ve_modal-body"
                }, "media" == u ? av(ov, null, av("div", {
                    className: "vibebp_form"
                }, av("div", {
                    className: "vibebp_form_field"
                }, av("input", {
                    type: "text",
                    placeholder: window.vibebp.translations.search_text,
                    onChange: e => w({
                        ..._,
                        search_terms: e.target.value
                    })
                })), av("div", {
                    className: "vibebp_form_field"
                }, av("select", {
                    onChange: e => {
                        w({
                            ..._,
                            order: e.target.value
                        })
                    }
                }, Object.keys(window.vibeEditor.media_order).map((e => av("option", {
                    value: e
                }, window.vibeEditor.media_order[e])))))), t ? av("div", {
                    className: "loading-roller"
                }, av("div", null), av("div", null), av("div", null), av("div", null), av("div", null), av("div", null), av("div", null), av("div", null)) : s && s.length ? av("div", {
                    className: "allMedia"
                }, s.map(((t, a) => av("div", {
                    className: "single_media"
                }, av("span", {
                    onClick: a => {
                        v(t), e.close(!1)
                    }
                }, h(t)), av("span", {
                    className: "filename",
                    onClick: a => {
                        v(t), e.close(!1)
                    }
                }, t.name))))) : av("div", {
                    className: "vbp_message"
                }, window.vibebp.translations.no_media), r ? av("a", {
                    className: "link",
                    onClick: () => {
                        w({
                            ..._,
                            paged: _.paged + 1
                        }), c(!0)
                    }
                }, window.vibebp.translations.more) : "") : "upload" === u ? av(ov, null, av("div", {
                    className: "upload_media"
                }, av("label", {
                    for: "vibe_editor_upload_media"
                }, window.vibebp.translations.upload_media), av("input", {
                    type: "file",
                    id: "vibe_editor_upload_media",
                    onChange: e => (e => {
                        if (e.target.files[0]) {
                            let t = new FormData;
                            t.append("file", e.target.files[0]), t.append("body", JSON.stringify({
                                token: dv("vibebp").getToken()
                            })), fetch(`${window.vibebp.api.url}/user/upload_media?upload`, {
                                method: "post",
                                body: t
                            }).then((e => e.json())).then((e => {
                                if (e.status) {
                                    let t = [...s];
                                    t.unshift(e.data), n(t), m("media")
                                } else e.hasOwnProperty("message") && lv("vibebp").addNotification({
                                    text: e.message
                                })
                            }))
                        }
                    })(e)
                }), i && i.length ? av("div", {
                    className: "uploaded"
                }, av("strong", null, window.vibebp.translations.uploaded_media), av("div", {
                    className: "uploaded_files"
                }, i.map(((e, t) => av("div", {
                    className: "single_media",
                    onClick: t => {
                        v(e)
                    }
                }, h(e)))))) : "")) : "")))
            },
            {
                createElement: uv,
                render: mv,
                useState: pv,
                useEffect: _v,
                Fragment: wv,
                useContext: vv,
                useRef: hv
            } = wp.element,
            {
                dispatch: fv,
                select: gv
            } = wp.data,
            yv = e => {
                const [t, a] = pv(!1), [s, n] = pv({}), [i, o] = pv(!1), [r, l] = pv(!1), [d, c] = pv([]), [u, m] = pv(null), [p, _] = pv(null);
                return _v((() => {
                    t ? document.querySelector(".vibebp_myprofile") && document.querySelector(".vibebp_myprofile").classList.add("popup_active") : document.querySelector(".vibebp_myprofile") && document.querySelector(".vibebp_myprofile").classList.remove("popup_active")
                }), [t]), _v((() => {
                    e.hasOwnProperty("media") && (e.field.value = e.media), e.field.hasOwnProperty("type") && n(e.field)
                }), [e.field]), _v((() => {
                    if (s.hasOwnProperty("value") && s.value && s.value.hasOwnProperty("type")) {
                        if ("audio" == s.value.type || "video" == s.value.type) {
                            let e = new Plyr(ref);
                            _(e)
                        }
                        if ("youtube" == s.value.type) {
                            let e = new Plyr(u);
                            _(e)
                        }
                        if ("vimeo" == s.value.type) {
                            let e = new Plyr(u);
                            _(e)
                        }
                        return () => {
                            p && p.destroy()
                        }
                    }
                }), [u, s]), uv("div", {
                    className: "media_wrapper"
                }, uv("div", {
                    className: "vicon vicon-plus",
                    onClick: () => {
                        a(!0)
                    }
                }), t ? uv(cv, {
                    type: e.type,
                    close: () => {
                        a(!1)
                    },
                    share: t => {
                        (t => {
                            let a = {
                                ...s
                            };
                            a.value = t, n(a), e.update(a, e.fieldIndex, "fieldvaluechanged")
                        })(t)
                    }
                }) : "")
            },
            {
                createElement: bv,
                render: kv,
                useState: xv,
                useEffect: Nv,
                useContext: qv,
                Fragment: Ov,
                RawHTML: Iv
            } = wp.element,
            {
                dispatch: Cv,
                select: Sv
            } = wp.data,
            Pv = e => {
                Sv("vibebp").getUser();
                const t = Sv("vibebp").getToken(),
                    [a, s] = xv([]),
                    [n, i] = xv({}),
                    [o, r] = xv(!1),
                    [l, d] = xv(""),
                    [c, u] = xv([]),
                    [m, p] = xv(!0),
                    [_, w] = xv(!1),
                    [v, h] = xv({}),
                    [f, g] = xv(0),
                    [y, b] = xv(0),
                    [k, x] = xv(0),
                    [N, q] = xv(!1),
                    [O, I] = xv(!1),
                    [C, S] = xv(!1),
                    [P, E] = xv(!1),
                    [z, T] = xv(-1),
                    [L, M] = xv(null);
                return Nv((() => {
                    s(e.statuses), u([]), h({}), p(!1), E(!0), S(!1), i({
                        type: e.type,
                        parentId: e.hasOwnProperty("parentId") ? e.parentId : 0,
                        id: e.id,
                        s: "",
                        status: e.statuses[0].value,
                        paged: 1,
                        orderby: "meta_id",
                        order: "DESC"
                    }), p(!0)
                }), [e.id, e.type]), Nv((() => {
                    if (!n.hasOwnProperty("type")) return;
                    if (!n.id) return;
                    if (C && !P) return;
                    L && L.abort();
                    let e = {},
                        a = new AbortController;
                    L && (e = {
                        signal: a.signal
                    }), M(a), r(!0), h({});
                    let s = {
                            ...n
                        },
                        i = 0;
                    s && s.hasOwnProperty("s") && "" !== s.s && (delete s.s, i = 1);
                    let o = `${window.wplms_course_data.api_url}/instructor/getSubmissions/${n.id}?args=${encodeURIComponent(JSON.stringify(s))}&force`;
                    i && (o += "&nocache"), fetch(o, {
                        method: "POST",
                        ...e,
                        body: JSON.stringify({
                            ...n,
                            token: t
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (r(!1), e.status)
                            if (_) {
                                let t = [...c, ...e.data];
                                t.length < parseInt(e.total) ? p(!0) : (p(!1), n.s.length || S(!0)), u(t), w(!1)
                            } else u(e.data), e.data.length < parseInt(e.total) ? p(!0) : (p(!1), n.s.length || S(!0));
                        else u([]), d(e.message), p(!1)
                    })).catch((e => {
                        "AbortError" === e.name ? r(!0) : (console.error("Uh oh, an error!", e), r(!1), Cv("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), [n]), bv("div", {
                    className: "course_submissions_wrapper"
                }, n.hasOwnProperty("type") && e.id ? bv("div", {
                    className: "mycourses_header"
                }, bv("div", {
                    className: "mycourses_access_tabs"
                }, a.map(((e, t) => bv("a", {
                    value: e.value,
                    className: n.status == e.value ? "button is-primary" : "link",
                    onClick: t => {
                        E(!0), i({
                            ...n,
                            status: e.value
                        })
                    }
                }, e.label, " ")))), "assignment" !== e.type ? bv("div", null, bv("div", {
                    class: "vibebp_form_field"
                }, bv("input", {
                    type: "text",
                    value: n.s,
                    onChange: e => {
                        i({
                            ...n,
                            s: e.target.value
                        })
                    },
                    placeholder: window.wplms_course_data.translations.search_student
                }), bv("span", {
                    className: "vicon vicon-search"
                })), bv("div", null, bv("select", {
                    value: n.orderby,
                    onChange: e => {
                        i({
                            ...n,
                            orderby: e.target.value
                        })
                    }
                }, Object.keys(window.wplms_course_data.course.admin.submission_orderby).map((e => bv("option", {
                    value: e,
                    dangerouslySetInnerHTML: {
                        __html: window.wplms_course_data.course.admin.submission_orderby[e]
                    }
                })))), bv("span", null, bv("span", {
                    className: "ASC" == n.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                    onClick: () => {
                        i({
                            ...n,
                            order: "ASC"
                        })
                    }
                }), bv("span", {
                    className: "DESC" == n.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                    onClick: () => {
                        i({
                            ...n,
                            order: "DESC"
                        })
                    }
                })))) : "") : "", o ? bv(wl, null) : v.hasOwnProperty("total_marks") && "quiz" == n.type ? bv("div", {
                    className: "question_list"
                }, bv("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => h({})
                }), bv("h3", null, window.wplms_course_data.translations.submission_by, " ", f.nickname), v.hasOwnProperty("questions") && v.questions.length ? bv(Ov, null, v.questions.map(((e, t) => bv("div", {
                    className: "question_container"
                }, bv(Ov, null, bv("div", {
                    className: "question"
                }, bv("div", {
                    className: "question_content",
                    dangerouslySetInnerHTML: {
                        __html: e.content ? e.content : ""
                    }
                }), e.marked_answer ? bv("div", {
                    className: "marked_answer"
                }, bv("span", null, window.wplms_course_data.translations.marked_answer), bv("div", {
                    className: "marked_asnwer",
                    dangerouslySetInnerHTML: {
                        __html: e.marked_answer ? e.marked_answer : ""
                    }
                })) : "", e.correct_answer ? bv("div", {
                    className: "question_correct_answer"
                }, bv("span", null, window.wplms_course_data.translations.correct_answer), bv("div", {
                    className: "correct_answer",
                    dangerouslySetInnerHTML: {
                        __html: e.correct_answer ? e.correct_answer : ""
                    }
                })) : "", e.explaination ? bv("div", {
                    className: "question_explanation"
                }, bv("span", null, window.wplms_course_data.translations.question_explanation), bv("div", {
                    dangerouslySetInnerHTML: {
                        __html: e.explaination ? e.explaination : ""
                    }
                })) : ""), bv("div", {
                    className: "question_score"
                }, bv("span", null, bv("span", null, window.wplms_course_data.translations.total_marks), bv("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.max_marks ? e.max_marks : 0
                    }
                })), bv("input", {
                    type: "number",
                    placeholder: e.marks ? e.marks : 0,
                    onChange: a => {
                        if (a.target.value <= parseInt(e.max_marks)) {
                            let e = {
                                ...v
                            };
                            e.questions[t].marks = a.target.value, h(e);
                            let s = 0;
                            e.questions.map((e => {
                                s += parseInt(e.marks)
                            })), b(s)
                        }
                    },
                    value: v.questions[t].marks
                }))))))) : "", !1 !== y ? bv(Ov, null, bv("div", {
                    className: "total_marks"
                }, bv("span", null, window.wplms_course_data.translations.total_marks), !1 !== k ? bv("span", null, y, "/", k, " ", bv("span", {
                    className: N ? "vicon vicon-close" : "vicon vicon-pencil",
                    onClick: () => q(!N)
                })) : bv("span", null, y, " ", bv("span", {
                    className: N ? "vicon vicon-close" : "vicon vicon-pencil",
                    onClick: () => q(!N)
                }))), bv("div", {
                    className: "remarks_wrapper"
                }, bv("div", null), bv("div", {
                    className: "remarks"
                }, N ? bv("input", {
                    type: "number",
                    placeholder: y,
                    onChange: e => {
                        h({
                            ...v,
                            user_marks: e.target.value
                        }), b(e.target.value)
                    }
                }) : "", bv("span", null, window.wplms_course_data.translations.instructor_remarks), bv("textarea", {
                    onChange: e => {
                        h({
                            ...v,
                            instructor_remarks: e.target.value
                        })
                    }
                }, v.instructor_remarks), bv("a", {
                    className: O ? "button is-primary is-loading" : "button is-primary",
                    fill: "outline",
                    onClick: () => (() => {
                        I(!0), v.user_marks && v.user_marks;
                        let e = v.activity_id ? v.activity_id : "no_activity",
                            a = v.instructor_remarks ? v.instructor_remarks : "";
                        if (f) {
                            let s = {
                                method: "POST",
                                body: JSON.stringify({
                                    course_id: n.parentId,
                                    quiz_id: n.id,
                                    user_id: f.user_id,
                                    user_marks: y,
                                    instructor_remarks: a,
                                    activity: e,
                                    token: t,
                                    questions: v.questions
                                })
                            };
                            fetch(`${window.wplms_course_data.api_url}/instructor/courses/update_user_marks_remarks?post`, s).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                if (e) {
                                    if (e.status) {
                                        h({});
                                        let t = [...c];
                                        t.splice(c.findIndex((e => e.user_id == f.user_id)), 1), u(t), g(!1), Cv("vibebp").addNotification({
                                            text: e.message
                                        })
                                    } else Cv("vibebp").addNotification({
                                        text: e.message
                                    });
                                    I(!1)
                                }
                            })).catch((e => {
                                I(!1), console.error("Uh oh, an error!", e), Cv("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    })()
                }, window.wplms_course_data.translations.update_submission)))) : "") : v.hasOwnProperty("curriculum_data") && "course" == n.type ? bv("div", {
                    className: "course_structure"
                }, v.curriculum_data.length ? bv(Ov, null, bv("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => h([])
                }), bv("h3", null, window.wplms_course_data.translations.submission_by, " ", f.nickname), v.curriculum_data.map((e => bv("div", {
                    className: "curriculum_item"
                }, "unit" == e.type ? bv(Ov, null, bv("span", null, bv("span", {
                    className: e.icon
                }), " ", e.title ? e.title : ""), bv("span", null, bv("span", {
                    className: e.status ? "vicon vicon-check-box" : "vicon vicon-check"
                }))) : "", "quiz" == e.type ? bv(Ov, null, bv("span", null, bv("span", {
                    className: e.icon
                }), " ", e.title ? e.title : ""), bv("span", null, bv("span", null, bv("span", null, e.marks ? e.marks : "0"), "/", bv("span", null, e.max ? e.max : "0")), bv("span", {
                    className: e.status ? "vicon vicon-check-box" : "vicon vicon-check"
                }))) : "")))) : "", bv("div", {
                    className: "total_marks"
                }, bv("span", null, window.wplms_course_data.translations.total_marks), bv("span", null, N ? bv("div", {
                    className: "editing_marks"
                }, bv("input", {
                    type: "number",
                    placeholder: v.total_get ? Math.round(v.total_get / v.total_marks * 100, 0) : 0,
                    value: y,
                    onChange: e => {
                        b(e.target.value)
                    }
                })) : bv("span", null, y, " / 100 "), bv("span", {
                    className: N ? "vicon vicon-close" : "vicon vicon-pencil",
                    onClick: () => q(!N)
                }))), bv("a", {
                    className: O ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        I(!0), y && f && fetch(`${window.wplms_course_data.api_url}/instructor/courses/set_complete_course_marks?post`, {
                            method: "POST",
                            body: JSON.stringify({
                                course_id: n.id,
                                user_id: f.user_id,
                                marks: y,
                                token: t
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            if (I(!1), e.status) {
                                h({});
                                let t = [...c];
                                t.splice(c.findIndex((e => e.user_id == f.user_id)), 1), u(t), g(!1), Cv("vibebp").addNotification({
                                    text: e.message
                                })
                            } else Cv("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            I(!1), console.error("Uh oh, an error!", e), Cv("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.complete_course)) : v.hasOwnProperty("comment_content") ? bv("div", {
                    className: "assigmmnet_submission"
                }, bv("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => h([])
                }), v.content.length ? bv("p", {
                    dangerouslySetInnerHTML: {
                        __html: v.content
                    }
                }) : "", bv("div", {
                    className: "submissions"
                }, bv("h3", null, window.wplms_course_data.translations.submission), v.comment_content.length ? bv("p", {
                    dangerouslySetInnerHTML: {
                        __html: v.comment_content
                    }
                }) : "", v.hasOwnProperty("attachments") && v.attachments.length ? bv("div", {
                    className: "attachments_wrapper"
                }, bv("h4", null, window.wplms_course_data.translations.attachments), bv("div", {
                    className: "attachments"
                }, v.attachments ? v.attachments.map(((e, t) => bv("div", {
                    className: "attachment"
                }, bv("a", {
                    href: e.url,
                    download: e.url.substring(e.url.lastIndexOf("/") + 1),
                    target: "_blank"
                }, window.wplms_course_data.translations.download_attachment)))) : "")) : ""), v.hasOwnProperty("permit_mime") ? bv("div", {
                    className: "add_upload"
                }, bv("h3", null, window.wplms_course_data.translations.upload_file), bv(yv, {
                    field: {
                        id: "assignment_uplaod_instructor"
                    },
                    type: "image",
                    update: (e, t, a) => {
                        if (e.value) {
                            let t = {
                                ...v
                            };
                            t.hasOwnProperty("instructor_remarks") || (t.instructor_remarks = ""), console.log(e), t.instructor_remarks = t.instructor_remarks + " " + e.value.url, console.log(t), h(t)
                        }
                    }
                })) : "", bv("div", {
                    className: "remarks_wrapper"
                }, bv("div", null), bv("div", {
                    className: "remarks"
                }, bv("textarea", {
                    onChange: e => {
                        h({
                            ...v,
                            instructor_remarks: e.target.value
                        })
                    },
                    value: v.hasOwnProperty("instructor_remarks") ? v.instructor_remarks : ""
                }))), bv("div", {
                    className: "total_marks"
                }, bv("span", null, window.wplms_course_data.translations.total_marks), bv("span", null, N ? bv("div", {
                    className: "editing_marks"
                }, bv("input", {
                    type: "number",
                    placeholder: v.user_marks ? v.user_marks + "/" + v.total_marks : 0,
                    onChange: e => {
                        h({
                            ...v,
                            user_marks: e.target.value
                        })
                    }
                })) : bv("span", null, v.user_marks, " / ", v.total_marks, " "), bv("span", {
                    className: N ? "vicon vicon-close" : "vicon vicon-pencil",
                    onClick: () => q(!N)
                }))), bv("a", {
                    className: O ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        I(!0), v.hasOwnProperty("user_marks") && f && v.hasOwnProperty("comment_ID") && fetch(`${window.wplms_course_data.api_url}/instructor/courses/set_complete_assignment_marks?post`, {
                            method: "POST",
                            body: JSON.stringify({
                                id: n.id,
                                course_id: n.parentId,
                                user_id: f.user_id,
                                marks: v.user_marks,
                                comment_ID: v.comment_ID,
                                instructor_remarks: v.instructor_remarks,
                                token: t,
                                parentId: n.parentId
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            if (I(!1), e.status) {
                                h({});
                                let t = [...c];
                                t.splice(c.findIndex((e => e.user_id == f.user_id)), 1), u(t), g(!1), Cv("vibebp").addNotification({
                                    text: e.message
                                })
                            } else Cv("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            I(!1), console.error("Uh oh, an error!", e), Cv("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.complete_assignment)) : c.length ? bv("div", {
                    className: "student_list"
                }, c.map(((e, a) => bv("div", {
                    className: "student_item"
                }, bv("div", {
                    className: "user_credentials"
                }, bv("img", {
                    className: "user_image",
                    src: e.image
                }), e.nickname ? bv("span", null, e.nickname) : ""), bv("div", {
                    className: "user_controls"
                }, bv("span", {
                    onClick: () => {
                        (e => {
                            g(e), fetch(`${window.wplms_course_data.api_url}/instructor/getStructure/${n.id}?post`, {
                                method: "POST",
                                body: JSON.stringify({
                                    ...n,
                                    user_id: e.user_id,
                                    token: t
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                if (e)
                                    if (e.status) {
                                        if (h(e.data), e.data.hasOwnProperty("total_get") && b(Math.round(e.data.total_get / e.data.total_marks, 0)), e.data.hasOwnProperty("user_marks") && b(e.data.user_marks), e.data.hasOwnProperty("user_marks") && b(e.data.user_marks), e.data.hasOwnProperty("total_marks") && x(e.data.total_marks), e.data.hasOwnProperty("questions") && Array.isArray(e.data.questions) && e.data.questions.length) {
                                            let t = 0;
                                            e.data.questions.map((e => {
                                                t += parseInt(e.marks)
                                            })), b(t)
                                        }
                                    } else Cv("vibebp").addNotification({
                                        text: e.message
                                    })
                            })).catch((e => {
                                console.error("Uh oh, an error!", e), Cv("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        })(e)
                    },
                    className: "tip",
                    title: window.wplms_course_data.translations.view_submission
                }, "   ", bv("i", {
                    className: "vicon vicon-write"
                }), " "), bv("span", {
                    onClick: () => {
                        ((e, a) => {
                            e && fetch(`${window.wplms_course_data.api_url}/instructor/resetSubmission?post`, {
                                method: "POST",
                                body: JSON.stringify({
                                    ...n,
                                    token: t,
                                    user_id: e.user_id
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                if (e)
                                    if (e.status) {
                                        Cv("vibebp").addNotification({
                                            text: e.message
                                        });
                                        let t = [...c];
                                        t.splice(a, 1), u(t)
                                    } else Cv("vibebp").addNotification({
                                        text: e.message
                                    })
                            })).catch((e => {
                                console.error("Uh oh, an error!", e), Cv("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        })(e, a)
                    },
                    className: "tip",
                    title: window.wplms_course_data.translations.reset_course
                }, bv("i", {
                    className: "vicon vicon-reload"
                })))))), m ? bv("a", {
                    className: "link",
                    onClick: () => {
                        w(!0), i({
                            ...n,
                            paged: n.paged + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : "") : l.length ? bv("div", {
                    className: "vbp_message"
                }, l) : "")
            },
            {
                createElement: Ev,
                render: zv,
                useState: Tv,
                useEffect: Lv,
                useContext: Mv,
                Fragment: $v,
                RawHTML: jv
            } = wp.element,
            {
                dispatch: Av,
                select: Dv
            } = wp.data,
            Hv = e => {
                const t = e.member;
                let a = Dv("vibebp").getUser();
                a.token = Dv("vibebp").getToken();
                const [s, n] = Tv(!1), i = s => {
                    n(s), fetch(`${window.wplms_course_data.api_url}/instructor/manageapplication?force`, {
                        method: "POST",
                        body: JSON.stringify({
                            course_id: e.course,
                            token: a.token,
                            action: s,
                            user_id: t.user_id
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        t.status && e.update({
                            index: e.index
                        }, "performed"), Av("vibebp").addNotification({
                            text: t.message
                        }), n(!1)
                    })).catch((e => {
                        n(!1), console.error("Uh oh, an error!", e), Av("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                };
                return t ? Ev("div", {
                    className: "course_student"
                }, Ev("div", {
                    className: "user_credentials"
                }, t.image ? Ev("img", {
                    className: "user_image",
                    src: t.image
                }) : "", Ev("a", {
                    href: t.hasOwnProperty("link") ? t.link : "",
                    className: "link"
                }, t.nickname ? Ev("span", null, t.nickname) : ""), t.hasOwnProperty("meta") ? t.meta.map((e => {
                    Ev("span", null, e.label, " ", Ev("span", null), e.value)
                })) : ""), Ev("div", null, Ev("span", {
                    className: "approve" === s ? "approve button is-loading is-primary" : "approve button is-primary",
                    onClick: () => {
                        i("approve")
                    }
                }, Ev("span", {
                    className: "vicon vicon-plus"
                }), window.wplms_course_data.translations.approve), Ev("span", {
                    className: "reject" === s ? "reject button is-loading is-primary" : "reject button is-primary",
                    onClick: () => {
                        i("reject")
                    }
                }, Ev("span", {
                    className: "vicon vicon-close"
                }), window.wplms_course_data.translations.reject))) : ""
            },
            {
                createElement: Uv,
                render: Fv,
                useState: Jv,
                useEffect: Rv,
                useContext: Bv,
                Fragment: Vv,
                RawHTML: Xv
            } = wp.element,
            {
                dispatch: Wv,
                select: Yv
            } = wp.data,
            Qv = e => {
                let t = Yv("vibebp").getUser();
                t.token = Yv("vibebp").getToken();
                const [a, s] = Jv(!1), [n, i] = Jv([]), [o, r] = Jv(""), [l, d] = Jv("course"), [c, u] = Jv(e.course), [m, p] = Jv(!1), [_, w] = Jv(!1);
                Rv((() => (document.addEventListener("vibebp_component_reload", v), () => {
                    document.removeEventListener("vibebp_component_reload", v)
                }))), Rv((() => {
                    v()
                }), []);
                const v = () => {
                        s(!0), fetch(`${window.wplms_course_data.api_url}/instructor/courses/getSubmissionTabs/${e.course}?force`, {
                            method: "POST",
                            body: JSON.stringify({
                                token: t.token
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            s(!1), e.status ? i(e.data.tabs) : r(e.message)
                        })).catch((e => {
                            s(!1), console.error("Uh oh, an error!", e), Wv("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    },
                    h = (e, t) => {
                        if ("performed" == t && n[n.findIndex((e => e.value == l))].elements && n[n.findIndex((e => e.value == l))].elements.length) {
                            let t = [...n];
                            t[t.findIndex((e => e.value == l))].elements.splice(e.index, 1), i(t)
                        }
                    };
                return Uv("div", {
                    className: "course_submissions_wrapper"
                }, a ? Uv(wl, null) : n.length ? Uv("div", {
                    className: "course_submissions_tabs_wrapper"
                }, n.map((t => Uv("a", {
                    className: l == t.value ? "button is-primary" : "link",
                    onClick: () => {
                        d(t.value), "course" != t.value ? u(!1) : u(e.course)
                    }
                }, t.label)))) : Uv("div", {
                    className: "vbp_message"
                }, o), !a && l ? Uv("div", {
                    className: "course_submissions_tab_conetnt"
                }, n.length && n[n.findIndex((e => e.value == l))].hasOwnProperty("elements") && "applications" !== l ? Uv("select", {
                    value: c,
                    onChange: e => u(e.target.value)
                }, Uv("option", null, window.wplms_course_data.translations.select_module), n[n.findIndex((e => e.value == l))].elements.map((e => Uv("option", {
                    value: e.value,
                    dangerouslySetInnerHTML: {
                        __html: e.label
                    }
                })))) : "", "applications" == l ? Uv("div", {
                    className: "course_admin"
                }, Uv("div", {
                    className: "course_students"
                }, n[n.findIndex((e => e.value == l))].elements.map(((t, a) => Uv(Hv, {
                    member: t,
                    index: a,
                    course: e.course,
                    update: h
                }))))) : l && n.length ? Uv(Pv, {
                    type: l,
                    id: c,
                    parentId: e.course,
                    statuses: n[n.findIndex((e => e.value == l))].status
                }) : "") : "")
            },
            {
                createElement: Kv,
                render: Gv,
                useState: Zv,
                useEffect: eh,
                useContext: th,
                Fragment: ah,
                RawHTML: sh,
                useRef: nh
            } = wp.element,
            {
                dispatch: ih,
                select: oh
            } = wp.data;

        function rh(e) {
            if (null == e) return !0;
            if (void 0 === e) return !0;
            if ("number" == typeof e) return !1;
            if (Array.isArray(e) || "string" == typeof e || e instanceof String) return 0 === e.length;
            for (var t in e)
                if (e.hasOwnProperty(t)) return !1;
            return !0
        }
        let lh = (dh = document.createElement("div"), function(e) {
            return e && "string" == typeof e && (e = (e = e.replace(/<script[^>]*>([\S\s]*?)<\/script>/gim, "")).replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gim, ""), dh.innerHTML = e, e = dh.textContent, dh.textContent = ""), e
        });
        var dh;
        const ch = e => {
                var t = nh(null);
                let a = oh("vibebp").getUser();
                a.token = oh("vibebp").getToken();
                const [s, n] = Zv(!1), [i, o] = Zv(!1), [r, l] = Zv({}), [d, c] = Zv("all_students"), [u, m] = Zv({}), [p, _] = Zv(!1), [w, v] = Zv(null);
                eh((() => {
                    f()
                }), []);
                const h = () => {
                    f()
                };
                eh((() => (document.addEventListener("vibebp_component_reload", h), () => {
                    document.removeEventListener("vibebp_component_reload", h)
                })));
                const f = () => {
                    n(!0), fetch(`${window.wplms_course_data.api_url}/instructor/getcoursestats/${e.course}`, {
                        method: "POST",
                        body: JSON.stringify({
                            course_id: e.course,
                            token: a.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        n(!1), e.status && l(e.data)
                    })).catch((e => {
                        n(!1), console.error("Uh oh, an error!", e), ih("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                };
                eh((() => {
                    if (!s && u && Object.keys(u).length && "function" == typeof Tabulator && u.hasOwnProperty("data") && u.data.length) {
                        var e = new Tabulator(t.current, {});
                        console.log(u.data, u.columns), u.columns.map(((e, t) => {
                            u.columns[t].title = lh(e.title)
                        })), u.data.map(((e, t) => {
                            u.data[t].stats_student_name = lh(u.data[t].stats_student_name)
                        })), e = new Tabulator(t.current, {
                            data: u.data,
                            layout: "fitDataStretch",
                            layoutColumnsOnNewData: !0,
                            columns: u.columns
                        }), v(e)
                    }
                }), [u]);
                const g = e => {
                    if (console.log("wplms_download_course_stats_field_changed", e.detail), e.detail.hasOwnProperty("field") && e.detail.hasOwnProperty("courseStats")) {
                        let t = e.detail.courseStats;
                        t.download_options[e.detail.index] = e.detail.field, l(t)
                    }
                };
                eh((() => {
                    console.log(g), document.removeEventListener("wplms_download_course_stats_field_changed", g), document.addEventListener("wplms_download_course_stats_field_changed", g)
                }), []);
                return Kv("div", {
                    className: "course_stats_wrapper"
                }, s ? Kv(wl, null) : Kv("div", {
                    className: "course_stats"
                }, r.hasOwnProperty("general") && r.general.length ? Kv("div", {
                    className: "course_general_stats"
                }, r.general.map(((e, t) => Kv("div", {
                    className: "data",
                    key: t
                }, Kv("label", null, e.label), Kv("span", null, e.value)))), Kv("div", {
                    className: "data",
                    onClick: async () => {
                        o(!0), "undefined" != typeof localforage && window.vibebp.api.sw_enabled && navigator.onLine && await localforage.removeItem(`${window.wplms_course_data.api_url}/instructor/getcoursestats/${e.course}`), fetch(`${window.wplms_course_data.api_url}/instructor/recalculatestats?post`, {
                            method: "POST",
                            body: JSON.stringify({
                                course_id: e.course,
                                token: a.token
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            o(!1), f()
                        })).catch((e => {
                            console.error("Uh oh, an error!", e), ih("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, i ? Kv(wl, null) : Kv("a", {
                    className: "link"
                }, window.wplms_course_data.translations.refresh))) : "", Kv("div", {
                    className: "download_stats_wrapper"
                }, r.hasOwnProperty("download_options") && r.download_options.length ? Kv("div", {
                    className: "course_stats_download"
                }, r.download_options.map(((e, t) => ((e, t) => {
                    if (e && e.hasOwnProperty("type")) {
                        if ("checkbox" === e.type) return Kv("div", {
                            className: "checkbox"
                        }, Kv("input", {
                            id: e.id,
                            type: "checkbox",
                            value: e.id,
                            onChange: e => {
                                ((e, t) => {
                                    console.log(e);
                                    {
                                        let t = {
                                            ...r
                                        };
                                        "checkbox" === e.type ? (1 == e.value.target.checked ? t.download_options[e.index].value = e.value.target.value : t.download_options[e.index].value = null, l(t)) : (rh(e.value) ? t.download_options[e.index].value = null : t.download_options[e.index].value = e.value, l(t))
                                    }
                                })({
                                    value: e,
                                    type: "checkbox",
                                    index: t
                                })
                            },
                            checked: e.value == e.id
                        }), Kv("label", {
                            for: e.id
                        }, e.label));
                        var a = new CustomEvent("wplms_course_download_stats_list", {
                            detail: {
                                field: e,
                                index: t,
                                courseStats: r
                            }
                        });
                        return document.dispatchEvent(a), Kv("div", {
                            className: "field"
                        }, Kv("div", {
                            className: "wplms_course_download_stats_list_" + e.id
                        }))
                    }
                })(e, t)))) : "", Kv("div", {
                    className: "course_stats_download_actions"
                }, Kv("select", {
                    onChange: e => {
                        let t = {
                            ...d
                        };
                        t = e.target.value, c(t)
                    }
                }, r.hasOwnProperty("download_student_options") && r.download_student_options.length ? r.download_student_options.map(((e, t) => Kv("option", {
                    value: e.value,
                    selected: d && d.length && d == e.value ? 'selected="selected"' : ""
                }, e.label))) : ""), Kv("a", {
                    className: p ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        let t = [];
                        if (r.download_options.length && r.download_options.map(((e, a) => {
                                rh(e.value) || t.push(e.value)
                            })), t.length < 1 || d.length < 1) return ih("vibebp").addNotification({
                            text: window.wplms_course_data.translations.select_option
                        }), !1;
                        _(!0), fetch(`${window.wplms_course_data.api_url}/instructor/generatestats/${e.course}?post`, {
                            method: "POST",
                            body: JSON.stringify({
                                course_id: e.course,
                                token: a.token,
                                stats_student_option: d,
                                stats_options: t
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            _(!1), e.hasOwnProperty("columns") && e.columns.length ? m({
                                columns: e.columns,
                                data: e.data
                            }) : e.message && ih("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            _(!1), console.error("Uh oh, an error!", e), ih("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.generate_stats), u && Object.keys(u).length && u.data.length > 1 ? Kv("a", {
                    className: "download button primary",
                    onClick: () => {
                        w && !s && u && Object.keys(u).length && u.hasOwnProperty("data") && u.data.length && w.download("csv", "data" + e.course + ".csv", {
                            delimiter: ","
                        })
                    }
                }, window.wplms_course_data.translations.download) : "")), u ? Kv("div", {
                    ref: t
                }) : ""))
            },
            {
                createElement: uh,
                render: mh,
                useState: ph,
                useEffect: _h,
                Fragment: wh
            } = wp.element,
            {
                dispatch: vh,
                select: hh
            } = wp.data;
        Math.floor((new Date).getTime() / 1e3);
        const fh = e => {
                const [t, a] = ph(!1), [s, n] = ph({
                    post_title: "",
                    course: e.course,
                    post_content: "",
                    raw: "",
                    type: ""
                }), [i, o] = ph({}), [r, l] = ph(!1), [d, c] = ph([]);
                return hh("vibebp").getUser(), _h((() => {
                    e.hasOwnProperty("news") && "object" == typeof e.news && n({
                        ...s,
                        id: e.news.id,
                        post_title: e.news.post_title,
                        post_cotent: e.news.post_content,
                        raw: e.news.raw,
                        type: e.news.type
                    })
                }), []), _h((() => {
                    var t = new CustomEvent("load_vibe_editor", {
                        detail: {
                            selector: ".vibe_news_editor",
                            content: "object" == typeof e.news ? e.news.post_content : "",
                            raw: "object" == typeof e.news ? e.news.raw : "",
                            components: "editor",
                            updater: "vibe_news"
                        }
                    });
                    document.dispatchEvent(t)
                }), []), _h((() => {
                    document.addEventListener("vibe_editor_content_update_vibe_news", (e => {
                        o({
                            post_content: e.detail.raw_html,
                            raw: e.detail.editor_content
                        })
                    })), fetch(`${window.wplms_create_course_data.api_url}/taxonomy/?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            taxonomy: "news-tag",
                            token: hh("vibebp").getToken()
                        })
                    }).then((e => e.json())).then((e => {
                        e.status && c(e.posts)
                    }))
                }), []), uh("div", {
                    className: "new_news"
                }, r ? uh("div", {
                    className: "vibebp_content_preview_wrapper"
                }, uh("span", {
                    onClick: () => {
                        l(!1)
                    }
                }), uh("div", {
                    className: "vibebp_content_preview"
                }, uh("div", {
                    className: "new_news_header"
                }, uh("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        l(!1)
                    }
                })), uh("h1", {
                    className: "title"
                }, s.post_title), uh("div", {
                    className: "post_content",
                    dangerouslySetInnerHTML: {
                        __html: i.post_content
                    }
                }))) : "", uh("div", {
                    className: "new_news_header"
                }, uh("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: e.back
                })), uh("div", {
                    className: "new_news_content vibebp_form"
                }, uh("div", {
                    className: "vibebp_form_field"
                }, uh("label", null, window.wplms_course_data.translations.news_title), uh("input", {
                    type: "text",
                    value: s.post_title,
                    onChange: e => {
                        n({
                            ...s,
                            post_title: e.target.value
                        })
                    }
                })), uh("select", {
                    value: s.type,
                    onChange: e => {
                        n({
                            ...s,
                            type: e.target.value
                        })
                    }
                }, uh("option", null, window.wplms_course_data.translations.news_category), d.length ? d.map((e => uh("option", {
                    value: e.id
                }, e.text))) : ""), uh("div", {
                    className: "vibebp_form_field"
                }, uh("label", null, window.wplms_course_data.translations.news_content), uh("div", {
                    className: "vibe_news_editor"
                }, uh("textarea", {
                    onChange: e => {
                        n({
                            ...s,
                            post_content: e.target.value
                        }), o({
                            ...i,
                            post_content: e.target.value
                        })
                    },
                    value: s.post_content
                }))), uh("div", {
                    className: "vibebp_form_field"
                }, uh("a", {
                    className: "button is-info",
                    onClick: () => {
                        l(!r)
                    }
                }, window.wplms_course_data.translations.preview), uh("a", {
                    className: t ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        a(!0), fetch(`${window.wplms_course_data.api_url}/instructor/addnews?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...s,
                                post_content: i.post_content,
                                raw: i.raw,
                                token: hh("vibebp").getToken(),
                                course: e.course
                            })
                        }).then((e => e.json())).then((t => {
                            a(!1), t.status && ("object" == typeof e.news ? e.update("edit", t.news) : e.update("add", t.news), e.back())
                        }))
                    }
                }, "object" == typeof e.news ? window.wplms_course_data.translations.edit_news : window.wplms_course_data.translations.create_news))))
            },
            {
                createElement: gh,
                render: yh,
                useState: bh,
                useEffect: kh,
                Fragment: xh
            } = wp.element,
            {
                dispatch: Nh,
                select: qh
            } = wp.data;
        Math.floor((new Date).getTime() / 1e3);
        const Oh = e => {
                const [t, a] = bh(!1), [s, n] = bh({
                    paged: 1,
                    s: "",
                    orderby: "",
                    order: "DESC"
                }), [i, o] = bh(""), [r, l] = bh([]), [d, c] = bh(!1), [u, m] = bh(!1), [_, w] = bh(""), [v, h] = bh(""), [f, g] = bh(!1), [y, b] = bh(-1), [k, x] = bh(!1);
                kh((() => {
                    e.course && fetch(`${window.wplms_course_data.api_url}/student/announcement/${e.course}`, {
                        method: "post",
                        body: JSON.stringify({
                            token: qh("vibebp").getToken()
                        })
                    }).then((e => e.json())).then((e => {
                        a(!1), e.status && o(e.announcement)
                    }))
                }), [e]);
                const N = () => {
                    n({
                        ...s,
                        paged: 1
                    })
                };
                return kh((() => (document.addEventListener("vibebp_component_reload", N), () => {
                    document.removeEventListener("vibebp_component_reload", N)
                }))), p((() => {
                    a(!0);
                    let t = `${window.wplms_course_data.api_url}/student/news/${e.course}?args=${encodeURIComponent(JSON.stringify(s))}`;
                    fetch(t, {
                        method: "post",
                        body: JSON.stringify({
                            ...s,
                            token: qh("vibebp").getToken()
                        })
                    }).then((e => e.json())).then((e => {
                        if (a(!1), e.status)
                            if (u) {
                                let t = [...r, ...e.news];
                                t.length < e.total ? c(!0) : c(!1), l(t)
                            } else e.news.length < e.total ? c(!0) : c(!1), l(e.news);
                        else w(e.message)
                    }))
                }), 500, [s]), gh("div", {
                    className: "announcements_news"
                }, t ? gh(wl, null) : gh(xh, null, i.length ? gh("div", {
                    className: "announcement"
                }, gh("strong", null, window.wplms_course_data.translations.annoucement), gh("div", {
                    dangerouslySetInnerHTML: {
                        __html: i
                    }
                })) : "", gh("div", {
                    className: "news_wrapper"
                }, f ? gh(fh, {
                    news: f,
                    course: e.course,
                    back: () => g(!1),
                    update: (e, t) => {
                        let a = [...r];
                        "add" == e && a.unshift(t), "edit" == e && a.splice(a.findIndex((e => e.id == t.id)), 1, t), "remove" == e && a.splice(a.findIndex((e => e.id == t.id)), 1), l(a)
                    }
                }) : e.hasOwnProperty("instructor") || qh("vibebp").getUser().id == parseInt(e.course.post_author) ? gh("a", {
                    className: "button is-primary",
                    onClick: () => g(!0)
                }, gh("span", {
                    className: "vicon vicon-plus"
                }), window.wplms_course_data.translations.create_news) : "", r.length ? gh(Al, {
                    user_ids: r.map((e => e.post_author))
                }, r.map(((t, a) => gh("div", {
                    className: v == a ? "news active" : "news"
                }, t.img ? gh("div", {
                    className: "news_featured_image"
                }, gh("img", {
                    src: t.img
                })) : "", gh("div", {
                    className: "news_details"
                }, gh("h3", {
                    onClick: () => {
                        h(a != v && a)
                    }
                }, t.post_title, " ", e.hasOwnProperty("instructor") ? gh("span", {
                    className: "actions"
                }, gh("span", {
                    className: "vicon vicon-pencil-alt",
                    onClick: () => g(t)
                }), gh("span", {
                    className: "vicon vicon-trash",
                    onClick: () => {
                        b(a)
                    }
                })) : ""), gh("span", null, gh(Ot, {
                    timestamp: t.post_date
                }), " ", gh(jl, {
                    type: "user",
                    id: {
                        user_id: t.post_author
                    }
                })), gh("div", {
                    className: "news_details_content",
                    onClick: () => {
                        h(a != v && a)
                    },
                    dangerouslySetInnerHTML: {
                        __html: t.post_content
                    }
                })))))) : _.length ? gh("div", {
                    className: "vbp_message"
                }, _) : "", y > -1 ? gh("div", {
                    className: "reviewpopup_wrapper",
                    onClick: e => {
                        e.preventDefault(), document.querySelector(".reviewpopup_wrapper") && e.target === document.querySelector(".reviewpopup_wrapper") && (k || b(-1))
                    }
                }, gh("div", {
                    className: "",
                    className: k ? "reviewpopup_content is-loading loading" : "reviewpopup_content"
                }, gh("div", {
                    className: "close",
                    onClick: () => {
                        k || b(-1)
                    }
                }, gh("span", {
                    className: "vicon vicon-close"
                })), window.wplms_course_data.translations.sure_delete, gh("div", {
                    className: "popup-footer"
                }, gh("a", {
                    className: k ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        x(!0), fetch(`${window.wplms_course_data.api_url}/deleteElement/${r[y].id}?post`, {
                            method: "post",
                            body: JSON.stringify({
                                course_id: e.course.id,
                                token: qh("vibebp").getToken()
                            })
                        }).then((e => e.json())).then((e => {
                            if (e.status) {
                                let e = [...r];
                                e.splice(y, 1), l(e), b(-1)
                            }
                            e.hasOwnProperty("message") && Nh("vibebp").addNotification({
                                text: e.message
                            }), x(!1)
                        }))
                    }
                }, window.wplms_course_data.translations.ok), gh("a", {
                    className: "button",
                    onClick: () => {
                        k || b(-1)
                    }
                }, window.wplms_course_data.translations.cancel)))) : "", d ? gh("a", {
                    className: "link",
                    onClick: () => {
                        m(!0), n({
                            ...s,
                            paged: s.paged + 1
                        })
                    }
                }, window.vibebp.translations.load_more) : "")))
            },
            {
                createElement: Ih,
                render: Ch,
                useState: Sh,
                useEffect: Ph,
                useContext: Eh,
                Fragment: zh,
                RawHTML: Th
            } = wp.element,
            {
                dispatch: Lh,
                select: Mh
            } = wp.data,
            $h = e => {
                const t = window.wplms_course_data.api_url,
                    [a, s] = Sh(!1),
                    [n, i] = Sh({}),
                    [o, r] = Sh({}),
                    [l, d] = Sh(""),
                    [c, u] = Sh(null),
                    [m, p] = Sh(null);
                let _ = Mh("vibebp").getUser();
                _.token = Mh("vibebp").getToken(), Ph((() => {
                    i(e.course);
                    let t = e.course.id;
                    d(t), w(t).then((e => {
                        e.status && (r(e.data), e.data.hasOwnProperty("tabs") && e.data.tabs && e.data.tabs.length && u(e.data.tabs[0].key))
                    }))
                }), [e.course]);
                const w = e => (s(!0), new Promise((a => {
                        let n = {
                            method: "post",
                            body: JSON.stringify({
                                token: _.token
                            })
                        };
                        fetch(`${t}/instructor/course/${e}`, n).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            e && a(e), s(!1)
                        })).catch((e => {
                            e.name && (s(!1), console.error("Uh oh, an error!", e), Lh("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            }))
                        }))
                    }))),
                    v = (e, t) => {
                        "setactivityuser" == t && (p(e), u("activity"))
                    },
                    h = t => {
                        let a = l;
                        switch (JSON.stringify({
                                course_id: a,
                                member_id: null
                            }), t) {
                            case "admin":
                                return Ih(U_, {
                                    course: n.id,
                                    permissions: o.instructor_permissions,
                                    update: v
                                });
                            case "activity":
                                return Ih(w_, {
                                    id: n.id,
                                    cpt: "course",
                                    member: m
                                });
                            case "members":
                                return Ih(CourseMembers, {
                                    course: n.id
                                });
                            case "submissions":
                                return Ih(Qv, {
                                    course: n.id
                                });
                            case "reviews":
                                return Ih(Mw, {
                                    course: n.id,
                                    type: "instructor",
                                    tabs: ["reviews"]
                                });
                            case "qna":
                                return Ih(tv, {
                                    id: {
                                        type: "course",
                                        id: n.id
                                    },
                                    course: n.id
                                });
                            case "news":
                                return Ih(Oh, {
                                    course: n.id,
                                    instructor: !0
                                });
                            case "edit_course":
                                return Ih(kp, {
                                    course: n.id,
                                    back: () => {
                                        u("admin")
                                    }
                                });
                            case "statistics":
                                return Ih(ch, {
                                    course: n.id,
                                    back: () => {
                                        u("statistics")
                                    }
                                });
                            default:
                                return setTimeout((() => {
                                    var a = new CustomEvent("wplms_course_admin_tab", {
                                        detail: {
                                            tab: t,
                                            course: e.course.id
                                        }
                                    });
                                    document.dispatchEvent(a)
                                }), 200), Ih("div", {
                                    className: "wplms_course_admin_tab_" + t
                                })
                        }
                    };
                return Ih(zh, null, Ih("div", {
                    className: "vicon vicon-arrow-left",
                    onClick: e.back
                }), c && "edit_course" == c ? h(c) : Ih("div", {
                    className: "course_manage"
                }, Object.keys(n).length ? Ih(zh, null, Ih("div", {
                    className: "course_information"
                }, Ih("img", {
                    src: n.featured_image
                }), Ih("div", null, Ih("h2", {
                    dangerouslySetInnerHTML: {
                        __html: n.name
                    }
                }), Ih("span", {
                    className: "course_meta"
                }, Ih("span", null, Ih("span", {
                    className: "vicon vicon-calendar"
                }), " ", Ih(Ot, {
                    timestamp: n.date_created
                })), Ih("span", null, Ih(ww, {
                    rating: n.average_rating,
                    maxstars: 5
                }), "(", n.rating_count, ")"), Ih("span", null, Ih("span", {
                    className: "vicon vicon-user"
                }), n.total_students), Ih("span", null, Ih("span", {
                    className: "vicon vicon-info-alt"
                }), n.id)), Ih("span", null, n.excerpt), Ih("a", {
                    className: "link",
                    target: "_blank",
                    href: n.link
                }, window.wplms_course_data.translations.show_more)))) : "", a ? Ih(wl, null) : Object.keys(o).length ? Ih(zh, null, Ih("div", {
                    className: "course_tabs"
                }, o.is_instructor ? Ih("div", {
                    className: "instructor_tabs"
                }, o.tabs ? o.tabs.map((e => Ih("span", {
                    className: c == e.key ? "active" : "",
                    onClick: () => {
                        u(e.key), p(null)
                    }
                }, e.label))) : "") : ""), Ih("div", {
                    className: "course_tab_content"
                }, c ? h(c) : "")) : ""))
            },
            {
                createElement: jh,
                useState: Ah,
                useEffect: Dh,
                Fragment: Hh,
                render: Uh
            } = wp.element,
            {
                dispatch: Fh,
                select: Jh
            } = wp.data,
            Rh = e => {
                const [t, a] = Ah(!1), [s, n] = Ah([]), [i, o] = Ah({
                    paged: 1,
                    orderby: window.wplms_course_data.hasOwnProperty("default_manage_courses_orderby") ? window.wplms_course_data.default_manage_courses_orderby : "recent",
                    order: window.wplms_course_data.hasOwnProperty("default_manage_courses_order") ? window.wplms_course_data.default_manage_courses_order : "DESC",
                    search_terms: "",
                    post_status: "publish"
                }), [r, l] = Ah(!1), [d, c] = Ah(""), [u, m] = Ah(null), [_, w] = Ah(!1), [v, h] = Ah(!0), [f, g] = Ah(!1), [y, b] = Ah(!1), [k, x] = Ah(null);
                let N = Jh("vibebp").getUser();
                N.token = Jh("vibebp").getToken();
                const q = e => {
                    b(!1), o({
                        ...i,
                        paged: 1
                    })
                };
                Dh((() => (u ? document.removeEventListener("vibebp_component_reload", q) : document.addEventListener("vibebp_component_reload", q), () => {
                    document.removeEventListener("vibebp_component_reload", q)
                }))), p((() => {
                    if (y && !_) return;
                    k && k.abort();
                    let t = {},
                        o = new AbortController;
                    k && (t = {
                        signal: o.signal
                    }), x(o), a(!0);
                    let r = {
                            ...i
                        },
                        l = 0;
                    r && r.hasOwnProperty("search_terms") && void 0 !== r.search_terms && r.search_terms.length && (delete r.search_terms, l = 1);
                    let d = `${window.wplms_course_data.api_url}/instructor/courses?args=${encodeURIComponent(JSON.stringify(r))}`;
                    !y && l && (d += "&nocache"), e.hasOwnProperty("force") && e.force && (d += "&force"), fetch(d, {
                        method: "POST",
                        ...t,
                        body: JSON.stringify({
                            filter: i,
                            token: N.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        a(!1);
                        let t = !1;
                        if (w(!1), e.status)
                            if (f) {
                                let a = [...s, ...e.courses];
                                a.length < parseInt(e.total) ? t = !0 : i.search_terms.length || b(!0), n(a), g(!1)
                            } else n(e.courses), e.courses.length < parseInt(e.total) ? t = !0 : i.search_terms.length || b(!0);
                        else f || n([]), c(e.message);
                        h(t)
                    })).catch((e => {
                        "AbortError" === e.name ? a(!0) : (console.error("Uh oh, an error!", e), a(!1), w(!1), Fh("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [i]);
                const O = (e, t) => {
                    if ("loadcourse" == t && m(e), "deleted" == t) {
                        let t = [...s];
                        t.splice(t.findIndex((t => t.data.id == e.id)), 1), n(t)
                    }
                    if ("offline" == t) {
                        let t = [...s];
                        t[t.findIndex((t => t.data.id == e.id))].data.offline = e.offline, n(t)
                    }
                };
                let I = [...s];
                if (i.search_terms.length && (I = I.filter((e => e.data.name.toLowerCase().includes(i.search_terms.toLowerCase())))), i.order && i.orderby.length) switch (i.orderby) {
                    case "date":
                    default:
                        "DESC" == i.order ? I.sort((function(e, t) {
                            return t.data.date_created - e.data.date_created
                        })) : I.sort((function(e, t) {
                            return e.data.date_created - t.data.date_created
                        }));
                        break;
                    case "title":
                        "DESC" == i.order ? I.sort((function(e, t) {
                            return t.data.name.localeCompare(e.data.name)
                        })) : I.sort((function(e, t) {
                            return e.data.name.localeCompare(t.data.name)
                        }));
                        break;
                    case "comment_count":
                        "DESC" == i.order ? I.sort((function(e, t) {
                            return t.data.total_students - e.data.total_students
                        })) : I.sort((function(e, t) {
                            return e.data.total_students - t.data.total_students
                        }))
                }
                return u ? jh($h, {
                    course: u,
                    back: () => {
                        m(!1)
                    }
                }) : jh("div", {
                    className: "wplms_manage_courses_wrapper"
                }, jh("div", {
                    className: "wplms_courses_header"
                }, jh("div", {
                    className: "vibebp_form_field no_border"
                }, jh("a", {
                    onClick: e => {
                        w(!0), b(!1), o({
                            ...i,
                            post_status: "publish",
                            paged: 1
                        }), h(!0)
                    },
                    className: "publish" == i.post_status ? "active button is-primary" : "link"
                }, window.wplms_course_data.translations.published), jh("a", {
                    onClick: e => {
                        w(!0), b(!1), o({
                            ...i,
                            post_status: "pending",
                            paged: 1
                        }), h(!0)
                    },
                    className: "pending" == i.post_status ? "active button is-primary" : "link"
                }, window.wplms_course_data.translations.pending), jh("a", {
                    onClick: e => {
                        w(!0), b(!1), o({
                            ...i,
                            post_status: "draft",
                            paged: 1
                        }), h(!0)
                    },
                    className: "draft" == i.post_status ? "active button is-primary" : "link"
                }, window.wplms_course_data.translations.drafts)), jh("div", {
                    className: "vibebp_form_field"
                }, jh("input", {
                    type: "text",
                    value: i.search_terms,
                    onChange: e => {
                        o({
                            ...i,
                            search_terms: e.target.value,
                            paged: 1
                        })
                    },
                    placeholder: window.wplms_course_data.translations.search_courses
                }), jh("span", {
                    className: "vicon vicon-search"
                })), jh("div", null, jh("select", {
                    value: i.orderby,
                    onChange: e => {
                        o({
                            ...i,
                            orderby: e.target.value
                        })
                    }
                }, Object.keys(window.wplms_course_data.orderby).map((e => jh("option", {
                    value: e
                }, window.wplms_course_data.orderby[e])))), jh("span", null, jh("span", {
                    className: "ASC" == i.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                    onClick: () => {
                        o({
                            ...i,
                            order: "ASC"
                        })
                    }
                }), jh("span", {
                    className: "DESC" == i.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                    onClick: () => {
                        o({
                            ...i,
                            order: "DESC"
                        })
                    }
                })))), jh(Hh, null, _ || !t || f ? "" : jh(wl, null), _ ? jh(wl, null) : I.length ? jh("div", {
                    className: "course_instructor_blocks"
                }, I.map((e => jh("div", {
                    className: "course_instructor_block"
                }, jh(zp, {
                    course: e.data,
                    filter: i,
                    update: O
                })))), t || _ || !v ? t && f ? jh(wl, null) : "" : jh("a", {
                    className: "link",
                    onClick: () => {
                        o({
                            ...i,
                            paged: i.paged + 1
                        }), g(!0)
                    }
                }, window.wplms_course_data.translations.load_more)) : jh("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_courses_found)))
            },
            {
                createElement: Bh,
                useState: Vh,
                useEffect: Xh,
                Fragment: Wh,
                render: Yh
            } = wp.element,
            {
                dispatch: Qh,
                select: Kh
            } = wp.data,
            Gh = e => {
                const [t, a] = Vh(!1), [s, n] = Vh(0), [i, o] = Vh(e.types), [r, l] = Vh([]), [d, c] = Vh({
                    post_title: "",
                    post_content: "",
                    type: "",
                    taxonomy: [],
                    meta: [{
                        meta_key: "vibe_duration",
                        meta_value: 5
                    }, {
                        meta_key: "vibe_duration_parameter",
                        meta_value: 60
                    }]
                }), [u, m] = Vh({
                    post_content: "",
                    raw: []
                }), [p, _] = Vh(!1);
                Xh((() => {
                    e.hasOwnProperty("type") && n(e.type)
                }), []), Xh((() => {
                    e.id && e.type && (a(!0), fetch(`${window.wplms_create_course_data.api_url}/curriculum/getElementFields?force`, {
                        method: "post",
                        body: JSON.stringify({
                            type: "quiz",
                            id: e.id,
                            fields: i[i.findIndex((t => t.id == e.type))].fields,
                            token: Kh("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (e.status) {
                            if (Array.isArray(e.fields)) {
                                l(e.fields);
                                let t = {
                                    post_title: "",
                                    post_content: "",
                                    type: "",
                                    taxonomy: [],
                                    meta: []
                                };
                                new Promise((a => {
                                    e.fields.map(((s, n) => {
                                        if ("taxonomy" == s.type) {
                                            let e = t.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? t.taxonomy.push({
                                                taxonomy: s.taxonomy,
                                                value: s.value
                                            }) : t.taxonomy[e].value = s.value
                                        }
                                        if ("meta" == s.from)
                                            if (v(s.value) && !v(s.default) && (s.value = s.default), "duration" == s.type) {
                                                let e = t.meta.findIndex((e => e.meta_key == s.id));
                                                e > -1 ? t.meta[e].meta_value = s.value.value : t.meta.push({
                                                    meta_key: s.id,
                                                    meta_value: s.value.value
                                                });
                                                let a = t.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                                                a > -1 ? t.meta[a].meta_value = s.value.parameter : t.meta.push({
                                                    meta_key: s.id + "_parameter",
                                                    meta_value: s.value.parameter
                                                })
                                            } else {
                                                let e = t.meta.findIndex((e => e.meta_key == s.id));
                                                e > -1 ? t.meta[e].meta_value = s.value : t.meta.push({
                                                    meta_key: s.id,
                                                    meta_value: s.value
                                                }), console.log("------\x3e"), s.hasOwnProperty("raw") && t.meta.push({
                                                    meta_key: s.id + "_raw",
                                                    meta_value: s.raw
                                                }), "editor" == s.type && s.hasOwnProperty("raw") && (e = t.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? t.meta[e].meta_value = s.raw : t.meta.push({
                                                    meta_key: s.id + "_raw",
                                                    meta_value: s.raw
                                                }))
                                            }
                                        "post" == s.from && ("post_content" == s.id ? m({
                                            value: s.value,
                                            raw: s.raw
                                        }) : t[s.id] = s.value), n == e.fields.length - 1 && a()
                                    }))
                                })).then((() => {
                                    console.log(t), a(!1), c(t)
                                }))
                            }
                        } else a(!1)
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), Qh("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })))
                }), [e.id]);
                const w = (e, t = null) => {
                    let a = {
                            ...d
                        },
                        s = {};
                    if (s = e.hasOwnProperty("field") ? e.field : e, "taxonomy" == s.type) {
                        let e = a.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? a.taxonomy.push({
                            taxonomy: s.taxonomy,
                            value: s.value
                        }) : a.taxonomy[e].value = s.value
                    }
                    if ("meta" == s.from)
                        if ("duration" == s.type) {
                            let e = a.meta.findIndex((e => e.meta_key == s.id));
                            e > -1 ? a.meta[e].meta_value = s.value.value : a.meta.push({
                                meta_key: s.id,
                                meta_value: s.value.value
                            });
                            let t = a.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                            t > -1 ? a.meta[t].meta_value = s.value.parameter : a.meta.push({
                                meta_key: s.id + "_parameter",
                                meta_value: s.value.parameter
                            })
                        } else {
                            let e = a.meta.findIndex((e => e.meta_key == s.id));
                            e > -1 ? a.meta[e].meta_value = s.value : a.meta.push({
                                meta_key: s.id,
                                meta_value: s.value
                            }), "editor" == s.type && s.hasOwnProperty("raw") && (e = a.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? a.meta[e].meta_value = s.raw : a.meta.push({
                                meta_key: s.id + "_raw",
                                meta_value: s.raw
                            }))
                        } if ("post" == s.from) {
                        if ("post_content" == s.id) return void m({
                            value: s.value,
                            raw: s.raw
                        });
                        a[s.id] = s.value
                    }
                    c(a)
                };
                return Bh("div", {
                    className: "add_cpt_wrapper"
                }, t ? Bh(wl, null) : s ? Bh(Wh, null, r.map(((t, a) => Bh(fm, {
                    field: t,
                    fieldIndex: a,
                    tabIndex: e.tabIndex,
                    update: w
                }))), Bh("span", {
                    className: "element_actions"
                }, Bh("a", {
                    className: p ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        if (!v(d)) {
                            e.id && (d.id = e.id);
                            let t = d.meta.findIndex((e => "vibe_type" == e.id)); - 1 == t ? d.meta.push({
                                meta_key: "vibe_type",
                                meta_value: s
                            }) : d.meta[t] = {
                                meta_key: "vibe_type",
                                meta_value: s
                            };
                            let a = d.meta.findIndex((e => "vibe_duration" == e.meta_key));
                            if (-1 == a && d.meta.push({
                                    meta_key: "vibe_duration",
                                    meta_value: "6"
                                }), a = d.meta.findIndex((e => "vibe_duration_parameter" == e.meta_key)), -1 == a && d.meta.push({
                                    meta_key: "vibe_duration_parameter",
                                    meta_value: "60"
                                }), v(d.post_title)) return Qh("vibebp").addNotification({
                                text: window.wplms_course_data.translations.please_add_title
                            }), !1;
                            _(!0), fetch(`${window.wplms_create_course_data.api_url}/createElement/quiz?post`, {
                                method: "post",
                                body: JSON.stringify({
                                    ...d,
                                    post_content: u.value,
                                    raw: u.raw,
                                    token: Kh("vibebp").getToken()
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((t => {
                                _(!1), t.status && e.show(t.quiz), t.hasOwnProperty("message") && Qh("vibebp").addNotification({
                                    text: t.message
                                })
                            })).catch((e => {
                                _(!1), console.error("Uh oh, an error!", e), Qh("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    }
                }, window.wplms_create_course_data.translations.add_cpt.quiz.add), Bh("a", {
                    className: "link",
                    onClick: e.back
                }, window.wplms_create_course_data.translations.cancel))) : i.map((e => Bh("div", {
                    className: s ? "add_cpt_type active" : "add_cpt_type",
                    onClick: () => {
                        n(e.id), l(i[i.findIndex((t => t.id == e.id))].fields)
                    }
                }, Bh("span", {
                    className: e.icon
                }), e.label))))
            },
            {
                createElement: Zh,
                useState: ef,
                useEffect: tf,
                Fragment: af,
                render: sf
            } = wp.element,
            {
                dispatch: nf,
                select: of
            } = wp.data,
            rf = e => {
                var t = React.useRef();
                let a = of("vibebp").getUser();
                a.token = of("vibebp").getToken();
                const [s, n] = ef(!0), [i, o] = ef({}), [r, l] = ef("all_students"), [d, c] = ef({}), [u, m] = ef(!1), [p, _] = ef(null);
                tf((() => {
                    fetch(`${window.wplms_course_data.api_url}/instructor/getstatstabs/${e.id}?force`, {
                        method: "POST",
                        body: JSON.stringify({
                            token: a.token,
                            cpt: "quiz"
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        n(!1), e.status && o(e.data)
                    })).catch((e => {
                        n(!1), console.error("Uh oh, an error!", e), nf("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), [e.id]);
                const w = e => {
                    if (e.detail.hasOwnProperty("field") && e.detail.hasOwnProperty("modStats")) {
                        let t = e.detail.modStats;
                        t.download_options[e.detail.index] = e.detail.field, setmodStats(t)
                    }
                };
                tf((() => {
                    document.removeEventListener("wplms_download_mod_stats_field_changed", w), document.addEventListener("wplms_download_mod_stats_field_changed", w)
                }), []), tf((() => {
                    if (!s && d && Object.keys(d).length && "function" == typeof Tabulator && d.hasOwnProperty("data") && d.data.length) {
                        var e = new Tabulator(t.current, {});
                        e = new Tabulator(t.current, {
                            data: d.data,
                            layout: "fitDataStretch",
                            layoutColumnsOnNewData: !0,
                            columns: d.columns
                        }), _(e)
                    }
                }), [d]);
                return s ? Zh(wl, null) : Zh(af, null, Zh("div", {
                    className: "download_stats_wrapper"
                }, i.hasOwnProperty("download_options") && i.download_options.length ? Zh("div", {
                    className: "mod_stats_download"
                }, i.download_options.map(((e, t) => ((e, t) => {
                    if (e && e.hasOwnProperty("type")) {
                        if ("checkbox" === e.type) return Zh("div", {
                            className: "checkbox"
                        }, Zh("input", {
                            id: e.id,
                            type: "checkbox",
                            value: e.id,
                            onChange: e => {
                                ((e, t) => {
                                    if ("checked" == t) {
                                        let t = {
                                            ...i
                                        };
                                        "checkbox" === e.type ? (1 == e.value.target.checked ? t.download_options[e.index].value = e.value.target.value : t.download_options[e.index].value = null, o(t)) : (v(e.value) ? t.download_options[e.index].value = null : t.download_options[e.index].value = e.value, o(t))
                                    }
                                })({
                                    value: e,
                                    type: "checkbox",
                                    index: t
                                }, "checked")
                            },
                            checked: e.value == e.id
                        }), Zh("label", {
                            for: e.id
                        }, e.label));
                        var a = new CustomEvent("wplms_mod_download_stats_list", {
                            detail: {
                                field: e,
                                index: t,
                                quizStats: i
                            }
                        });
                        return document.dispatchEvent(a), Zh("div", {
                            className: "field"
                        }, Zh("div", {
                            className: "wplms_mod_download_stats_list_" + e.id
                        }))
                    }
                })(e, t)))) : "", Zh("div", {
                    className: "mod_stats_download_actions"
                }, Zh("select", {
                    onChange: e => {
                        let t = {
                            ...r
                        };
                        t = e.target.value, l(t)
                    }
                }, i.hasOwnProperty("download_student_options") && i.download_student_options.length ? i.download_student_options.map(((e, t) => Zh("option", {
                    value: e.value,
                    selected: r && r.length && r == e.value ? 'selected="selected"' : ""
                }, e.label))) : ""), Zh("a", {
                    className: u ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        let t = [];
                        if (i.download_options.length && i.download_options.map(((e, a) => {
                                v(e.value) || t.push(e.value)
                            })), t.length < 1 || r.length < 1) return nf("vibebp").addNotification({
                            text: window.wplms_course_data.translations.select_option
                        }), !1;
                        m(!0), fetch(`${window.wplms_course_data.api_url}/instructor/generatemodstats/${e.id}?post`, {
                            method: "POST",
                            body: JSON.stringify({
                                token: a.token,
                                stats_student_option: r,
                                stats_options: t,
                                post_type: "quiz"
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            m(!1), e.hasOwnProperty("columns") && e.columns.length ? c({
                                columns: e.columns,
                                data: e.data
                            }) : e.message && nf("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            m(!1), console.error("Uh oh, an error!", e), nf("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.generate_stats), d && Object.keys(d).length && d.data.length > 1 ? Zh("a", {
                    className: "download button primary",
                    onClick: () => {
                        p && !s && d && Object.keys(d).length && d.hasOwnProperty("data") && d.data.length && p.download("csv", "data" + e.id + ".csv", {
                            delimiter: ","
                        })
                    }
                }, window.wplms_course_data.translations.download) : "")), d ? Zh("div", {
                    ref: t
                }) : "")
            },
            {
                createElement: lf,
                useState: df,
                useEffect: cf,
                Fragment: uf,
                render: mf
            } = wp.element,
            {
                dispatch: pf,
                select: _f
            } = wp.data,
            wf = e => {
                const [t, a] = df([]), [s, n] = df(""), [i, o] = df([]), [r, l] = df(!1), [d, c] = df(!1), [u, m] = df(!1), [_, w] = df({});
                cf((() => (document.addEventListener("vibebp_component_reload", v, !1), () => {
                    document.removeEventListener("vibebp_component_reload", v)
                })));
                const v = () => {
                    h()
                };
                p((() => {
                    s.length > 3 && (l(!0), fetch(`${window.vibebp.api.url}/search?nocache`, {
                        method: "post",
                        body: JSON.stringify({
                            search: s,
                            type: "user",
                            token: _f("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        l(!1), e.status && Array.isArray(e.results) && o(e.results)
                    })).catch((e => {
                        l(!1), console.error("Uh oh, an error!", e), pf("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })))
                }), 500, [s]), cf((() => {
                    h()
                }), [u]);
                const h = () => {
                    "course" != u || _.hasOwnProperty("options") || fetch(`${window.wplms_course_data.api_url}/instructor/courses?force`, {
                        method: "POST",
                        body: JSON.stringify({
                            filter: {
                                paged: 1,
                                posts_per_page: 9999,
                                context: "labels",
                                orderby: "recent",
                                order: "DESC",
                                search_terms: "",
                                post_status: "publish"
                            },
                            token: _f("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        if (t.status && t.hasOwnProperty("courses") && t.courses.length) {
                            let a = [],
                                s = [];
                            t.courses.map(((e, t) => {
                                a.push({
                                    value: e.id,
                                    label: e.name
                                })
                            })), fetch(`${window.wplms_course_data.api_url}/instructor/assign/getcourses?nocache`, {
                                method: "POST",
                                body: JSON.stringify({
                                    token: _f("vibebp").getToken(),
                                    id: e.id,
                                    cpt: e.cpt
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((e => {
                                e.status && e.hasOwnProperty("courses") && e.courses.length && (s = e.courses), w({
                                    options: a,
                                    cpt: "quiz",
                                    value: s
                                })
                            })).catch((e => {
                                console.error("Uh oh, an error!", e), pf("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            }))
                        }
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), pf("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                };
                return lf("div", {
                    className: "assigned_block"
                }, "student" == u ? lf(uf, null, lf("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        m(!1)
                    }
                }), lf("div", {
                    className: "vibebp_form_field"
                }, t.length ? lf(uf, null, lf("label", null, window.wplms_course_data.translations.assigned), lf("div", {
                    className: "wplms_assigned_members"
                }, t.map((e => lf(Al, {
                    user_ids: t
                }, lf("div", {
                    className: "wplms_assigned_member",
                    onClick: () => {
                        let s = {
                            ...t
                        };
                        t.indexOf(e) > -1 && (s.splice(s.indexOf(e), 1), a(s))
                    }
                }, lf(jl, {
                    type: "user",
                    id: {
                        user_id: e
                    }
                }))))), t.length ? lf("a", {
                    className: d ? "button is-loading is-primary" : "button is-primary",
                    onClick: () => {
                        c(!0), d || fetch(`${window.wplms_course_data.api_url}/instructor/assign?post`, {
                            method: "POST",
                            body: JSON.stringify({
                                token: _f("vibebp").getToken(),
                                id: e.id,
                                cpt: e.cpt,
                                users: t
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            c(!1), t.status && (e.close(), pf("vibebp").addNotification({
                                text: t.message
                            }))
                        })).catch((e => {
                            c(!1), console.error("Uh oh, an error!", e), pf("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }, window.wplms_course_data.translations.assign) : "")) : ""), lf("div", {
                    className: r ? "control is-loading" : "control"
                }, lf("label", null, window.wplms_course_data.translations.fullusername_or_email), lf("input", {
                    type: "text",
                    value: s,
                    onChange: e => {
                        n(e.target.value)
                    },
                    placeholder: window.wplms_course_data.translations.search_student
                })), lf("div", {
                    className: "wplms_assigned_members_wrapper"
                }, Array.isArray(i) && i.length ? lf("div", {
                    className: "wplms_assigned_members"
                }, i.map(((e, s) => lf("div", {
                    className: "wplms_assigned_member",
                    onClick: () => {
                        let n = [...t];
                        if (-1 == n.indexOf(e.id)) {
                            n.push(e.id);
                            let t = [...i];
                            t.splice(s, 1), o(t)
                        }
                        a(n)
                    }
                }, lf("img", {
                    src: e.avatar
                }), lf("span", null, e.name))))) : "")) : "course" == u ? lf("div", null, lf("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        m(!1)
                    }
                }), _.hasOwnProperty("options") && _.options.length ? lf("div", null, lf(Mn, {
                    field: _,
                    fieldIndex: "",
                    update: (e, t, a) => {
                        "fieldvaluechanged" == a && w(e)
                    }
                }), lf("a", {
                    className: d ? "button is-loading is-primary" : "button is-primary",
                    onClick: () => {
                        !d && _.hasOwnProperty("value") && (c(!0), fetch(`${window.wplms_course_data.api_url}/instructor/assign?post`, {
                            method: "POST",
                            body: JSON.stringify({
                                token: _f("vibebp").getToken(),
                                id: e.id,
                                cpt: e.cpt,
                                courses: _.value
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            c(!1), e.status && pf("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            c(!1), console.error("Uh oh, an error!", e), pf("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        })))
                    }
                }, window.wplms_course_data.translations.assign)) : lf("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_courses_found)) : lf("div", {
                    className: "selectType"
                }, lf("a", {
                    className: "button",
                    onClick: () => {
                        m("student")
                    }
                }, window.wplms_course_data.translations.assign_to_student), lf("a", {
                    className: "button",
                    onClick: () => {
                        m("course")
                    }
                }, window.wplms_course_data.translations.assign_to_course_students)))
            },
            {
                createElement: vf,
                useState: hf,
                useEffect: ff,
                Fragment: gf,
                render: yf
            } = wp.element,
            {
                dispatch: bf,
                select: kf
            } = wp.data,
            xf = e => {
                const [t, a] = hf({});
                return ff((() => {
                    let t = "",
                        s = "";
                    switch (e.type) {
                        case "friends":
                            s = "user", t = e.id.item_id;
                            break;
                        case "forum":
                            s = "forum", t = e.id.item_id;
                            break;
                        case "group":
                            s = "group", t = e.id.item_id;
                            break;
                        case "activity":
                            s = "user", t = e.id.secondary_item_id;
                            break;
                        case "member":
                        case "name":
                        case "user_tip":
                        case "user":
                            s = "user", t = e.id.user_id;
                            break;
                        default:
                            s = e.type, t = e.id.item_id
                    }
                    s || (s = "user");
                    let n = kf("vibebp").getData(s + "_" + t);
                    n ? (a(n), console.log(n), e.update(n)) : localforage.getItem(s + "_" + t).then((n => {
                        null !== n ? (a(JSON.parse(n)), bf("vibebp").setData(s + "_" + t, JSON.parse(n)), n.hasOwnProperty("name") && e.update(n)) : fetch(`${window.vibebp.api.url}/avatar?id=${s+"_"+t}&client_id=${window.vibebp.settings.client_id}`, {
                            method: "post",
                            body: JSON.stringify({
                                type: e.type,
                                ids: e.id,
                                token: kf("vibebp").getToken()
                            })
                        }).then((e => e.json())).then((n => {
                            n.hasOwnProperty("avatar") && (bf("vibebp").setData(s + "_" + t, n), localforage.setItem(s + "_" + t, JSON.stringify(n)), a(n), e.update(n))
                        }))
                    }))
                }), [e.id.item_id, e.id.user_id]), t.hasOwnProperty("avatar") || t.hasOwnProperty("name") ? "member" == e.type ? vf("span", {
                    className: "vibebp_member"
                }, vf("img", {
                    src: t.avatar,
                    className: "vibebp_avatar",
                    onClick: e.click,
                    alt: t.name,
                    title: t.name
                }), vf("span", null, t.name)) : "group" == e.type ? vf("span", {
                    className: "vibebp_group"
                }, vf("img", {
                    src: t.avatar,
                    className: "vibebp_avatar",
                    onClick: e.click,
                    alt: t.name,
                    title: t.name
                }), vf("span", null, t.name)) : "user_tip" == e.type ? vf("span", {
                    className: "vibebp_member tip",
                    title: t.name
                }, vf("img", {
                    src: t.avatar,
                    className: "vibebp_avatar",
                    onClick: e.click,
                    alt: t.name,
                    title: t.name
                })) : "name" == e.type || "forum" == e.type ? vf("span", null, t.name) : vf("img", {
                    src: t.avatar,
                    className: "vibebp_avatar",
                    onClick: e.click,
                    alt: t.name,
                    title: t.name
                }) : ""
            },
            {
                createElement: Nf,
                useState: qf,
                useEffect: Of,
                Fragment: If,
                render: Cf
            } = wp.element,
            {
                dispatch: Sf,
                select: Pf
            } = wp.data,
            Ef = e => {
                const [t, a] = qf(!1), [s, n] = qf({}), [i, o] = qf([]), [r, l] = qf(!1), [d, c] = qf(!0), [u, m] = qf(!1), [_, w] = qf({
                    cpt: e.cpt,
                    id: e.id,
                    paged: 1,
                    per_page: 20,
                    s: "",
                    orderby: "date_recorded",
                    order: "DESC"
                });
                Of((() => (document.addEventListener("vibebp_component_reload", v, !1), () => {
                    document.removeEventListener("vibebp_component_reload", v)
                })));
                const v = () => {
                    m(!1), w({
                        ..._,
                        paged: 1
                    })
                };
                p((() => {
                    u || (a(!0), fetch(`${window.wplms_course_data.api_url}/instructor/leaderboard/${e.id}?force`, {
                        method: "post",
                        body: JSON.stringify({
                            args: _,
                            token: Pf("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (a(!1), e.status)
                            if (r) {
                                let t = [...i, ...e.members];
                                o(t), t.length < e.total ? c(!0) : (c(!1), _.s.length || m(!0))
                            } else o(e.members), e.members.length < e.total ? c(!0) : (c(!1), _.s.length || m(!0));
                        else c(!1)
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), Sf("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })))
                }), 500, [_]);
                let h = [...i];
                if (console.log(h), !d && (_.s.length && (h = h.filter((e => e && e.hasOwnProperty("name") && e.name.toLowerCase().includes(_.s.toLowerCase()))), console.log(h)), _.orderby.length && _.order)) switch (_.orderby) {
                    case "date_recorded":
                    default:
                        "DESC" == _.order ? h.sort((function(e, t) {
                            return t.date_recorded - e.date_recorded
                        })) : h.sort((function(e, t) {
                            return e.date_recorded - t.date_recorded
                        }));
                        break;
                    case "alphabetical":
                        "DESC" == _.order ? h.sort((function(e, t) {
                            return t.name.localeCompare(e.name)
                        })) : h.sort((function(e, t) {
                            return e.name.localeCompare(t.name)
                        }));
                        break;
                    case "score":
                        "DESC" == _.order ? h.sort((function(e, t) {
                            return t.score - e.score
                        })) : h.sort((function(e, t) {
                            return e.score - t.score
                        }))
                }
                return Nf("div", {
                    className: "leaderboard_wrapper"
                }, Nf("div", {
                    className: "leaderboard_header"
                }, Nf("div", {
                    className: "vibebp_form_field"
                }, Nf("input", {
                    type: "text",
                    value: _.s,
                    onChange: e => {
                        w({
                            ..._,
                            s: e.target.value
                        })
                    },
                    placeholder: window.wplms_course_data.translations.search_student
                })), Nf("div", null, Nf("select", {
                    value: _.orderby,
                    onChange: e => {
                        w({
                            ..._,
                            orderby: e.target.value
                        })
                    }
                }, Object.keys(window.wplms_course_data.leaderboard.sorters).map((e => Nf("option", {
                    value: e
                }, window.wplms_course_data.leaderboard.sorters[e])))), Nf("span", null, Nf("span", {
                    className: "ASC" == _.order ? "active vicon vicon-arrow-up" : "vicon vicon-arrow-up",
                    onClick: () => w({
                        ..._,
                        order: "ASC"
                    })
                }), Nf("span", {
                    className: "DESC" == _.order ? "active vicon vicon-arrow-down" : "vicon vicon-arrow-down",
                    onClick: () => w({
                        ..._,
                        order: "DESC"
                    })
                })))), Nf("div", {
                    className: "leaderboard_members"
                }, t ? Nf(wl, null) : h.length ? Nf(Al, {
                    user_ids: h.map((e => e.user_id)),
                    type: "member"
                }, h.map(((e, t) => Nf("div", {
                    className: "leaderboard_member"
                }, Nf("div", null, Nf(xf, {
                    type: "member",
                    id: {
                        user_id: e.user_id
                    },
                    update: t => {
                        if (console.log(t), !e.hasOwnProperty("name")) {
                            let e = [...i];
                            t.hasOwnProperty("id") ? e[e.findIndex((e => e.user_id == t.id))].name = t.name : t.hasOwnProperty("user_id") && (e[e.findIndex((e => e.user_id == t.user_id))].name = t.name), o(e)
                        }
                    }
                })), Nf("span", null, Nf(Ot, {
                    timestamp: e.date_recorded
                })), Nf("div", null, e.score))))) : Nf("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.members_not_found), d ? Nf("a", {
                    className: "link",
                    onClick: () => {
                        l(!0), w({
                            ..._,
                            paged: _.paged + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : ""))
            },
            {
                createElement: zf,
                useState: Tf,
                useEffect: Lf,
                Fragment: Mf,
                render: $f
            } = wp.element,
            {
                dispatch: jf,
                select: Af
            } = wp.data,
            Df = e => {
                const [t, a] = Tf(!1), [s, n] = Tf({}), [i, o] = Tf([]), [r, l] = Tf(!1), [d, c] = Tf(!1), [u, m] = Tf(!1), [_, w] = Tf(!1), [h, f] = Tf({
                    cpt: e.cpt,
                    id: e.id,
                    paged: 1,
                    per_page: 20,
                    sort: "date_recorded",
                    order: "DESC"
                });
                Lf((() => (document.addEventListener("vibebp_component_reload", g, !1), () => {
                    document.removeEventListener("vibebp_component_reload", g)
                })));
                const g = () => {
                    f({
                        ...h,
                        paged: 1
                    })
                };
                return Lf((() => {
                    if (document.getElementById("chartjs")) c(!0);
                    else {
                        const e = document.createElement("script");
                        e.src = window.wplms_course_data.chartjs, e.id = "chartjs", document.body.appendChild(e), e.onload = () => {
                            c(!0)
                        }
                    }
                }), []), Lf((() => {
                    d && r && s.hasOwnProperty("data") && !v(s.data.data) && new Chart(r.getContext("2d"), {
                        type: "doughnut",
                        data: {
                            labels: s.data.labels,
                            datasets: [{
                                data: s.data.data,
                                backgroundColor: s.data.bgs
                            }]
                        }
                    })
                }), [d, r, s]), p((() => {
                    a(!0), fetch(`${window.wplms_course_data.api_url}/instructor/stats/${h.id}?force`, {
                        method: "post",
                        body: JSON.stringify({
                            args: h,
                            token: Af("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        a(!1), e.status && n(e.statistics)
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), jf("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), 500, [h]), zf(Mf, null, e.hasOwnProperty("nodownload") && e.nodownload ? "" : zf(Mf, null, u ? zf("div", {
                    className: "download_mod_stats_warpper"
                }, zf("span", {
                    className: "link is-primary",
                    onClick: () => m(!1)
                }, window.wplms_course_data.translations.close), zf(rf, {
                    id: e.id
                })) : zf("a", {
                    className: "button is-primary",
                    onClick: () => m(!0)
                }, window.wplms_course_data.translations.download_stats), window.wplms_course_data.enable_assign_quiz ? _ ? zf("div", {
                    className: "download_mod_stats_warpper"
                }, zf("span", {
                    className: "link",
                    onClick: () => w(!1)
                }, window.wplms_course_data.translations.close), zf(wf, {
                    close: () => w(!1),
                    cpt: e.cpt,
                    id: e.id
                })) : zf("a", {
                    className: "button is-primary",
                    onClick: () => w(!0)
                }, window.wplms_course_data.translations.assign) : ""), zf("div", {
                    className: "statistics_wrapper"
                }, zf("div", {
                    className: "statistics_marks_distribution"
                }, zf("canvas", {
                    ref: e => {
                        e && !r && l(e)
                    }
                })), zf("div", {
                    className: "vital_stats"
                }, s.hasOwnProperty("vitals") ? zf("ul", null, s.vitals.map((e => zf("li", null, zf("span", null, e.label), zf("span", null, e.value))))) : "")), zf(Ef, {
                    cpt: e.cpt,
                    id: e.id
                }))
            },
            {
                createElement: Hf,
                render: Uf,
                useState: Ff,
                useEffect: Jf,
                useContext: Rf,
                Fragment: Bf,
                RawHTML: Vf
            } = wp.element,
            {
                dispatch: Xf,
                select: Wf
            } = wp.data,
            Yf = e => {
                const [t, a] = Ff(!1), [s, n] = Ff(!1), [i, o] = Ff(), r = parseInt(e.member), [l, d] = Ff({
                    paged: 1,
                    search_terms: "",
                    per_page: 20,
                    action: "",
                    order: "DESC",
                    scope: r
                }), [c, u] = Ff(""), [m, _] = Ff(!1), [w, v] = Ff(!1), [h, f] = Ff(!1);
                let g = Wf("vibebp").getUser();
                g.token = Wf("vibebp").getToken();
                const y = window.wplms_course_data.api_url;
                p((() => {
                    a(!0);
                    let t = {
                            method: "POST",
                            body: JSON.stringify({
                                id: e.id,
                                filter: l,
                                token: g.token
                            })
                        },
                        s = `${y}/instructor/${e.cpt}/0/activity`;
                    e.hasOwnProperty("id") && void 0 !== e.id && (s = `${y}/instructor/${e.cpt}/${e.id}/activity`), fetch(s + "?force", t).then((e => e.json())).then((e => {
                        if (a(!1), e.status) {
                            if (m) {
                                let t = [...i, ...e.data.activities];
                                o(t), _(!1)
                            } else o(e.data.activities);
                            e.data.has_more_items ? v(!0) : v(!1), e.is_instructor && f(e.is_instructor)
                        } else e.hasOwnProperty("message") && Xf("vibebp").addNotification({
                            text: e.message
                        })
                    }))
                }), 500, [l]);
                const b = (e, t) => {
                    let a = [...e];
                    if ("remove" === t || "remove-favorite" == t && "activity-favs" == args.filter) {
                        let t = [...i],
                            a = t.findIndex((t => t.id === e.id)); - 1 !== a && (t.splice(a, 1), o(t))
                    }
                    "add" === t && (a.unshift(e), o(a))
                };
                return Hf("div", {
                    className: "course_activity_wrapper"
                }, Hf("div", {
                    className: "portal"
                }, Hf("div", {
                    className: "portal_header"
                }, Hf("div", {
                    className: "header_links"
                }, Hf("div", {
                    className: "searchbox active"
                }, Hf("span", {
                    className: "vicon vicon-search"
                }), Hf("input", {
                    type: "text",
                    placeholder: window.wplms_course_data.translations.search,
                    value: l.search_terms,
                    onChange: e => {
                        d({
                            ...l,
                            search_terms: e.target.value
                        })
                    }
                }))), Hf("div", {
                    className: "header_extras"
                }, Hf("select", {
                    value: l.scope,
                    onChange: e => {
                        d({
                            ...l,
                            scope: e.target.value
                        })
                    }
                }, Hf("option", {
                    value: "all"
                }, "All"), Hf("option", {
                    value: "personal"
                }, "personal")), Hf("div", {
                    className: "filter_by"
                }, Hf("select", {
                    value: l.action,
                    onChange: e => {
                        d({
                            ...l,
                            action: e.target.value
                        })
                    }
                }, Hf("option", null, window.wplms_course_data.translations.filter_by), Object.keys(window.wplms_course_data.course.admin.activity_sorters).length ? Object.keys(window.wplms_course_data.course.admin.activity_sorters).map((e => Hf("option", {
                    value: e
                }, window.wplms_course_data.course.admin.activity_sorters[e]))) : ""), Hf("span", null, Hf("span", {
                    className: "ASC" == l.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                    onClick: () => {
                        d({
                            ...l,
                            order: "ASC"
                        })
                    }
                }), Hf("span", {
                    className: "DESC" == l.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                    onClick: () => {
                        d({
                            ...l,
                            order: "DESC"
                        })
                    }
                }))))), Hf("div", {
                    className: "portal_body"
                }, t ? Hf(wl, null) : "", i && i.length ? Hf("div", {
                    className: "activity_list"
                }, i.map((e => Hf(i_, {
                    activity: e,
                    rootActivityId: e.id,
                    update: b
                })))) : Hf("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_activity), w ? Hf("a", {
                    className: "link",
                    onClick: () => {
                        _(!0), d({
                            ...l,
                            paged: l.paged + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : null)))
            },
            {
                createElement: Qf,
                useState: Kf,
                useEffect: Gf,
                Fragment: Zf,
                render: eg
            } = wp.element,
            {
                dispatch: tg,
                select: ag
            } = wp.data,
            sg = e => {
                const [t, a] = Kf(!1), [s, n] = Kf([]), [i, o] = Kf({
                    paged: 1,
                    orderby: "date",
                    order: "DESC",
                    s: ""
                }), [r, l] = Kf(!1), [d, c] = Kf(!0), [u, m] = Kf(""), [_, w] = Kf(!1), [v, h] = Kf(!1), [f, g] = Kf([]), [y, b] = Kf("stats"), [k, x] = Kf(!1), [N, q] = Kf(!1), O = (ag("vibebp").getUser(), ag("vibebp").getToken()), [I, C] = Kf(null), S = () => {
                    _ || (x(!1), o({
                        ...i,
                        paged: 1
                    }))
                };
                Gf((() => (document.addEventListener("vibebp_component_reload", S), () => {
                    document.removeEventListener("vibebp_component_reload", S)
                }))), p((() => {
                    if (k) return;
                    I && I.abort();
                    let e = {},
                        t = new AbortController;
                    I && (e = {
                        signal: t.signal
                    }), C(t), a(!0);
                    let o = {
                            ...i
                        },
                        d = 0;
                    o && o.hasOwnProperty("s") && void 0 !== o.s && o.s.length && (delete o.s, d = 1);
                    let u = `${window.wplms_course_data.api_url}/instructor/quizzes?args=${encodeURIComponent(JSON.stringify(o))}`;
                    !k && d && (u += "&nocache"), N && (u += "&force"), fetch(u, {
                        method: "POST",
                        ...e,
                        body: JSON.stringify({
                            ...i,
                            token: O
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (a(!1), q(!1), c(!1), e.status)
                            if (r) {
                                let t = [...s];
                                e.quizzes.length && (e.quizzes.map(((e, a) => {
                                    t.push(e)
                                })), n(t)), t.length < e.total ? c(!0) : i.s.length || x(!0), l(!1)
                            } else n(e.quizzes), e.quizzes.length < e.total ? c(!0) : i.s.length || x(!0);
                        else m(e.message)
                    })).catch((e => {
                        "AbortError" === e.name ? console.log("Fetch aborted") : (a(!1), console.error("Uh oh, an error!", e), tg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [i]), Gf((() => {
                    a(!0), fetch(`${window.wplms_course_data.api_url}/gettabs/0?client_id=${window.wplms_course_data.client_id}`, {
                        method: "POST",
                        body: JSON.stringify({
                            token: O
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        a(!1);
                        let t = e[e.findIndex((e => "course_curriculum" == e.id))].fields,
                            s = t[t.findIndex((e => "curriculum" == e.type))].curriculum_elements;
                        g(s[s.findIndex((e => "quiz" == e.type))].types)
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), tg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), []);
                let P = [...s];
                if (i.s.length && (P = P.filter((e => e.title.toLowerCase().includes(i.s.toLowerCase())))), i.orderby.length && i.order) switch (i.orderby) {
                    case "date":
                    default:
                        "DESC" == i.order ? P.sort((function(e, t) {
                            return new Date(t.created_time).getTime() - new Date(e.created_time).getTime()
                        })) : P.sort((function(e, t) {
                            return new Date(e.created_time).getTime() - new Date(t.created_time).getTime()
                        }));
                        break;
                    case "title":
                        "DESC" == i.order ? P.sort((function(e, t) {
                            return t.title.localeCompare(e.title)
                        })) : P.sort((function(e, t) {
                            return e.title.localeCompare(t.title)
                        }));
                        break;
                    case "comment_count":
                        "DESC" == i.order ? P.sort((function(e, t) {
                            return t.attempts - e.attempts
                        })) : P.sort((function(e, t) {
                            return e.attempts - t.attempts
                        }))
                }
                let E = {};
                return P.length && (E = P[P.findIndex((e => e.id === _))]), Qf("div", {
                    className: "wplms_manage_quizzes_wrapper"
                }, v ? Qf(Zf, null, Qf("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        h(!1), w(!1)
                    }
                }), Qf(Gh, {
                    back: () => h(!1),
                    show: e => {
                        if (h(!1), !_) {
                            q(!0);
                            let e = {
                                ...i
                            };
                            e.paged = 1, o(e)
                        }
                    },
                    types: f,
                    id: _,
                    type: s.findIndex((e => e.id == _)) > -1 ? s[s.findIndex((e => e.id == _))].type : 0
                })) : _ ? Qf("div", {
                    className: "course_manage quiz_wrapper"
                }, Qf("div", {
                    className: "quiz_header"
                }, Qf("span", {
                    className: "header_links"
                }, Qf("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        h(!1), w(!1)
                    }
                }), Qf("span", null, s[s.findIndex((e => e.id == _))].link ? Qf("span", null, Qf("a", {
                    href: s[s.findIndex((e => e.id == _))].link,
                    target: "_blank",
                    className: "vicon vicon-link"
                })) : "", Qf("span", {
                    className: "vicon vicon-pencil",
                    onClick: () => {
                        h(_)
                    }
                }), Qf("span", {
                    className: "vicon vicon-trash",
                    onClick: () => {
                        window.confirm(window.wplms_course_data.translations.confirm_delete_quiz) && (a(!0), fetch(`${window.wplms_course_data.api_url}/instructor/deleteQuiz?post`, {
                            method: "POST",
                            body: JSON.stringify({
                                quiz_id: _,
                                token: O
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            if (a(!1), e.status) {
                                h(!1), w(!1);
                                let e = [...s];
                                e.splice(e.findIndex((e => e.id == _)), 1), n(e)
                            }
                            e.hasOwnProperty("message") && tg("vibebp").addNotification({
                                text: e.message
                            })
                        })).catch((e => {
                            a(!1), console.error("Uh oh, an error!", e), tg("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        })))
                    }
                }))), Qf("h2", {
                    dangerouslySetInnerHTML: {
                        __html: s[s.findIndex((e => e.id == _))].title
                    }
                }), Qf("div", {
                    className: "quiz_info"
                }, Qf("div", null, Qf("span", null, Qf("span", {
                    className: "vicon vicon-calendar"
                }), " ", s[s.findIndex((e => e.id == _))].created), Qf("div", {
                    className: "wplms_quiz-type"
                }, s[s.findIndex((e => e.id == _))]["quiz-type"].length ? s[s.findIndex((e => e.id == _))]["quiz-type"].map((e => Qf("span", null, e))) : "")), Qf("div", null, Qf("span", null, Qf("span", {
                    className: "vicon vicon-user"
                }), " ", s[s.findIndex((e => e.id == _))].attempts), Qf("span", null, Qf("span", {
                    className: "vicon vicon-timer"
                }), " ", Qf(Ot, {
                    timestamp: s[s.findIndex((e => e.id == _))].timer
                })), Qf("span", null, Qf("span", {
                    className: "vicon vicon-cup"
                }), " ", s[s.findIndex((e => e.id == _))].marks)))), Qf("div", {
                    className: "course_tabs"
                }, Qf("div", {
                    className: "instructor_tabs"
                }, Qf("span", {
                    className: "stats" == y ? "active" : "",
                    onClick: () => b("stats")
                }, window.wplms_course_data.translations.statistics), Qf("span", {
                    className: "activity" == y ? "active" : "",
                    onClick: () => b("activity")
                }, window.wplms_course_data.translations.activity), Qf("span", {
                    className: "submissions" == y ? "active" : "",
                    onClick: () => b("submissions")
                }, window.wplms_course_data.translations.submissions), Qf("span", {
                    className: "view" == y ? "active" : "",
                    onClick: () => b("view")
                }, window.wplms_course_data.translations.view))), Qf("div", {
                    className: "course_tab_content"
                }, "stats" == y ? Qf(Df, {
                    cpt: "quiz",
                    id: _
                }) : "activity" == y ? Qf(Yf, {
                    id: _,
                    cpt: "quiz"
                }) : "submissions" == y ? Qf(Pv, {
                    id: _,
                    type: "quiz",
                    statuses: window.wplms_course_data.course.submission_quiz_statuses
                }) : E.hasOwnProperty("quiz_type") ? Qf("div", null, (() => {
                    var e = {
                        coursestatus: {},
                        type: E.quiz_type,
                        id: E.id,
                        course_id: 0
                    };
                    E.hasOwnProperty("content_id") && (e.content_id = E.content_id);
                    var t = new CustomEvent("custom_quiz_type", {
                        detail: e
                    });
                    return document.dispatchEvent(t), Qf("div", {
                        id: E.quiz_type,
                        quizid: E.id
                    })
                })()) : Qf(id, {
                    quizid: _,
                    update: () => {
                        console.log("#")
                    }
                }))) : Qf(Zf, null, Qf("div", {
                    className: "mycourses_header vibebp_form"
                }, Qf("div", null, Qf("div", {
                    className: "vibebp_form_field"
                }, Qf("input", {
                    type: "text",
                    placeholder: window.vibebp.translations.search_text,
                    value: i.s,
                    onChange: e => {
                        o({
                            ...i,
                            s: e.target.value
                        })
                    }
                }), Qf("span", {
                    className: "vicon vicon-search"
                }))), Qf("div", null, Qf("select", {
                    value: i.orderby,
                    onChange: e => {
                        o({
                            ...i,
                            orderby: e.target.value
                        })
                    }
                }, Qf("option", null, window.vibebp.translations.select_option), Object.keys(window.wplms_course_data.orderby).map((e => Qf("option", {
                    value: e
                }, window.wplms_course_data.orderby[e])))), Qf("span", null, Qf("span", {
                    className: "ASC" == i.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                    onClick: () => {
                        o({
                            ...i,
                            order: "ASC"
                        })
                    }
                }), Qf("span", {
                    className: "DESC" == i.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                    onClick: () => {
                        o({
                            ...i,
                            order: "DESC"
                        })
                    }
                })))), Qf("div", {
                    className: "vibebp_quizzes"
                }, Qf("div", {
                    class: "new_quiz",
                    onClick: () => h(!0)
                }, Qf("i", {
                    class: "vicon vicon-plus"
                })), t && !r ? Qf(wl, null) : "", P.length ? P.map((e => Qf("div", {
                    className: "wplms_quiz",
                    onClick: () => w(e.id)
                }, Qf("div", null, Qf("h3", null, Qf("span", {
                    className: "static" == e.type ? "vicon vicon-exchange-vertical" : "vicon vicon-control-shuffle"
                }), " ", Qf("strong", {
                    dangerouslySetInnerHTML: {
                        __html: e.title
                    }
                })), Qf("span", null, e.created), Qf("div", {
                    className: "wplms_quiz-type"
                }, e["quiz-type"].length ? e["quiz-type"].map((e => Qf("span", null, e))) : "")), Qf("div", {
                    className: "quiz_meta"
                }, Qf("span", null, Qf("span", {
                    className: "vicon vicon-user"
                }), " ", e.attempts), Qf("span", null, Qf("span", {
                    className: "vicon vicon-time"
                }), " ", e.timer), Qf("span", null, Qf("span", {
                    className: "vicon vicon-medall-alt"
                }), " ", e.marks))))) : Qf("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_quizzes), !t && d ? Qf("a", {
                    className: "link",
                    onClick: () => {
                        l(!0), o({
                            ...i,
                            paged: i.paged + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : t && r ? Qf(wl, null) : "")))
            },
            {
                createElement: ng,
                render: ig,
                useState: og,
                useEffect: rg,
                Fragment: lg
            } = wp.element,
            {
                dispatch: dg,
                select: cg
            } = wp.data,
            ug = e => {
                const [t, a] = og(!1), [s, n] = og(!1);
                return rg((() => {
                    fetch(`${window.wplms_course_data.api_url}/course/single-unit/${e.unitid}?client_id=${window.wplms_course_data.client_id}&force`, {
                        method: "post",
                        body: JSON.stringify({
                            id: e.unitid,
                            type: "unit"
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (e && e.hasOwnProperty("meta")) {
                            a(e), e.meta.hasOwnProperty("scorm_type") && e.meta.scorm_type && setTimeout((() => {
                                var e = new CustomEvent("unit_content_loaded", {
                                    detail: {
                                        coursestatus: {}
                                    }
                                });
                                document.dispatchEvent(e)
                            }), 200);
                            var t = new CustomEvent("unit_loaded", {
                                detail: {
                                    coursestatus: {}
                                }
                            });
                            document.dispatchEvent(t), document.dispatchEvent(new Event("VibeBP_Editor_Content"))
                        }
                        n(!0)
                    })).catch((e => {
                        n(!0), console.error("Uh oh, an error!", e), dg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), [e.unitid]), s ? ng(lg, null, ng("div", {
                    className: "unit_content"
                }, t ? ng(fc, {
                    curriculumItem: t,
                    noLabels: !0
                }) : "")) : ng(wl, null)
            },
            mg = e => {
                const [t, a] = og(!1), [s, n] = og(!1);
                return rg((() => {
                    fetch(`${window.wplms_course_data.api_url}/course/single-unit/${e.unitid}?client_id=${window.wplms_course_data.client_id}?force`, {
                        method: "post",
                        body: JSON.stringify({
                            id: e.unitid,
                            type: "unit",
                            token: cg("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (e && e.hasOwnProperty("meta")) {
                            a(e), e.meta.hasOwnProperty("scorm_type") && e.meta.scorm_type && setTimeout((() => {
                                var e = new CustomEvent("unit_content_loaded", {
                                    detail: {
                                        coursestatus: {}
                                    }
                                });
                                document.dispatchEvent(e)
                            }), 200);
                            var t = new CustomEvent("unit_loaded", {
                                detail: {
                                    coursestatus: {}
                                }
                            });
                            document.dispatchEvent(t), document.dispatchEvent(new Event("VibeBP_Editor_Content"))
                        }
                        n(!0)
                    })).catch((e => {
                        n(!0), console.error("Uh oh, an error!", e), dg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), [e.unitid]), s ? ng(lg, null, ng("div", {
                    className: "unit_content"
                }, t ? ng(fc, {
                    curriculumItem: t,
                    noLabels: !0
                }) : "")) : ng(wl, null)
            },
            pg = mg;
        window.addEventListener("DOMContentLoaded", (e => {
            document.querySelector(".single_unit") && ig(ng(ug, {
                unitid: document.querySelector(".single_unit").getAttribute("data-id")
            }), document.querySelector(".single_unit"))
        })), document.addEventListener("userLoaded", (e => {
            document.querySelector(".single_unit") && ig(ng(mg, {
                unitid: document.querySelector(".single_unit").getAttribute("data-id")
            }), document.querySelector(".single_unit"))
        }));
        const {
            createElement: _g,
            useState: wg,
            useEffect: vg,
            Fragment: hg,
            render: fg
        } = wp.element, {
            dispatch: gg,
            select: yg
        } = wp.data, bg = e => {
            const [t, a] = wg(!1), [s, n] = wg(0), [i, o] = wg(e.types), [r, l] = wg([]), [d, c] = wg({
                post_title: "",
                post_content: "",
                type: "",
                taxonomy: [],
                meta: [{
                    meta_key: "vibe_duration",
                    meta_value: 5
                }, {
                    meta_key: "vibe_duration_parameter",
                    meta_value: 60
                }]
            }), [u, m] = wg({
                post_content: "",
                raw: []
            }), [p, _] = wg(!1);
            vg((() => {
                e.hasOwnProperty("type") && n(e.type)
            }), []), vg((() => {
                e.id && e.type && (a(!0), fetch(`${window.wplms_create_course_data.api_url}/curriculum/getElementFields?force`, {
                    method: "post",
                    body: JSON.stringify({
                        type: "unit",
                        id: e.id,
                        fields: i[i.findIndex((t => t.id == e.type))].fields,
                        token: yg("vibebp").getToken()
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    if (e.status) {
                        if (Array.isArray(e.fields)) {
                            l(e.fields);
                            let t = {
                                post_title: "",
                                post_content: "",
                                type: "",
                                taxonomy: [],
                                meta: []
                            };
                            new Promise((a => {
                                e.fields.map(((s, n) => {
                                    if ("taxonomy" == s.type) {
                                        let e = t.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? t.taxonomy.push({
                                            taxonomy: s.taxonomy,
                                            value: s.value
                                        }) : t.taxonomy[e].value = s.value
                                    }
                                    if ("meta" == s.from)
                                        if (v(s.value) && !v(s.default) && (s.value = s.default), "duration" == s.type) {
                                            let e = t.meta.findIndex((e => e.meta_key == s.id));
                                            e > -1 ? t.meta[e].meta_value = s.value.value : t.meta.push({
                                                meta_key: s.id,
                                                meta_value: s.value.value
                                            });
                                            let a = t.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                                            a > -1 ? t.meta[a].meta_value = s.value.parameter : t.meta.push({
                                                meta_key: s.id + "_parameter",
                                                meta_value: s.value.parameter
                                            })
                                        } else {
                                            let e = t.meta.findIndex((e => e.meta_key == s.id));
                                            e > -1 ? t.meta[e].meta_value = s.value : t.meta.push({
                                                meta_key: s.id,
                                                meta_value: s.value
                                            }), console.log("------\x3e"), s.hasOwnProperty("raw") && t.meta.push({
                                                meta_key: s.id + "_raw",
                                                meta_value: s.raw
                                            }), "editor" == s.type && s.hasOwnProperty("raw") && (e = t.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? t.meta[e].meta_value = s.raw : t.meta.push({
                                                meta_key: s.id + "_raw",
                                                meta_value: s.raw
                                            }))
                                        }
                                    "post" == s.from && ("post_content" == s.id ? m({
                                        value: s.value,
                                        raw: s.raw
                                    }) : t[s.id] = s.value), n == e.fields.length - 1 && a()
                                }))
                            })).then((() => {
                                console.log(t), a(!1), c(t)
                            }))
                        }
                    } else a(!1)
                })).catch((e => {
                    a(!1), console.error("Uh oh, an error!", e), gg("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                })))
            }), [e.id]);
            const w = (e, t = null) => {
                let a = {
                        ...d
                    },
                    s = {};
                if (s = e.hasOwnProperty("field") ? e.field : e, "taxonomy" == s.type) {
                    let e = a.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? a.taxonomy.push({
                        taxonomy: s.taxonomy,
                        value: s.value
                    }) : a.taxonomy[e].value = s.value
                }
                if ("meta" == s.from)
                    if ("duration" == s.type) {
                        let e = a.meta.findIndex((e => e.meta_key == s.id));
                        e > -1 ? a.meta[e].meta_value = s.value.value : a.meta.push({
                            meta_key: s.id,
                            meta_value: s.value.value
                        });
                        let t = a.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                        t > -1 ? a.meta[t].meta_value = s.value.parameter : a.meta.push({
                            meta_key: s.id + "_parameter",
                            meta_value: s.value.parameter
                        })
                    } else {
                        let e = a.meta.findIndex((e => e.meta_key == s.id));
                        e > -1 ? a.meta[e].meta_value = s.value : a.meta.push({
                            meta_key: s.id,
                            meta_value: s.value
                        }), "editor" == s.type && s.hasOwnProperty("raw") && (e = a.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? a.meta[e].meta_value = s.raw : a.meta.push({
                            meta_key: s.id + "_raw",
                            meta_value: s.raw
                        }))
                    } if ("post" == s.from) {
                    if ("post_content" == s.id) return void m({
                        value: s.value,
                        raw: s.raw
                    });
                    a[s.id] = s.value
                }
                c(a)
            };
            return _g("div", {
                className: "add_cpt_wrapper"
            }, t ? _g(wl, null) : s ? _g(hg, null, r.map(((t, a) => _g(fm, {
                field: t,
                fieldIndex: a,
                tabIndex: e.tabIndex,
                update: w
            }))), _g("span", {
                className: "element_actions"
            }, _g("a", {
                className: p ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    if (!v(d)) {
                        e.id && (d.id = e.id);
                        let t = d.meta.findIndex((e => "vibe_type" == e.id)); - 1 == t ? d.meta.push({
                            meta_key: "vibe_type",
                            meta_value: s
                        }) : d.meta[t] = {
                            meta_key: "vibe_type",
                            meta_value: s
                        };
                        let a = d.meta.findIndex((e => "vibe_duration" == e.meta_key));
                        if (-1 == a && d.meta.push({
                                meta_key: "vibe_duration",
                                meta_value: "6"
                            }), a = d.meta.findIndex((e => "vibe_duration_parameter" == e.meta_key)), -1 == a && d.meta.push({
                                meta_key: "vibe_duration_parameter",
                                meta_value: "60"
                            }), v(d.post_title)) return gg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.please_add_title
                        }), !1;
                        _(!0), fetch(`${window.wplms_create_course_data.api_url}/createElement/unit?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...d,
                                post_content: u.value,
                                raw: u.raw,
                                token: yg("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            _(!1), t.status && e.show(t.unit), t.hasOwnProperty("message") && gg("vibebp").addNotification({
                                text: t.message
                            })
                        })).catch((e => {
                            _(!1), console.error("Uh oh, an error!", e), gg("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }
            }, window.wplms_create_course_data.translations.add_cpt.unit.add), _g("a", {
                className: "link",
                onClick: e.back
            }, window.wplms_create_course_data.translations.cancel))) : i.map((e => _g("div", {
                className: s ? "add_cpt_type active" : "add_cpt_type",
                onClick: () => {
                    n(e.id), l(i[i.findIndex((t => t.id == e.id))].fields)
                }
            }, _g("span", {
                className: e.icon
            }), e.label))))
        }, {
            createElement: kg,
            useState: xg,
            useEffect: Ng,
            Fragment: qg,
            render: Og
        } = wp.element, {
            dispatch: Ig,
            select: Cg
        } = wp.data, Sg = e => {
            const [t, a] = xg(!1), [s, n] = xg([]), [i, o] = xg({
                paged: 1,
                orderby: "date",
                order: "DESC",
                s: ""
            }), [r, l] = xg(!1), [d, c] = xg(!0), [u, m] = xg(""), [_, w] = xg(!1), [v, h] = xg(!1), [f, g] = xg([]), [y, b] = xg("activity"), [k, x] = xg(!1), [N, q] = xg(!1), O = (Cg("vibebp").getUser(), Cg("vibebp").getToken()), [I, C] = xg(null), S = () => {
                _ || (x(!1), o({
                    ...i,
                    paged: 1
                }))
            };
            Ng((() => (document.addEventListener("vibebp_component_reload", S), () => {
                document.removeEventListener("vibebp_component_reload", S)
            }))), p((() => {
                if (k) return;
                I && I.abort();
                let e = {},
                    t = new AbortController;
                I && (e = {
                    signal: t.signal
                }), C(t), a(!0);
                let o = {
                        ...i
                    },
                    d = 0;
                o && o.hasOwnProperty("s") && void 0 !== o.s && o.s.length && (delete o.s, d = 1);
                let u = `${window.wplms_course_data.api_url}/instructor/units?args=${encodeURIComponent(JSON.stringify(o))}`;
                !k && d && (u += "&nocache"), N && (u += "&force"), fetch(u, {
                    method: "POST",
                    ...e,
                    body: JSON.stringify({
                        ...i,
                        token: O
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    if (a(!1), q(!1), c(!1), e.status)
                        if (r) {
                            let t = [...s];
                            e.units.length && (e.units.map(((e, a) => {
                                t.push(e)
                            })), n(t)), t.length < e.total ? c(!0) : i.s.length || x(!0), l(!1)
                        } else n(e.units), e.units.length < e.total ? c(!0) : i.s.length || x(!0);
                    else m(e.message)
                })).catch((e => {
                    "AbortError" === e.name ? console.log("Fetch aborted") : (a(!1), console.error("Uh oh, an error!", e), Ig("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    }))
                }))
            }), 500, [i]), Ng((() => {
                a(!0), fetch(`${window.wplms_course_data.api_url}/gettabs/0?client_id=${window.wplms_course_data.client_id}`, {
                    method: "POST",
                    body: JSON.stringify({
                        token: O
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    a(!1);
                    let t = e[e.findIndex((e => "course_curriculum" == e.id))].fields,
                        s = t[t.findIndex((e => "curriculum" == e.type))].curriculum_elements;
                    g(s[s.findIndex((e => "unit" == e.type))].types)
                })).catch((e => {
                    a(!1), console.error("Uh oh, an error!", e), Ig("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            }), []);
            let P = [...s];
            if (i.s.length && (P = P.filter((e => e.title.toLowerCase().includes(i.s.toLowerCase())))), i.orderby.length && i.order) switch (i.orderby) {
                case "date":
                default:
                    "DESC" == i.order ? P.sort((function(e, t) {
                        return new Date(t.created_time).getTime() - new Date(e.created_time).getTime()
                    })) : P.sort((function(e, t) {
                        return new Date(e.created_time).getTime() - new Date(t.created_time).getTime()
                    }));
                    break;
                case "title":
                    "DESC" == i.order ? P.sort((function(e, t) {
                        return t.title.localeCompare(e.title)
                    })) : P.sort((function(e, t) {
                        return e.title.localeCompare(t.title)
                    }));
                    break;
                case "comment_count":
                    "DESC" == i.order ? P.sort((function(e, t) {
                        return t.attempts - e.attempts
                    })) : P.sort((function(e, t) {
                        return e.attempts - t.attempts
                    }))
            }
            let E = {};
            return P.length && P[P.findIndex((e => e.id === _))], kg("div", {
                className: "wplms_manage_quizzes_wrapper"
            }, v ? kg(qg, null, kg("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => {
                    h(!1), w(!1)
                }
            }), kg(bg, {
                back: () => h(!1),
                show: e => {
                    if (h(!1), !_) {
                        q(!0);
                        let e = {
                            ...i
                        };
                        e.paged = 1, o(e)
                    }
                },
                types: f,
                id: _,
                type: s.findIndex((e => e.id == _)) > -1 ? s[s.findIndex((e => e.id == _))].type : 0
            })) : _ ? kg("div", {
                className: "course_manage quiz_wrapper"
            }, kg("div", {
                className: "quiz_header"
            }, kg("span", {
                className: "header_links"
            }, kg("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => {
                    h(!1), w(!1)
                }
            }), kg("span", null, s[s.findIndex((e => e.id == _))].link ? kg("span", null, kg("a", {
                href: s[s.findIndex((e => e.id == _))].link,
                target: "_blank",
                className: "vicon vicon-link"
            })) : "", kg("span", {
                className: "vicon vicon-pencil",
                onClick: () => {
                    h(_)
                }
            }), kg("span", {
                className: "vicon vicon-trash",
                onClick: () => {
                    window.confirm(window.wplms_course_data.translations.confirm_delete_unit) && (a(!0), fetch(`${window.wplms_course_data.api_url}/instructor/deleteUnit?post`, {
                        method: "POST",
                        body: JSON.stringify({
                            unit_id: _,
                            token: O
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (a(!1), e.status) {
                            h(!1), w(!1);
                            let e = [...s];
                            e.splice(e.findIndex((e => e.id == _)), 1), n(e)
                        }
                        e.hasOwnProperty("message") && Ig("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), Ig("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })))
                }
            }))), kg("h2", {
                dangerouslySetInnerHTML: {
                    __html: s[s.findIndex((e => e.id == _))].title
                }
            }), kg("div", {
                className: "quiz_info"
            }, kg("div", null, kg("span", null, kg("span", {
                className: "vicon vicon-calendar"
            }), " ", s[s.findIndex((e => e.id == _))].created), kg("div", {
                className: "wplms_quiz-type"
            }, s[s.findIndex((e => e.id == _))]["module-tag"].length ? s[s.findIndex((e => e.id == _))]["module-tag"].map((e => kg("span", null, e))) : "")), kg("div", null, kg("span", null, kg("span", {
                className: "vicon vicon-user"
            }), " ", s[s.findIndex((e => e.id == _))].attempts), kg("span", null, kg("span", {
                className: "vicon vicon-timer"
            }), " ", kg(Ot, {
                timestamp: s[s.findIndex((e => e.id == _))].timer
            }))))), kg("div", {
                className: "course_tabs"
            }, kg("div", {
                className: "instructor_tabs"
            }, kg("span", {
                className: "activity" == y ? "active" : "",
                onClick: () => b("activity")
            }, window.wplms_course_data.translations.activity), kg("span", {
                className: "view" == y ? "active" : "",
                onClick: () => b("view")
            }, window.wplms_course_data.translations.view))), kg("div", {
                className: "course_tab_content"
            }, "stats" == y ? {} : "activity" == y ? kg(Yf, {
                id: _,
                cpt: "unit"
            }) : kg(pg, {
                unitid: _,
                update: () => {
                    console.log("#")
                }
            }))) : kg(qg, null, kg("div", {
                className: "mycourses_header vibebp_form"
            }, kg("div", null, kg("div", {
                className: "searchbox active"
            }, kg("span", {
                className: "vicon vicon-search"
            }), kg("input", {
                type: "text",
                placeholder: window.vibebp.translations.search_text,
                value: i.s,
                onChange: e => {
                    o({
                        ...i,
                        s: e.target.value
                    })
                }
            }))), kg("div", null, kg("select", {
                value: i.orderby,
                onChange: e => {
                    o({
                        ...i,
                        orderby: e.target.value
                    })
                }
            }, kg("option", null, window.vibebp.translations.select_option), Object.keys(window.wplms_course_data.orderby).map((e => kg("option", {
                value: e
            }, window.wplms_course_data.orderby[e])))), kg("span", null, kg("span", {
                className: "ASC" == i.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                onClick: () => {
                    o({
                        ...i,
                        order: "ASC"
                    })
                }
            }), kg("span", {
                className: "DESC" == i.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                onClick: () => {
                    o({
                        ...i,
                        order: "DESC"
                    })
                }
            })))), kg("div", {
                className: "vibebp_quizzes"
            }, kg("div", {
                class: "new_quiz",
                onClick: () => h(!0)
            }, kg("i", {
                class: "vicon vicon-plus"
            })), t && !r ? kg(wl, null) : "", P.length ? P.map((e => kg("div", {
                className: "wplms_quiz",
                onClick: () => w(e.id)
            }, kg("div", null, kg("h3", null, kg("span", {
                className: e.icon
            }), " ", kg("strong", {
                dangerouslySetInnerHTML: {
                    __html: e.title
                }
            })), kg("span", null, e.created), kg("div", {
                className: "wplms_module-tag"
            }, e["module-tag"].length ? e["module-tag"].map((e => kg("span", null, e))) : "")), kg("div", {
                className: "quiz_meta"
            }, kg("span", null, kg("span", {
                className: "vicon vicon-user"
            }), " ", e.attempts), kg("span", null, kg("span", {
                className: "vicon vicon-time"
            }), " ", e.timer))))) : kg("div", {
                className: "vbp_message"
            }, window.wplms_course_data.translations.no_units), !t && d ? kg("a", {
                className: "link",
                onClick: () => {
                    l(!0), o({
                        ...i,
                        paged: i.paged + 1
                    })
                }
            }, window.wplms_course_data.translations.load_more) : t && r ? kg(wl, null) : "")))
        }, {
            createElement: Pg,
            useState: Eg,
            useEffect: zg,
            Fragment: Tg,
            render: Lg,
            useRef: Mg
        } = wp.element, $g = ({
            children: e,
            onClose: t,
            open: a
        }) => a ? ReactDOM.createPortal(Pg("div", {
            className: "vibe_editor_modal react_portal_modal"
        }, Pg("span", {
            onClick: t
        }), Pg("div", {
            className: "ve_modal-content"
        }, Pg("div", {
            className: "ve_modal-header"
        }, Pg("div", null), Pg("span", {
            className: "vicon vicon-close",
            onClick: t
        })), Pg("div", {
            className: "ve_modal-body"
        }, e))), document.body) : null, {
            createElement: jg,
            useState: Ag,
            useEffect: Dg,
            Fragment: Hg,
            render: Ug,
            useRef: Fg
        } = wp.element, {
            dispatch: Jg,
            select: Rg
        } = wp.data, Bg = {
            ID: "",
            post_title: "",
            post_content: "",
            taxonomy: [{
                taxonomy: "question-tag",
                value: []
            }],
            meta: [{
                meta_key: "vibe_question_type",
                meta_value: ""
            }]
        }, Vg = e => {
            var t = Fg();
            const a = Fg(null),
                [s, n] = Ag(!1),
                [i, o] = Ag(!1),
                [r, l] = Ag(""),
                [d, c] = Ag(!1),
                [u, m] = Ag(!1),
                [_, w] = Ag([]),
                [v, h] = Ag({
                    paged: 1,
                    orderby: "date",
                    order: "DESC",
                    s: ""
                }),
                [f, g] = Ag([]),
                [y, b] = Ag(!1),
                [k, x] = Ag(!1),
                [N, q] = Ag(""),
                [O, I] = Ag(null),
                C = (Rg("vibebp").getUser(), Rg("vibebp").getToken()),
                [S, P] = Ag(!1),
                [E, z] = Ag(!1),
                [T, L] = Ag(!1),
                [M, $] = Ag({
                    post_content: "",
                    raw: []
                }),
                [j, A] = Ag({
                    meta_key: "vibe_question_explaination",
                    meta_value: "",
                    raw: []
                }),
                [D, H] = Ag(Bg),
                [U, F] = Ag({}),
                [J, R] = Ag({}),
                [B, V] = Ag(!1),
                [X, W] = Ag(!1),
                [Y, Q] = Ag(!1),
                [K, G] = Ag(null),
                [Z, ee] = Ag(!1),
                [te, ae] = Ag(!1),
                se = () => {
                    Q(!1), h({
                        ...v,
                        paged: 1
                    })
                };
            Dg((() => (document.addEventListener("vibebp_component_reload", se), () => {
                document.removeEventListener("vibebp_component_reload", se)
            }))), p((() => {
                if (Y) return;
                ne(), K && K.abort();
                let e = {},
                    t = new AbortController;
                K && (e = {
                    signal: t.signal
                }), G(t), c(!0);
                let a = `${window.wplms_course_data.api_url}/instructor/questions?force`,
                    s = {
                        ...v
                    },
                    n = 0;
                s && s.hasOwnProperty("s") && void 0 !== s.s && s.s.length && (delete s.s, n = 1), a += `?args=${encodeURIComponent(JSON.stringify(s))}`, !Y && n && (a += "&nocache"), fetch(a, {
                    method: "POST",
                    ...e,
                    body: JSON.stringify({
                        ...v,
                        token: C
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    if (c(!1), e.status)
                        if (y) {
                            let t = _.concat(e.questions);
                            w(t), b(!1), t.length < e.total ? x(!0) : (x(!1), v.s.length || Q(!0))
                        } else w(e.questions), e.questions.length < e.total ? x(!0) : (x(!1), v.s.length || Q(!0));
                    else q(e.message);
                    m(e.columns)
                })).catch((e => {
                    "AbortError" === e.name ? console.log("Fetch aborted") : (c(!1), console.error("Uh oh, an error!", e), Jg("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    }))
                }))
            }), 500, [v]), Dg((() => {
                c(!0), fetch(`${window.wplms_course_data.api_url}/gettabs/0?client_id=${window.wplms_course_data.client_id}?force`, {
                    method: "POST",
                    body: JSON.stringify({
                        token: C
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    c(!1);
                    let t = e[e.findIndex((e => "course_curriculum" == e.id))].fields,
                        a = t[t.findIndex((e => "curriculum" == e.type))].curriculum_elements,
                        s = a[a.findIndex((e => "quiz" == e.type))].types[0];
                    g(s.fields[s.fields.findIndex((e => "quiz_questions" == e.type))].buttons.question_types)
                })).catch((e => {
                    c(!1), console.error("Uh oh, an error!", e), Jg("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            }), []);
            const ne = () => {
                    let e = [..._];
                    if (v.s.length && (e = e.filter((e => e.title.toLowerCase().includes(v.s.toLowerCase())))), "function" == typeof Tabulator && u && u.length) {
                        e && Array.isArray(e) || (e = []);
                        let n = [...u];
                        if (n && u.length)
                            for (var a = n.length - 1; a >= 0; a--) - 1 !== ["edit", "delete", "feedback_count"].indexOf(n[a].field) && (n[a].cellClick = oe, n[a].download = !1, n[a].sorter = !1);
                        var s = new Tabulator(t.current, {});
                        s = new Tabulator(t.current, {
                            data: e,
                            layout: "fitDataStretch",
                            layoutColumnsOnNewData: !0,
                            columns: n
                        }), I(s)
                    }
                },
                ie = (e, t) => {
                    if (console.log(e, t), "fieldvaluechanged" == t) {
                        let t = [...J];
                        t[t.findIndex((t => t.id == e.field.id))] = e.field, R(t)
                    }
                },
                oe = (e, t) => {
                    if (t.hasOwnProperty("_cell")) {
                        let e = t._cell.column.field,
                            i = t._cell.row.data.id,
                            o = re(_, i);
                        o >= 0 && ("edit" == e ? (t._cell.row.data.raw_type && f.findIndex((e => e.value == t._cell.row.data.raw_type)) > -1 && (R(f[f.findIndex((e => e.value == t._cell.row.data.raw_type))].fields), a = i, s = t._cell.row.data.raw_type, n = f[f.findIndex((e => e.value == t._cell.row.data.raw_type))].fields, fetch(`${window.wplms_create_course_data.api_url}/curriculum/getElementFields/?force`, {
                            method: "post",
                            body: JSON.stringify({
                                type: s,
                                id: a,
                                fields: n,
                                token: C
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            e.status && (R(e.fields), z("edit"))
                        })).catch((e => {
                            console.error("Uh oh, an error!", e), Jg("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))), F({
                            action: e,
                            id: i,
                            index: o,
                            type: t._cell.row.data.raw_type
                        })) : "delete" == e ? (z("delete"), F({
                            action: e,
                            id: i,
                            index: o,
                            type: t._cell.row.data.raw_type
                        })) : "feedback_count" == e && ee(i))
                    }
                    var a, s, n
                },
                re = (e, t) => {
                    if (e.length)
                        for (var a = e.length - 1; a >= 0; a--)
                            if (e[a].id == t) return a;
                    return -1
                };
            Dg((() => {
                if (!d && u && u.length && "function" == typeof Tabulator && t) {
                    let s = [..._];
                    s && s.length && Array.isArray(s) || (s = []);
                    let n = [...u];
                    if (n && u.length)
                        for (var e = n.length - 1; e >= 0; e--) - 1 !== ["edit", "delete", "feedback_count"].indexOf(n[e].field) && (n[e].cellClick = oe, n[e].download = !1, n[e].sorter = !1);
                    var a = new Tabulator(t.current, {});
                    a = new Tabulator(t.current, {
                        data: s,
                        layout: "fitDataStretch",
                        layoutColumnsOnNewData: !0,
                        columns: n
                    }), I(a)
                }
            }), [_, u, d, t]);
            const le = async (e, t, a = null) => {
                let s = e.field,
                    n = {
                        ...D
                    };
                if ("taxonomy" == s.type) {
                    let e = n.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? n.taxonomy.push({
                        taxonomy: s.taxonomy,
                        value: s.value
                    }) : n.taxonomy[e].value = s.value
                } else {
                    if ("post_content" == s.id && s.value.length) return void $({
                        post_content: s.value,
                        raw: s.raw
                    });
                    if ("vibe_question_explaination" == s.id && s.value.length) return void A({
                        meta_key: "vibe_question_explaination",
                        meta_value: s.value,
                        raw: s.raw
                    });
                    if ("post" == s.from && (n[s.id] = s.value), "meta" == s.from)
                        if ("duration" == s.type) {
                            let e = n.meta.findIndex((e => e.meta_key == s.id));
                            e > -1 ? n.meta[e].meta_value = s.value.value : n.meta.push({
                                meta_key: s.id,
                                meta_value: s.value.value
                            });
                            let t = n.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                            t > -1 ? n.meta[t].meta_value = s.value.parameter : n.meta.push({
                                meta_key: s.id,
                                meta_value: s.value.parameter
                            })
                        } else {
                            let e = n.meta.findIndex((e => e.meta_key == s.id));
                            if (e > -1 ? n.meta[e].meta_value = s.value : n.meta.push({
                                    meta_key: s.id,
                                    meta_value: s.value
                                }), s.hasOwnProperty("raw")) {
                                let e = await sessionStorage.getItem("questionOptions_" + s.id);
                                e = JSON.parse(e), sessionStorage.removeItem("questionOptions_" + s.id), e ? n.meta.push({
                                    meta_key: s.id + "_raw",
                                    meta_value: e
                                }) : n.meta.push({
                                    meta_key: s.id + "_raw",
                                    meta_value: s.raw
                                })
                            }
                            "editor" == s.type && s.hasOwnProperty("raw") && (e = n.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? n.meta[e].meta_value = s.raw : n.meta.push({
                                meta_key: s.id + "_raw",
                                meta_value: s.raw
                            }))
                        }
                }
                H(n)
            }, de = () => {
                ae(!0), fetch(`${window.wplms_course_data.api_url}/instructor/markresolved?post`, {
                    method: "post",
                    body: JSON.stringify({
                        token: Rg("vibebp").getToken(),
                        question: Z
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    if (ae(!1), e.status) {
                        let e = [..._],
                            t = e.findIndex((e => e.id === Z));
                        t > -1 && (e[t].feedback_data = {}, e[t].feedback_count = 0, w(e), ee(!1))
                    }
                    e.hasOwnProperty("message") && Jg("vibebp").addNotification({
                        text: e.message
                    })
                })).catch((e => {
                    ae(!1), console.error("Uh oh, an error!", e), Jg("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            };
            return jg("div", {
                className: "wplms_manage_question_wrapper"
            }, E ? jg("div", {
                className: "question_pop_wrapper"
            }, jg("span", {
                onClick: () => z(!1)
            }), jg("div", {
                className: "question_pop"
            }, "create" == E ? jg("div", {
                className: "question_wrapper"
            }, D.meta.findIndex((e => "vibe_question_type" == e.meta_key)) > -1 ? jg("div", {
                className: "question_type_wrapper"
            }, f.map(((e, t) => jg("div", {
                className: e.value == D.meta[D.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value ? "question_type active" : "question_type",
                onClick: () => {
                    let t = {
                            ...D
                        },
                        a = t.meta.findIndex((e => "vibe_question_type" == e.meta_key));
                    t.meta[a].meta_value = e.value, H(t)
                }
            }, jg("span", null, e.value == D.meta[D.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value ? oa(e.value, "#00A1FF", "#fff") : oa(e.value, "#fff", "#222")), jg("span", null, e.label))))) : "", D.meta[D.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value.length ? jg(Hg, null, f[f.findIndex((e => e.value == D.meta[D.meta.findIndex((e => "vibe_question_type" == e.meta_key))].meta_value))].fields.map(((e, t) => jg(fm, {
                field: e,
                fieldIndex: t,
                update: le,
                tabIndex: 0
            }))), jg("div", {
                className: "question_actions"
            }, jg("a", {
                onClick: () => {
                    if (D.post_title.length) {
                        L(!0);
                        let e = {
                            ...D
                        };
                        j.meta_value.length && (e.meta.push({
                            meta_key: j.meta_key,
                            meta_value: j.meta_value
                        }), e.meta.push({
                            meta_key: j.meta_key + "_raw",
                            meta_value: j.raw
                        })), e.hasOwnProperty("taxonomy") && e.taxonomy.length && e.taxonomy.map((e => {
                            e.hasOwnProperty("taxonomy") && sessionStorage.removeItem(e.taxonomy)
                        })), fetch(`${window.wplms_create_course_data.api_url}/createElement/question?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...e,
                                ...M,
                                token: Rg("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            if (L(!1), e.status) {
                                let t = [..._];
                                t.push({
                                    id: e.data.id,
                                    title: e.data.text,
                                    type: e.data.type,
                                    correct_count: 0,
                                    total: 0,
                                    feedback_count: 0,
                                    tags: []
                                }), H(Bg), w(t), z(!1), O && O.replaceData(t)
                            }
                            json.hasOwnProperty("message") && Jg("vibebp").addNotification({
                                text: json.message
                            })
                        })).catch((e => {
                            L(!1), console.error("Uh oh, an error!", e), Jg("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    } else Jg("vibebp").addNotification({
                        text: window.wplms_create_course_data.translations.missing_data
                    })
                },
                className: T ? "button is-primary is-loading" : "button is-primary"
            }, jg("i", {
                class: "vicon vicon-plus"
            }), window.wplms_create_course_data.translations.add_cpt.question.create), jg("a", {
                className: "link",
                onClick: () => {
                    z(!1), H(Bg)
                }
            }, window.wplms_create_course_data.translations.cancel))) : "") : "edit" == E ? jg("div", {
                className: "edit_question"
            }, jg("div", {
                className: "question_wrapper"
            }, jg("div", {
                className: "list-group"
            }, J.map(((e, t) => jg("div", {
                className: "list-group-item"
            }, jg(fm, {
                field: e,
                fieldIndex: t,
                tabIndex: 0,
                update: ie
            }))))), jg("div", {
                className: "question_actions"
            }, jg("a", {
                className: B ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    V(!0);
                    let e = {
                        post_title: "",
                        post_content: "",
                        meta: [],
                        taxonomy: []
                    };
                    J.map((t => {
                        if ("post" == t.from)
                            if ("post_content" == t.id) {
                                if (e[t.id] = t.value, t.hasOwnProperty("raw") && t.raw) {
                                    let a = e.meta.findIndex((e => "raw" == e.meta_key));
                                    a > -1 ? e.meta[a].meta_value = t.raw : e.meta.push({
                                        meta_key: "raw",
                                        meta_value: t.raw
                                    })
                                }
                            } else e[t.id] = t.value;
                        if ("meta" == t.from) {
                            let a = e.meta.findIndex((e => e.meta_key == t.id));
                            if (a > -1 ? e.meta[a].meta_value = t.value : e.meta.push({
                                    meta_key: t.id,
                                    meta_value: t.value
                                }), console.log("------\x3e"), t.hasOwnProperty("raw") && e.meta.push({
                                    meta_key: t.id + "_raw",
                                    meta_value: t.raw
                                }), "editor" == t.type && t.hasOwnProperty("raw")) {
                                let a = e.meta.findIndex((e => e.meta_key == t.id + "_raw"));
                                a > -1 ? e.meta[a].meta_value = t.raw : e.meta.push({
                                    meta_key: t.id + "_raw",
                                    meta_value: t.raw
                                })
                            }
                        }
                        if ("taxonomy" == t.from) {
                            let a = e.taxonomy.findIndex((e => e.taxonomy == t.id));
                            a > -1 ? e.taxonomy[a].value = t.value : e.taxonomy.push({
                                taxonomy: t.id,
                                value: t.value
                            }), sessionStorage.removeItem(t.taxonomy)
                        }
                    })), fetch(`${window.wplms_create_course_data.api_url}/createElement/question?post`, {
                        method: "post",
                        body: JSON.stringify({
                            type: U.type,
                            id: U.id,
                            ...e,
                            token: Rg("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        if (V(!1), t.status) {
                            let t = [..._];
                            t[U.index].title = e.post_title, w(t)
                        }
                        t.hasOwnProperty("message") && Jg("vibebp").addNotification({
                            text: t.message
                        })
                    })).catch((e => {
                        V(!1), console.error("Uh oh, an error!", e), Jg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, window.wplms_create_course_data.translations.save), jg("a", {
                className: "link",
                onClick: () => {
                    z(!1)
                }
            }, window.wplms_create_course_data.translations.cancel)))) : "delete" == E ? jg("div", {
                className: "edit_question"
            }, jg("div", {
                className: "question_wrapper"
            }, window.wplms_course_data.translations.sure_delete, jg("div", {
                className: "question_actions"
            }, jg("a", {
                className: B ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    V(!0), fetch(`${window.wplms_create_course_data.api_url}/deleteElement/${U.id}?post`, {
                        method: "post",
                        body: JSON.stringify({
                            token: Rg("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (V(!1), e.status) {
                            Jg("vibebp").addNotification({
                                text: e.text
                            });
                            let t = [..._];
                            t.splice(U.index, 1), w(t), z(!1)
                        }
                    })).catch((e => {
                        V(!1), console.error("Uh oh, an error!", e), Jg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, window.wplms_course_data.translations.delete), jg("a", {
                className: "link",
                onClick: () => {
                    z(!1)
                }
            }, window.wplms_course_data.translations.cancel)))) : "download" == E ? jg("div", {
                className: "import_questions"
            }, jg("h3", null, window.wplms_course_data.translations.select_questions_download), jg("br", null), jg("select", {
                value: S,
                onChange: e => P(e.target.value)
            }, jg("option", null, window.wplms_course_data.translations.select_questions_filetype), window.wplms_course_data.sample_questions.map((e => jg("option", {
                value: e.value
            }, e.label)))), S ? jg("a", {
                href: S,
                _target: "_blank",
                className: "button is-primary"
            }, window.wplms_course_data.translations.download_questions, " ", jg("span", {
                className: "vicon vicon-arriw-right"
            })) : "") : "import" == E ? jg("div", {
                className: "import_questions"
            }, jg("h3", null, window.wplms_course_data.translations.import_questions), jg("select", {
                value: S,
                onChange: e => P(e.target.value)
            }, jg("option", null, window.wplms_course_data.translations.select_questions_filetype), window.wplms_course_data.sample_questions.map((e => jg("option", {
                value: e.value
            }, e.label)))), jg("input", {
                type: "file",
                id: "import_questions",
                ref: a,
                type: "file",
                onChange: e => {
                    a.current.files[0].size < window.vibebp.settings.upload_limit ? (l(a.current.files[0]), n(!0)) : Jg("vibebp").addNotification({
                        text: window.vibebp.translations.image_size_error
                    })
                }
            }), jg("label", {
                for: "import_questions"
            }, window.wplms_course_data.translations.upload_file), s ? jg("span", null, jg("a", {
                className: i ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    o(!0);
                    let e = {
                        token: Rg("vibebp").getToken(),
                        questionType: S
                    };
                    var t = new FormData;
                    t.append("body", JSON.stringify(e)), t.append("file", r), fetch(`${window.wplms_course_data.api_url}/instructor/import_questions?post&upload`, {
                        method: "post",
                        body: t
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        o(!1), e.status && (h({
                            ...Bg
                        }), z(!1), H(Bg)), e.hasOwnProperty("message") && Jg("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        o(!1), console.error("Uh oh, an error!", e), Jg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, window.wplms_course_data.translations.upload_file), jg("span", {
                className: "link",
                onClick: () => {
                    l("")
                }
            }, window.wplms_course_data.translations.cancel)) : "") : "")) : "", jg(Hg, null, jg("div", {
                className: "mycourses_header vibebp_form"
            }, jg("div", null, jg("div", {
                className: "vibebp_form_field"
            }, jg("input", {
                type: "text",
                placeholder: window.vibebp.translations.search_text,
                value: v.s,
                onChange: e => {
                    h({
                        ...v,
                        s: e.target.value,
                        paged: 1
                    })
                }
            }), jg("span", {
                className: "vicon vicon-search"
            }))), jg("select", {
                value: v.orderby,
                onChange: e => {
                    h({
                        ...v,
                        orderby: e.target.value,
                        paged: 1
                    })
                }
            }, jg("option", null, window.vibebp.translations.select_option), Object.keys(window.wplms_course_data.orderby).map((e => jg("option", {
                value: e
            }, window.wplms_course_data.orderby[e]))))), jg("div", {
                className: "vibebp_questions"
            }, jg("div", {
                class: "buttons has-addons"
            }, jg("a", {
                class: "button is-primary",
                onClick: () => z("create")
            }, jg("span", {
                className: "vicon vicon-plus"
            }), window.wplms_course_data.translations.add_question), jg("a", {
                class: "button is-primary",
                onClick: () => {
                    O && O.download("csv", "questions.csv", {
                        delimiter: ","
                    })
                }
            }, jg("span", {
                className: "vicon vicon-cloud-down"
            }), window.wplms_course_data.translations.export_questions), jg("a", {
                class: "button is-primary",
                onClick: () => z("import")
            }, jg("span", {
                className: "vicon vicon-cloud-up"
            }), window.wplms_course_data.translations.import_questions), jg("a", {
                onClick: () => z("download"),
                class: "button is-primary"
            }, jg("span", {
                className: "vicon vicon-download"
            }), window.wplms_course_data.translations.download_sample)), jg("div", {
                ref: t
            }), _ && _.length ? jg(Hg, null, d ? jg(wl, null) : k ? jg("a", {
                className: "link",
                onClick: () => {
                    b(!0), x(!1), h({
                        ...v,
                        paged: parseInt(v.paged) + 1
                    })
                }
            }, window.wplms_course_data.translations.load_more) : "") : jg("div", {
                className: "vbp_message"
            }, N))), jg($g, {
                open: Z,
                onClose: () => ee(!1)
            }, (() => {
                if (Z && _.length) {
                    let e = _.findIndex((e => e.id === Z));
                    return e > -1 && _[e].hasOwnProperty("feedback_data") && Object.keys(_[e].feedback_data).length ? jg("div", {
                        className: "vibe_feedbacks_wrap"
                    }, jg("div", {
                        className: "heading_wrap"
                    }, jg("strong", null, _[e].title), jg("a", {
                        className: te ? "button is-primary is-loading" : "button is-primary",
                        onClick: de
                    }, window.wplms_course_data.translations.mark_resolved)), jg(Al, {
                        type: "member",
                        user_ids: Object.keys(_[e].feedback_data)
                    }, Object.keys(_[e].feedback_data).map(((t, a) => jg("div", {
                        className: "feedback"
                    }, jg(jl, {
                        type: "member",
                        id: {
                            user_id: t
                        }
                    }), jg("div", {
                        dangerouslySetInnerHTML: {
                            __html: _[e].feedback_data[t]
                        }
                    })))))) : jg("div", {
                        className: "vibe_feedbacks_wrap"
                    }, jg("span", {
                        className: "vbp_message"
                    }, window.wplms_course_data.translations.no_feedbacks))
                }
            })()))
        }, {
            createElement: Xg,
            useState: Wg,
            useEffect: Yg,
            Fragment: Qg,
            render: Kg
        } = wp.element, {
            dispatch: Gg,
            select: Zg
        } = wp.data, ey = e => {
            const [t, a] = Wg(!1), [s, n] = Wg(0), [i, o] = Wg(e.types), [r, l] = Wg([]), [d, c] = Wg({
                post_title: "",
                post_content: "",
                type: "",
                taxonomy: [],
                meta: []
            }), [u, m] = Wg({
                post_content: "",
                raw: []
            }), [p, _] = Wg(!1);
            Yg((() => {
                e.hasOwnProperty("type") && n(e.type)
            }), []), Yg((() => {
                e.id && e.type && (a(!0), fetch(`${window.wplms_create_course_data.api_url}/curriculum/getElementFields?force`, {
                    method: "post",
                    body: JSON.stringify({
                        type: s,
                        id: e.id,
                        fields: i[i.findIndex((t => t.id == e.type))].fields,
                        token: Zg("vibebp").getToken()
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    if (e.status) {
                        if (Array.isArray(e.fields)) {
                            l(e.fields);
                            let t = {
                                post_title: "",
                                post_content: "",
                                type: "",
                                taxonomy: [],
                                meta: []
                            };
                            new Promise((a => {
                                e.fields.map(((s, n) => {
                                    if ("taxonomy" == s.type) {
                                        let e = t.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? t.taxonomy.push({
                                            taxonomy: s.taxonomy,
                                            value: s.value
                                        }) : t.taxonomy[e].value = s.value
                                    }
                                    if ("meta" == s.from)
                                        if (v(s.value) && !v(s.default) && (s.value = s.default), "duration" == s.type) {
                                            let e = t.meta.findIndex((e => e.meta_key == s.id));
                                            e > -1 ? t.meta[e].meta_value = s.value.value : t.meta.push({
                                                meta_key: s.id,
                                                meta_value: s.value.value
                                            });
                                            let a = t.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                                            a > -1 ? t.meta[a].meta_value = s.value.parameter : t.meta.push({
                                                meta_key: s.id + "_parameter",
                                                meta_value: s.value.parameter
                                            })
                                        } else {
                                            let e = t.meta.findIndex((e => e.meta_key == s.id));
                                            e > -1 ? t.meta[e].meta_value = s.value : t.meta.push({
                                                meta_key: s.id,
                                                meta_value: s.value
                                            }), "editor" == s.type && s.hasOwnProperty("raw") && (e = t.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? t.meta[e].meta_value = s.raw : t.meta.push({
                                                meta_key: s.id + "_raw",
                                                meta_value: s.raw
                                            }))
                                        }
                                    "post" == s.from && ("post_content" == s.id ? m({
                                        value: s.value,
                                        raw: s.raw
                                    }) : t[s.id] = s.value), n == e.fields.length - 1 && a()
                                }))
                            })).then((() => {
                                console.log(t), a(!1), c(t)
                            }))
                        }
                    } else a(!1)
                })).catch((e => {
                    a(!1), console.error("Uh oh, an error!", e), Gg("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                })))
            }), [e.id]);
            const w = (e, t = null) => {
                let a = {
                        ...d
                    },
                    s = {};
                if (s = e.hasOwnProperty("field") ? e.field : e, "taxonomy" == s.type) {
                    let e = a.taxonomy.findIndex((e => e.taxonomy == s.taxonomy)); - 1 == e ? a.taxonomy.push({
                        taxonomy: s.taxonomy,
                        value: s.value
                    }) : a.taxonomy[e].value = s.value
                }
                if ("meta" == s.from)
                    if ("duration" == s.type) {
                        let e = a.meta.findIndex((e => e.meta_key == s.id));
                        e > -1 ? a.meta[e].meta_value = s.value.value : a.meta.push({
                            meta_key: s.id,
                            meta_value: s.value.value
                        });
                        let t = a.meta.findIndex((e => e.meta_key == s.id + "_parameter"));
                        t > -1 ? a.meta[t].meta_value = s.value.parameter : a.meta.push({
                            meta_key: s.id + "_parameter",
                            meta_value: s.value.parameter
                        })
                    } else {
                        let e = a.meta.findIndex((e => e.meta_key == s.id));
                        e > -1 ? a.meta[e].meta_value = s.value : a.meta.push({
                            meta_key: s.id,
                            meta_value: s.value
                        }), "editor" == s.type && s.hasOwnProperty("raw") && (e = a.meta.findIndex((e => e.meta_key == s.id + "_raw")), e > -1 ? a.meta[e].meta_value = s.raw : a.meta.push({
                            meta_key: s.id + "_raw",
                            meta_value: s.raw
                        }))
                    } if ("post" == s.from) {
                    if ("post_content" == s.id) return void m({
                        value: s.value,
                        raw: s.raw
                    });
                    a[s.id] = s.value
                }
                console.log(a), c(a)
            };
            return Xg("div", {
                className: "add_cpt_wrapper"
            }, t ? Xg(wl, null) : s ? Xg(Qg, null, r.map(((t, a) => Xg(fm, {
                field: t,
                fieldIndex: a,
                tabIndex: e.tabIndex,
                update: w
            }))), Xg("span", {
                className: "element_actions"
            }, Xg("a", {
                className: p ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    if (!v(d)) {
                        e.id && (d.id = e.id);
                        let t = d.meta.findIndex((e => "vibe_type" == e.id));
                        if (-1 == t ? d.meta.push({
                                meta_key: "vibe_type",
                                meta_value: s
                            }) : d.meta[t] = {
                                meta_key: "vibe_type",
                                meta_value: s
                            }, v(d.post_title)) return Gg("vibebp").addNotification({
                            text: window.wplms_course_data.translations.please_add_title
                        }), !1;
                        _(!0), fetch(`${window.wplms_create_course_data.api_url}/createElement/assignment?post`, {
                            method: "post",
                            body: JSON.stringify({
                                ...d,
                                post_content: u.value,
                                raw: u.raw,
                                token: Zg("vibebp").getToken()
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            _(!1), t.status ? (a(!0), fetch(`${window.wplms_course_data.api_url}/instructor/assignment?force`, {
                                method: "post",
                                body: JSON.stringify({
                                    assignment_id: t.data.id,
                                    token: Zg("vibebp").getToken()
                                })
                            }).then((e => e.json())).then((t => {
                                a(!1), t.status ? e.show(t.assignment) : t.hasOwnProperty("message") && Gg("vibebp").addNotification({
                                    text: t.message
                                })
                            }))) : t.hasOwnProperty("message") && Gg("vibebp").addNotification({
                                text: t.message
                            })
                        })).catch((e => {
                            _(!1), console.error("Uh oh, an error!", e), Gg("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                }
            }, window.wplms_create_course_data.translations.add_cpt.assignment.add), Xg("a", {
                className: "link",
                onClick: e.back
            }, window.wplms_create_course_data.translations.cancel))) : i.map((e => Xg("div", {
                className: s ? "add_cpt_type active" : "add_cpt_type",
                onClick: () => {
                    n(e.id), l(i[i.findIndex((t => t.id == e.id))].fields)
                }
            }, Xg("span", {
                className: e.icon
            }), e.label))))
        }, {
            createElement: ty,
            useState: ay,
            useEffect: sy,
            Fragment: ny,
            render: iy
        } = wp.element, {
            dispatch: oy,
            select: ry
        } = wp.data, ly = e => {
            const [t, a] = ay(!1), [s, n] = ay([]), [i, o] = ay({
                paged: 1,
                orderby: "date",
                order: "DESC",
                s: ""
            }), [r, l] = ay(!1), [d, c] = ay(!0), [u, m] = ay(""), [_, w] = ay(!1), [v, h] = ay(!1), [f, g] = ay([]), [y, b] = ay("stats"), [k, x] = ay(!1), N = (ry("vibebp").getUser(), ry("vibebp").getToken()), [q, O] = ay(null), I = () => {
                _ || (x(!1), o({
                    ...i,
                    paged: 1
                }))
            };
            sy((() => (document.addEventListener("vibebp_component_reload", I), () => {
                document.removeEventListener("vibebp_component_reload", I)
            }))), p((() => {
                if (k) return;
                q && q.abort();
                let e = {},
                    t = new AbortController;
                q && (e = {
                    signal: t.signal
                }), O(t), a(!0);
                let o = {
                        ...i
                    },
                    d = 0;
                o && o.hasOwnProperty("s") && void 0 !== o.s && o.s.length && (delete o.s, d = 1);
                let u = `${window.wplms_course_data.api_url}/instructor/assignments?args=${encodeURIComponent(JSON.stringify(o))}`;
                !k && d && (u += "&nocache"), fetch(u, {
                    method: "POST",
                    ...e,
                    body: JSON.stringify({
                        ...i,
                        token: N
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    if (a(!1), c(!1), e.status)
                        if (r) {
                            let t = [...s];
                            e.assignments.length && (e.assignments.map(((e, a) => {
                                t.push(e)
                            })), n(t)), t.length < e.total ? c(!0) : i.s.length || x(!0), l(!1)
                        } else n(e.assignments), e.assignments.length < e.total ? c(!0) : i.s.length || x(!0);
                    else m(e.message)
                })).catch((e => {
                    "AbortError" === e.name ? a(!0) : (a(!1), console.error("Uh oh, an error!", e), oy("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    }))
                }))
            }), 500, [i]), sy((() => {
                a(!0), fetch(`${window.wplms_course_data.api_url}/gettabs/0?client_id=${window.wplms_course_data.client_id}`, {
                    method: "POST",
                    body: JSON.stringify({
                        token: N
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    a(!1);
                    let t = e[e.findIndex((e => "course_curriculum" == e.id))].fields,
                        s = t[t.findIndex((e => "curriculum" == e.type))].curriculum_elements;
                    g(s[s.findIndex((e => "assignment" == e.type))].types)
                })).catch((e => {
                    a(!1), console.error("Uh oh, an error!", e), oy("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            }), []);
            let C = [...s];
            if (i.s.length && (C = C.filter((e => e.title.toLowerCase().includes(i.s.toLowerCase())))), i.orderby.length && i.order) switch (i.orderby) {
                case "date":
                default:
                    "DESC" == i.order ? C.sort((function(e, t) {
                        return new Date(t.created_time).getTime() - new Date(e.created_time).getTime()
                    })) : C.sort((function(e, t) {
                        return new Date(e.created_time).getTime() - new Date(t.created_time).getTime()
                    }));
                    break;
                case "title":
                    "DESC" == i.order ? C.sort((function(e, t) {
                        return t.title.localeCompare(e.title)
                    })) : C.sort((function(e, t) {
                        return e.title.localeCompare(t.title)
                    }));
                    break;
                case "comment_count":
                    "DESC" == i.order ? C.sort((function(e, t) {
                        return t.attempts - e.attempts
                    })) : C.sort((function(e, t) {
                        return e.attempts - t.attempts
                    }))
            }
            return ty("div", {
                className: "wplms_manage_quizzes_wrapper"
            }, v ? ty(ny, null, ty("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => {
                    h(!1), w(!1)
                }
            }), ty(ey, {
                back: () => h(!1),
                show: e => {
                    h(!1);
                    let t = [...s],
                        a = t.findIndex((t => t.id == e.id)); - 1 == a ? t.unshift(e) : t[a] = e, n(t)
                },
                types: f,
                id: _,
                type: s.findIndex((e => e.id == _)) > -1 ? s[s.findIndex((e => e.id == _))].type : 0
            })) : _ ? ty("div", {
                className: "course_manage quiz_wrapper"
            }, ty("div", {
                className: "quiz_header"
            }, ty("span", {
                className: "header_links"
            }, ty("span", {
                className: "vicon vicon-arrow-left",
                onClick: () => {
                    h(!1), w(!1)
                }
            }), ty("span", null, ty("span", {
                className: "vicon vicon-pencil",
                onClick: () => {
                    h(_)
                }
            }), ty("span", {
                className: "vicon vicon-trash",
                onClick: () => {
                    window.confirm(window.wplms_course_data.translations.confirm_delete_assignment) && (a(!0), fetch(`${window.wplms_course_data.api_url}/instructor/deleteAssignment?post`, {
                        method: "POST",
                        body: JSON.stringify({
                            assignment_id: _,
                            token: N
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (a(!1), e.status) {
                            h(!1), w(!1);
                            let e = [...s];
                            e.splice(e.findIndex((e => e.id == _)), 1), n(e)
                        }
                        e.hasOwnProperty("message") && oy("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), oy("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })))
                }
            }))), ty("h2", {
                dangerouslySetInnerHTML: {
                    __html: s[s.findIndex((e => e.id == _))].title
                }
            }), ty("div", {
                className: "quiz_info"
            }, ty("div", null, ty("span", null, ty("span", {
                className: "vicon vicon-calendar"
            }), " ", s[s.findIndex((e => e.id == _))].created), ty("div", {
                className: "wplms_quiz-type"
            }, s[s.findIndex((e => e.id == _))]["assignment-type"].length ? s[s.findIndex((e => e.id == _))]["assignment-type"].map((e => ty("span", null, e))) : "")), ty("div", null, ty("span", null, ty("span", {
                className: "vicon vicon-user"
            }), " ", s[s.findIndex((e => e.id == _))].attempts), ty("span", null, ty("span", {
                className: "vicon vicon-timer"
            }), " ", ty(Ot, {
                timestamp: s[s.findIndex((e => e.id == _))].timer
            })), ty("span", null, ty("span", {
                className: "vicon vicon-cup"
            }), " ", s[s.findIndex((e => e.id == _))].marks)))), ty("div", {
                className: "course_tabs"
            }, ty("div", {
                className: "instructor_tabs"
            }, ty("span", {
                className: "stats" == y ? "active" : "",
                onClick: () => b("stats")
            }, window.wplms_course_data.translations.statistics), ty("span", {
                className: "activity" == y ? "active" : "",
                onClick: () => b("activity")
            }, window.wplms_course_data.translations.activity), ty("span", {
                className: "submissions" == y ? "active" : "",
                onClick: () => b("submissions")
            }, window.wplms_course_data.translations.submissions), ty("span", {
                className: "view" == y ? "active" : "",
                onClick: () => b("view")
            }, window.wplms_course_data.translations.view))), ty("div", {
                className: "course_tab_content"
            }, "stats" == y ? ty(Df, {
                cpt: "assignment",
                id: _
            }) : "activity" == y ? ty(Yf, {
                id: _,
                cpt: "assignment"
            }) : "submissions" == y ? ty(Pv, {
                id: _,
                type: "assignment",
                statuses: window.wplms_course_data.course.submission_assignment_statuses
            }) : ty(Ld, {
                assignment: {
                    id: _
                },
                update: () => {}
            }))) : ty(ny, null, ty("div", {
                className: "mycourses_header vibebp_form"
            }, ty("div", null, ty("div", {
                className: "vibebp_form_field"
            }, ty("input", {
                type: "text",
                placeholder: window.vibebp.translations.search_text,
                value: i.s,
                onChange: e => {
                    o({
                        ...i,
                        s: e.target.value
                    })
                }
            }), ty("span", {
                className: "vicon vicon-search"
            }))), ty("div", null, ty("select", {
                value: i.orderby,
                onChange: e => {
                    o({
                        ...i,
                        orderby: e.target.value
                    })
                }
            }, ty("option", null, window.vibebp.translations.select_option), Object.keys(window.wplms_course_data.orderby).map((e => ty("option", {
                value: e
            }, window.wplms_course_data.orderby[e])))), ty("span", null, ty("span", {
                className: "ASC" == i.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                onClick: () => {
                    o({
                        ...i,
                        order: "ASC"
                    })
                }
            }), ty("span", {
                className: "DESC" == i.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                onClick: () => {
                    o({
                        ...i,
                        order: "DESC"
                    })
                }
            })))), !r && t ? ty(wl, null) : "", ty("div", {
                className: "vibebp_quizzes"
            }, ty("div", {
                class: "new_quiz",
                onClick: () => h(!0)
            }, ty("i", {
                class: "vicon vicon-plus"
            })), C.length ? C.map((e => ty("div", {
                className: "wplms_quiz",
                onClick: () => w(e.id)
            }, ty("div", null, ty("h3", null, ty("span", {
                className: "static" == e.type ? "vicon vicon-exchange-vertical" : "vicon vicon-control-shuffle"
            }), " ", ty("strong", {
                dangerouslySetInnerHTML: {
                    __html: e.title
                }
            })), ty("span", null, e.created), ty("div", {
                className: "wplms_quiz-type"
            }, e["assignment-type"].length ? e["assignment-type"].map((e => ty("span", null, e))) : "")), ty("div", {
                className: "quiz_meta"
            }, ty("span", null, ty("span", {
                className: "vicon vicon-user"
            }), " ", e.attempts), ty("span", null, ty("span", {
                className: "vicon vicon-time"
            }), " ", e.timer), ty("span", null, ty("span", {
                className: "vicon vicon-medall-alt"
            }), " ", e.marks))))) : ty("div", {
                className: "vbp_message"
            }, window.wplms_course_data.translations.no_assignments), !t && d ? ty("a", {
                className: "link",
                onClick: () => {
                    l(!0), o({
                        ...i,
                        paged: i.paged + 1
                    })
                }
            }, window.wplms_course_data.translations.load_more) : t && r ? ty(wl, null) : "")))
        }, {
            createElement: dy,
            useState: cy,
            useEffect: uy,
            Fragment: my,
            render: py,
            useRef: _y
        } = wp.element, {
            dispatch: wy,
            select: vy
        } = wp.data, hy = e => {
            var t = _y();
            const [a, s] = cy(!1), [n, i] = cy(!1), [o, r] = cy(!1), [l, d] = cy([]), [c, u] = cy([]), [m, _] = cy({}), [w, h] = cy({
                s: "",
                paged: 1,
                id: "",
                orderby: "",
                order: "DESC",
                per_page: window.wplms_course_data.per_page
            }), [f, g] = cy(!0), [y, b] = cy(!1), [k, x] = cy(""), [N, q] = cy([]), [O, I] = cy(""), [C, S] = cy(null), P = vy("vibebp").getToken(), [E, z] = cy(null), [T, L] = cy(!1), [M, $] = cy(!1), j = () => {
                $(!1), h({
                    ...w,
                    paged: 1
                })
            };
            uy((() => (document.addEventListener("vibebp_component_reload", j), () => {
                document.removeEventListener("vibebp_component_reload", j)
            }))), p((() => {
                if (!v(O) && w.id) {
                    if ((() => {
                            let e = [...l];
                            if (w.s.length && (e = e.filter((e => e.student.toLowerCase().includes(w.s.toLowerCase())))), w.orderby.length && w.order) switch (w.orderby) {
                                case "date":
                                default:
                                    "DESC" == w.order ? e.sort((function(e, t) {
                                        return t.id - e.id
                                    })) : e.sort((function(e, t) {
                                        return e.id - t.id
                                    }));
                                    break;
                                case "title":
                                    "DESC" == w.order ? e.sort((function(e, t) {
                                        return t.student.localeCompare(e.student)
                                    })) : e.sort((function(e, t) {
                                        return e.student.localeCompare(t.student)
                                    }))
                            }
                            if ("function" == typeof Tabulator && c && c.length) {
                                e && Array.isArray(e) || (e = []);
                                let n = [...c];
                                if (n && n.length)
                                    for (var a = n.length - 1; a >= 0; a--) - 1 !== ["change_marks", "change_status", "remove_user"].indexOf(n[a].field) && (n[a].cellClick = A, n[a].download = !1, n[a].sorter = !1);
                                var s = new Tabulator(t.current, {});
                                s = new Tabulator(t.current, {
                                    data: e,
                                    layout: "fitDataStretch",
                                    layoutColumnsOnNewData: !0,
                                    columns: n
                                }), S(s)
                            }
                        })(), M) return;
                    E && E.abort();
                    let e = {},
                        a = new AbortController;
                    E && (e = {
                        signal: a.signal
                    }), z(a);
                    let s = `${window.wplms_course_data.api_url}/instructor/manageStudents/fetchTab/${w.id}`,
                        n = {
                            ...w
                        },
                        o = 0;
                    n && n.hasOwnProperty("s") && void 0 !== n.s && n.s.length && (delete n.s, o = 1), s += `?args=${encodeURIComponent(JSON.stringify(n))}&force`, !M && o && (s += "&nocache"), i(!0), fetch(s, {
                        method: "POST",
                        ...e,
                        body: JSON.stringify({
                            tab: O,
                            args: w,
                            token: P
                        })
                    }).then((e => e.json())).then((e => {
                        if (e.status)
                            if (w.paged > 1) {
                                let t = [...l];
                                e.students.length && e.students.map(((a, s) => {
                                    e.students[s].status = window.wplms_course_data.course.admin.statuses[e.students[s].status], t.push(e.students[s])
                                })), d(t), e.students.length < w.per_page ? (g(!1), w.s.length || $(!0)) : g(!0)
                            } else e.students.length && (e.students.map(((t, a) => {
                                e.students[a].status = window.wplms_course_data.course.admin.statuses[t.status]
                            })), d(e.students)), e.students.length < w.per_page ? (g(!1), w.s.length || $(!0)) : g(!0), u(e.columns);
                        else 1 == parseInt(w.paged) && d([]), wy("vibebp").addNotification({
                            text: e.message
                        }), g(!1);
                        i(!1), L(!1)
                    })).catch((e => {
                        "AbortError" === e.name ? i(!0) : (console.error("Uh oh, an error!", e), L(!1), i(!1))
                    }))
                }
            }), 500, [w]), uy((() => {
                s(!0), E && E.abort();
                let e = {},
                    t = new AbortController;
                E && (e = {
                    signal: t.signal
                }), z(t), fetch(`${window.wplms_course_data.api_url}/instructor/manageStudents/getTabs?force`, {
                    method: "POST",
                    ...e,
                    body: JSON.stringify({
                        token: P
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    s(!1), e.status ? (q(e.tabs), I(e.tabs[0].key), e.tabs[0].items.length && h({
                        ...w,
                        id: e.tabs[0].items[0].id
                    })) : wy("vibebp").addNotification({
                        text: e.message
                    })
                })).catch((e => {
                    "AbortError" === e.name ? s(!0) : (s(!1), console.error("Uh oh, an error!", e), wy("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    }))
                }))
            }), []), uy((() => {
                if (!n && "function" == typeof Tabulator && c && c.length) {
                    let s = [...l];
                    s && s.length && Array.isArray(s) || (s = []);
                    let n = [...c];
                    if (n && n.length)
                        for (var e = n.length - 1; e >= 0; e--) - 1 !== ["change_marks", "change_status", "remove_user"].indexOf(n[e].field) && (n[e].cellClick = A, n[e].download = !1, n[e].sorter = !1);
                    var a = new Tabulator(t.current, {});
                    a = new Tabulator(t.current, {
                        data: s,
                        layout: "fitDataStretch",
                        layoutColumnsOnNewData: !0,
                        columns: n
                    }), S(a)
                }
            }), [l, c, n]);
            const A = (e, t) => {
                if (t.hasOwnProperty("_cell")) {
                    let e = t._cell.column.field,
                        a = window.wplms_course_data.translations[e],
                        s = t._cell.row.data.id,
                        n = ((e, t) => {
                            if (e.length)
                                for (var a = e.length - 1; a >= 0; a--)
                                    if (e[a].id == t) return a;
                            return -1
                        })(l, s);
                    n >= 0 && _({
                        item_id: w.id,
                        label: a,
                        action: e,
                        student: s,
                        index: n,
                        data: t._cell.row.data
                    })
                }
            };
            return dy("div", {
                className: "instructor_students"
            }, a ? dy(wl, null) : dy("div", {
                className: "course_manage"
            }, dy("div", {
                className: "course_tabs"
            }, dy("div", {
                className: "instructor_tabs"
            }, N.length ? N.map((e => dy("span", {
                className: O == e.key ? "active" : "",
                onClick: () => {
                    I(e.key), e.items.length && (L(!0), $(!1), g(!0), h({
                        ...w,
                        id: e.items[0].id
                    }))
                }
            }, e.label))) : "")), dy("div", {
                className: "course_tab_content_wrapper"
            }, dy("div", {
                className: "course_tab_content_header"
            }, N.length && N.findIndex((e => e.key == O)) > -1 && N[N.findIndex((e => e.key == O))].items.length ? dy("select", {
                value: w.id,
                onChange: e => {
                    L(!0), $(!1), g(!0), h({
                        ...w,
                        id: e.target.value,
                        paged: 1,
                        s: ""
                    })
                }
            }, N[N.findIndex((e => e.key == O))].items.map((e => dy("option", {
                value: e.id
            }, e.title)))) : "", dy("div", {
                className: "vibebp_form_field"
            }, dy("input", {
                type: "text",
                value: w.s,
                placeholder: window.wplms_course_data.translations.search_student,
                onChange: e => {
                    h({
                        ...w,
                        s: e.target.value,
                        paged: 1
                    })
                }
            })), dy("div", {
                className: "sort_order"
            }, dy("select", {
                value: w.orderby,
                onChange: e => {
                    h({
                        ...w,
                        orderby: e.target.value
                    })
                }
            }, Object.keys(window.wplms_course_data.orderby).map((e => dy("option", {
                value: e
            }, window.wplms_course_data.orderby[e])))), dy("span", null, dy("span", {
                className: "ASC" == w.order ? "active vicon vicon-angle-up" : "vicon vicon-angle-up",
                onClick: () => h({
                    ...w,
                    order: "ASC"
                })
            }), dy("span", {
                className: "DESC" == w.order ? "active vicon vicon-angle-down" : "vicon vicon-angle-down",
                onClick: () => h({
                    ...w,
                    order: "DESC"
                })
            })))), dy("div", {
                className: "course_tab_content"
            }, n ? dy(wl, null) : "", dy("div", {
                ref: t
            }), l.length ? dy(my, null, f ? dy("a", {
                className: " button",
                onClick: () => {
                    h({
                        ...w,
                        paged: w.paged + 1
                    })
                }
            }, window.wplms_course_data.translations.load_more) : null, dy("a", {
                className: "download button is-primary",
                onClick: () => {
                    C && !a && l && l.length && C.download("csv", "dataStudents.csv", {
                        delimiter: ","
                    })
                }
            }, window.wplms_course_data.translations.download), m && Object.keys(m).length ? dy("div", {
                className: "change_data_wrapper"
            }, dy("div", {
                className: "change_data_content"
            }, dy("h2", null, m.label), m.hasOwnProperty("action") && m.action.length ? (() => {
                switch (m.action) {
                    case "change_marks":
                        return dy("input", {
                            type: "number",
                            onChange: e => {
                                let t = {
                                    ...m
                                };
                                t.data.marks = e.target.value, _(t)
                            },
                            value: m.data.marks
                        });
                    case "change_status":
                        return dy(my, null, dy("select", {
                            onChange: e => {
                                let t = {
                                    ...m
                                };
                                t.data.status = e.target.value, _(t)
                            }
                        }, window.wplms_course_data.course.admin.statuses.map(((e, t) => dy("option", {
                            selected: m.data.status == t || window.wplms_course_data.course.admin.statuses.indexOf(m.data.status) == t,
                            value: t
                        }, e)))), 4 == m.data.status || 4 == window.wplms_course_data.course.admin.statuses.indexOf(m.data.status) ? dy("input", {
                            type: "number",
                            onChange: e => {
                                let t = {
                                    ...m
                                };
                                t.data.marks = e.target.value, _(t)
                            },
                            value: m.data.marks
                        }) : "");
                    default:
                        return ""
                }
            })() : "", dy("div", {
                className: "popup-footer"
            }, dy("button", {
                className: "button primary",
                onClick: () => {
                    fetch(`${window.wplms_course_data.api_url}/instructor/manageStudents/changedata?post`, {
                        method: "POST",
                        body: JSON.stringify({
                            ...m,
                            token: P
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (e.status && e.hasOwnProperty("data")) {
                            if ("remove_user" != m.action) {
                                let t = [...l];
                                m.data.status = window.wplms_course_data.course.admin.statuses[e.data.status], t[m.index] = m.data, d(t), C.setData(t), _({})
                            } else {
                                let e = [...l];
                                e.splice(m.index, 1), d(e), C.setData(e), _({})
                            }
                            wy("vibebp").addNotification({
                                text: e.message
                            })
                        } else wy("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), wy("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }, window.wplms_course_data.translations.ok), dy("button", {
                className: "button",
                onClick: () => {
                    _({})
                }
            }, window.wplms_course_data.translations.cancel)))) : "") : k.length ? dy("div", {
                className: "vbp_message"
            }, k) : ""))))
        }, {
            createElement: fy,
            useState: gy,
            useEffect: yy,
            Fragment: by,
            render: ky
        } = wp.element, {
            dispatch: xy,
            select: Ny
        } = wp.data, qy = e => {
            const [t, a] = gy({
                post_title: "",
                meta: []
            }), [s, n] = gy([]), [i, o] = gy([]), [r, l] = gy(!1), [d, c] = gy(!1), [u, m] = gy(!1), [p, _] = gy({}), [w, h] = gy({
                start: [],
                end: []
            }), [f, g] = gy(!1), [y, b] = gy([]);
            return Ny("vibebp").getToken(), yy((() => {}), [e.id]), console.log("--", y, p), fy("div", {
                className: "new_report_wrapper"
            }, fy("span", {
                className: "vicon vicon-arrow-left",
                onClick: e.back
            }), fy("div", {
                className: "vibebp_form"
            }, fy("div", {
                className: "vibebp_form_field"
            }, fy("h3", null, window.wplms_course_data.translations.report_title), fy("input", {
                type: "text",
                value: t.post_title,
                placeholder: window.wplms_course_data.translations.report_title,
                onChange: e => {
                    a({
                        ...t,
                        post_title: e.target.value
                    })
                }
            })), fy("h3", null, window.wplms_course_data.translations.report_steps), fy("div", {
                className: "report_steps_wrapper",
                ref: e => {
                    !f && e && g(e.getBoundingClientRect())
                }
            }, s.length ? s.map(((e, t) => {
                let a = {};
                return e.hasOwnProperty("filterParent") && (a = window.wplms_course_data.reports.properties[e.filterParent]), fy(by, null, t > 0 && void 0 !== w.end[t - 1] && void 0 !== w.start[t] ? fy("svg", {
                    width: "100%",
                    height: "100%"
                }, fy("line", {
                    x1: w.end[t - 1].x - f.x + 12,
                    y1: w.end[t - 1].y - f.y + 12,
                    x2: w.start[t].x - f.x,
                    y2: w.start[t].y - f.y,
                    stroke: "black"
                })) : "", fy("div", {
                    className: "wplms_reports_block"
                }, r || t != s.length - 1 ? "" : fy("span", {
                    className: "vicon vicon-close",
                    onClick: () => {
                        let e = [...s];
                        e.splice(t, 1), n(e)
                    }
                }), t > 0 ? fy("span", {
                    ref: e => {
                        if (e && void 0 === w.start[t]) {
                            let a = {
                                ...w
                            };
                            a.start[t] = e.getBoundingClientRect(), h(a)
                        }
                    },
                    className: "start_connector_dot"
                }) : "", fy("h4", null, fy("span", null, window.wplms_course_data.translations.step, " ", t + 1), e.hasOwnProperty("filterParent") ? window.wplms_course_data.reports.module[e.filterParent] + " " + a[a.findIndex((t => t.key == e.id))].label : e.hasOwnProperty("sortParent") ? window.wplms_course_data.reports.module[e.filterParent] + " " + window.wplms_course_data.translations[e.sort] : window.wplms_course_data.reports.module[e.id]), e.items.length ? fy("div", {
                    className: "selected_items"
                }, e.items.map((t => e.hasOwnProperty("filterParent") ? fy("span", null, a[a.findIndex((t => t.key == e.id))].values[t]) : fy("span", null, window.wplms_course_data.reports.properties[e.id][window.wplms_course_data.reports.properties[e.id].findIndex((e => e.key == t))].label)))) : "", t < s.length ? fy("span", {
                    ref: e => {
                        if (e && void 0 === w.end[t]) {
                            let a = {
                                ...w
                            };
                            a.end[t] = e.getBoundingClientRect(), h(a)
                        }
                    },
                    className: "end_connector_dot"
                }) : ""))
            })) : "", r ? fy("div", {
                className: "wplms_reports_block"
            }, fy("span", {
                className: "vicon vicon-close",
                onClick: () => {
                    l(!1), _({})
                }
            }), !p.hasOwnProperty("type") && s.length ? fy("select", {
                onChange: e => {
                    _({
                        id: 0,
                        type: e.target.value,
                        items: []
                    })
                }
            }, fy("option", null, window.wplms_course_data.translations.select_option), fy("option", {
                value: "module"
            }, window.wplms_course_data.translations.module), fy("option", {
                value: "filter"
            }, window.wplms_course_data.translations.filter), fy("option", {
                value: "sorter"
            }, window.wplms_course_data.translations.sorter)) : fy(by, null, s.length && "module" == p.type ? fy("select", {
                value: v(p) ? "" : p.module,
                onChange: e => {
                    _({
                        id: e.target.value,
                        type: "module",
                        items: []
                    })
                }
            }, fy("option", null, window.wplms_course_data.translations.select_option), Object.keys(window.wplms_course_data.reports.secondary).map((e => fy("option", {
                value: e
            }, window.wplms_course_data.reports.module[e])))) : "module" != p.type && s.length ? "filter" == p.type ? fy("div", {
                className: "report_filter"
            }, fy("select", {
                onChange: e => {
                    let t = e.target.value.split("--"),
                        a = window.wplms_course_data.reports.properties[t[0]][window.wplms_course_data.reports.properties[t[0]].findIndex((e => e.key == t[1]))];
                    _({
                        ...p,
                        id: a.key,
                        filterParent: t[0],
                        max: a.multiple
                    }), a.hasOwnProperty("values") && "fetch" != a.values ? b(a.values) : fetch(`${window.wplms_create_course_data.api_url}/instructor/getReportFilters`, {
                        method: "post",
                        body: JSON.stringify({
                            item: a,
                            token: Ny("vibebp").getToken()
                        })
                    }).then((e => e.json())).then((e => {
                        e.status && b(e.values)
                    }))
                }
            }, fy("option", null, window.wplms_course_data.translations.select_option), s.map((e => {
                if (e.hasOwnProperty("items") && e.items.length && !e.hasOwnProperty("filterParent")) return e.items.map(((t, a) => {
                    let s = window.wplms_course_data.reports.properties[e.id][window.wplms_course_data.reports.properties[e.id].findIndex((e => e.key == t))];
                    if (s.hasOwnProperty("filterable") && s.filterable) return fy("option", {
                        value: e.id + "--" + s.key
                    }, window.wplms_course_data.reports[e.type][e.id], s.label)
                }))
            }))), y.length ? fy("div", {
                className: "addItems"
            }, fy("div", {
                className: "selected_items"
            }, p.hasOwnProperty("items") && p.items.length ? p.items.map(((e, t) => fy("span", {
                onClick: () => {
                    let e = {
                        ...p
                    };
                    e.items.splice(t, 1), _(e)
                }
            }, y[e]))) : "", p.id ? fy("span", {
                className: d ? "vicon vicon-close" : "vicon vicon-plus",
                onClick: () => c(!d)
            }) : ""), d ? fy("select", {
                onChange: e => {
                    let t = {
                        ...p
                    }; - 1 == t.items.indexOf(e.target.value) && p.items.length <= t.max && (t.items.push(e.target.value), _(t), c(!1))
                }
            }, fy("option", null, window.wplms_course_data.translations.select_option), Array.isArray(y) ? y.map(((e, t) => fy("option", {
                value: t
            }, e))) : "object" == typeof y ? Object.keys(y).map((e => fy("option", {
                value: e
            }, y[e]))) : "") : "") : "") : "sort" == p.type ? fy("div", {
                className: "report_sorter"
            }, fy("select", {
                onChange: e => {
                    let t = e.target.value.split("-");
                    _({
                        ...p,
                        id: t[1],
                        sortParent: t[0]
                    })
                }
            }, fy("option", null, window.wplms_course_data.translations.select_option), s.map((e => {
                if (e.hasOwnProperty("items") && e.items.length && !e.hasOwnProperty("filterParent")) return e.items.map(((t, a) => {
                    let s = window.wplms_course_data.reports.properties[e.id][window.wplms_course_data.reports.properties[e.id].findIndex((e => e.key == t))];
                    if (s.hasOwnProperty("filterable") && s.filterable) return fy("option", {
                        value: e.id + "--" + s.key
                    }, window.wplms_course_data.reports[e.type][e.id], s.label)
                }))
            }))), fy("select", {
                onChange: e => {
                    _({
                        ...p,
                        sort: e.target.value
                    })
                }
            }, fy("option", null, window.wplms_course_data.translations.select_option), fy("option", {
                value: "ASC"
            }, window.wplms_course_data.translations.ASC), fy("option", {
                value: "DESC"
            }, window.wplms_course_data.translations.DESC))) : "" : fy("select", {
                value: v(p) ? "" : p.module,
                onChange: e => {
                    _({
                        id: e.target.value,
                        type: "module",
                        items: []
                    })
                }
            }, fy("option", null, window.wplms_course_data.translations.select_option), Object.keys(window.wplms_course_data.reports.module).map((e => fy("option", {
                value: e
            }, window.wplms_course_data.reports.module[e])))), v(p) ? "" : "module" == p.type ? fy("div", {
                className: "addItems"
            }, fy("div", {
                className: "selected_items"
            }, p.hasOwnProperty("items") && p.items.length ? p.items.map(((e, t) => fy("span", {
                onClick: () => {
                    let e = {
                        ...p
                    };
                    e.items.splice(t, 1), _(e)
                }
            }, window.wplms_course_data.reports.properties[p.id][window.wplms_course_data.reports.properties[p.id].findIndex((t => t.key == e))].label))) : "", p.id ? fy("span", {
                className: d ? "vicon vicon-close" : "vicon vicon-plus",
                onClick: () => c(!d)
            }) : ""), d ? fy("select", {
                onChange: e => {
                    let t = {
                        ...p
                    }; - 1 == t.items.indexOf(e.target.value) && (t.items.push(e.target.value), _(t), c(!1))
                }
            }, fy("option", null, window.wplms_course_data.translations.select_option), window.wplms_course_data.reports.properties[p.id].map((e => fy("option", {
                value: e.key
            }, e.label)))) : "") : "", fy("a", {
                className: "button is-primary",
                onClick: () => {
                    if (p.hasOwnProperty("id") && p.id) {
                        let e = [...s];
                        e.push(p), n(e), _({}), l(!1)
                    }
                }
            }, window.wplms_course_data.translations.add_module))) : fy("a", {
                className: "add_step",
                onClick: () => {
                    l(!0)
                }
            }, fy("span", {
                className: "vicon vicon-plus"
            })))))
        }, {
            createElement: Oy,
            useState: Iy,
            useEffect: Cy,
            Fragment: Sy,
            render: Py
        } = wp.element, {
            dispatch: Ey,
            select: zy
        } = wp.data, {
            createElement: Ty,
            useState: Ly,
            useEffect: My,
            Fragment: $y,
            render: jy
        } = wp.element, {
            dispatch: Ay,
            select: Dy
        } = wp.data, Hy = e => {
            const [t, a] = Ly(!1), [s, n] = Ly([]), [i, o] = Ly({
                s: "",
                paged: 1,
                orderby: "",
                order: "DESC"
            }), [r, l] = Ly(!1), [d, c] = Ly(!1), [u, m] = Ly(""), [_, w] = Ly(!0), [v, h] = Ly(!1), f = Dy("vibebp").getToken();
            return p((() => {
                a(!0), fetch(`${window.wplms_course_data.api_url}/instructor/getReports`, {
                    method: "POST",
                    body: JSON.stringify({
                        ...i,
                        token: f
                    })
                }).then((e => e.json())).then((e => {
                    if (a(!1), e.status)
                        if (v) {
                            let t = [...s, ...e.reports];
                            n(t), t.length < e.total && w(!0)
                        } else n(e.reports), e.reports.length < e.total && w(!0);
                    else m(e.message)
                }))
            }), 500, [i]), Ty("div", {
                className: "instructor_reports"
            }, t ? Ty(wl, null) : d ? Ty(qy, {
                back: () => c(!1)
            }) : r ? Ty(ShowReport, {
                back: () => l(!1)
            }) : Ty($y, null, Ty("div", {
                className: "mycourses_header"
            }, Ty("div", null, Ty("div", {
                className: "search vibebp_form_field"
            }, Ty("input", {
                type: "text",
                placeholder: window.wplms_course_data.translations.search,
                value: i.s,
                onChange: e => o({
                    ...i,
                    s: e.target.value
                })
            }), Ty("span", {
                className: "vicon vicon-search"
            }))), Ty("div", {
                className: "orderby"
            }, Ty("select", {
                value: i.orderby,
                onChange: e => {
                    o({
                        ...i,
                        orderby: e.target.value
                    })
                }
            }, Object.keys(window.wplms_course_data.orderby).map((e => Ty("option", {
                value: e
            }, window.wplms_course_data.orderby[e])))), Ty("span", null, Ty("span", {
                className: "ASC" == i.order ? "active vicon vicon-angle-up" : "vicon vicon-angle-up",
                onClick: () => o({
                    ...i,
                    order: "ASC"
                })
            }), Ty("span", {
                className: "DESC" == i.order ? "active vicon vicon-angle-down" : "vicon vicon-angle-down",
                onClick: () => o({
                    ...i,
                    order: "DESC"
                })
            })))), Ty("div", {
                className: "reports_list"
            }, Ty("div", {
                className: "new_report",
                onClick: () => {
                    c(!0)
                }
            }, Ty("span", {
                className: "vicon vicon-plus"
            })), s.length ? Ty($y, null, retports.map((e => Ty("div", {
                className: "report",
                onClick: () => l(e)
            }, Ty("h3", null, e.title), Ty(Ot, {
                timestamp: e.date
            })))), _ ? Ty("a", {
                className: "link",
                onClick: () => {
                    o({
                        ...i,
                        paged: i.paged + 1
                    }), h(!0)
                }
            }) : "") : u.length ? Ty("div", {
                className: "vbp_message"
            }, u) : "")))
        }, {
            createElement: Uy,
            useState: Fy,
            useEffect: Jy,
            Fragment: Ry,
            render: By
        } = wp.element, {
            dispatch: Vy,
            select: Xy
        } = wp.data, Wy = e => {
            const [t, a] = Fy(!0), [s, n] = Fy({
                paged: 1,
                orderby: "recent",
                order: "DESC",
                search_terms: "",
                per_page: 20
            }), [i, o] = Fy([]), [r, l] = Fy(!1), d = window.wplms_course_data.api_url;
            let c = Xy("vibebp").getUser();
            c.token = Xy("vibebp").getToken(), Jy((() => (document.addEventListener("vibebp_component_reload", u), () => {
                document.removeEventListener("vibebp_component_reload", u)
            }))), Jy((() => {
                u()
            }), []);
            const u = () => {
                a(!0), fetch(`${d}/instructor/get_posts/course`, {
                    method: "POST",
                    body: JSON.stringify({
                        token: c.token
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    a(!1), e.hasOwnProperty("posts") && e.posts && e.posts.length && (o(e.posts), l(e.posts[0].id))
                })).catch((e => {
                    a(!1), console.error("Uh oh, an error!", e), Vy("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            };
            return t ? Uy(wl, null) : Uy(Ry, null, i.length ? Uy("div", {
                className: "mycourses_header vibebp_form"
            }, Uy("select", {
                className: "courses",
                onChange: e => {
                    l(e.target.value)
                }
            }, i.map(((e, t) => Uy("option", {
                value: e.id,
                selected: r == e.id
            }, e.title))))) : Uy("div", {
                className: "vbp_message"
            }, window.wplms_course_data.translations.no_courses_found), r ? Uy(tv, {
                course: r
            }) : "")
        }, {
            createElement: Yy,
            useState: Qy,
            useEffect: Ky,
            Fragment: Gy,
            render: Zy,
            useContext: eb
        } = wp.element, {
            dispatch: tb,
            select: ab
        } = wp.data, sb = e => {
            const t = eb(dc),
                [a, s] = Qy([]),
                [n, i] = Qy(0);
            Ky((() => {
                if (Array.isArray(t.courseStatus.courseitems) && t.courseStatus.courseitems.length) {
                    let e = [...t.courseStatus.courseitems];
                    e = t.courseStatus && t.courseStatus.filtered_items && t.courseStatus.filtered_items.length ? t.courseStatus.filtered_items : t.courseStatus.courseitems;
                    let a = -1;
                    e.map(((e, s) => {
                        "section" == e.type ? a = s : a > -1 && t.current_unit_key == s && i(a)
                    })), a < 0 && i(a), s(e)
                }
            }), [t.courseStatus.courseitems, t.current_unit_key, t.courseStatus.filtered_items]), Ky((() => {
                if (Array.isArray(t.courseStatus.courseitems) && t.courseStatus.courseitems.length) {
                    let e = -1,
                        a = [...t.courseStatus.courseitems];
                    a.map(((s, n) => {
                        "section" == s.type ? (e = n, a[e].lesson_count = 0, a[e].duration = 0) : e > -1 && (a[e].duration = parseInt(a[e].duration) + parseInt(s.duration), a[e].lesson_count++, a[n].section = e, t.current_unit_key == n && i(e))
                    })), e < 0 && i(e), s(a)
                }
            }), [t.courseStatus.courseitems]);
            let o = -1;
            return Yy(Gy, null, a ? Yy("ul", {
                className: a.length > 10 ? "" : "stickypos"
            }, a.map(((e, s) => {
                let r = Math.round(e.duration / 60);
                "section" == e.type && (o = s);
                let l = e.type + " " + (e.status ? "done" : "") + " " + (t.current_unit_key == s ? "active" : "") + " ";
                return "section" != e.type && n > -1 && (l += n === o ? " open_lesson" : " collapsed_lesson"), Yy("li", {
                    className: l
                }, Yy("p", {
                    onClick: () => {
                        ((e, a) => {
                            "section" == e.type ? i(a) : 0 != e.id && (document.querySelector(".course_status").scrollTo({
                                top: 0,
                                left: 0,
                                behavior: "smooth"
                            }), t.update({
                                index: a
                            }, "loadunit"))
                        })(e, e.key)
                    }
                }, e.icon && e.icon.length > 200 ? Yy("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.icon
                    }
                }) : Yy("span", {
                    className: e.icon
                }), Yy("span", {
                    className: "lesson_title",
                    dangerouslySetInnerHTML: {
                        __html: e.title
                    }
                }), "section" == e.type ? Yy("span", null, Yy("span", {
                    className: "lesson_count"
                }, e.lesson_count + " " + window.wplms_course_data.translations.lesson_count), Yy("span", {
                    className: "lesson_duration"
                }, r < 180 ? r + " " + window.wplms_course_data.time_labels.minute.symbol : r > 999 ? Yy("span", {
                    className: "vicon vicon-infinite"
                }) : Math.round(r / 60) + " " + window.wplms_course_data.time_labels.hour.symbol)) : Yy("span", {
                    className: "lesson_duration"
                }, r >= 9999 ? Yy("i", {
                    className: "vicon vicon-infinite"
                }) : r < 180 ? r + " " + window.wplms_course_data.time_labels.minute.symbol : Math.round(r / 60) + " " + window.wplms_course_data.time_labels.hour.symbol)), "section" == e.type ? Yy("i", s === n ? {
                    className: "vicon vicon-minus",
                    onClick: () => i(!1)
                } : {
                    className: "vicon vicon-plus",
                    onClick: () => i(s)
                }) : "", "section" != e.type ? "unit" === e.type ? Yy("div", {
                    className: "unit_progress_wrapper",
                    onClick: () => {
                        ((e, a) => {
                            0 == e.id || t.courseStatus.lock || e.status || t.courseStatus.unit_media_lock && (e.meta.hasOwnProperty("video") && Array.isArray(e.meta.video) && e.meta.video.length || "video" == e.unit_type) || t.update({
                                index: a
                            }, "directmarkcomplete")
                        })(e, s)
                    }
                }, t.courseStatus.hasOwnProperty("lock") && t.courseStatus.lock && !t.courseStatus.courseitems[s].status && s != t.current_unit_key ? Yy("span", {
                    className: "vicon vicon-lock"
                }) : Yy(Ii, {
                    progress: a[s] && "unit" == a[s].type && a[s].hasOwnProperty("progressbar") ? a[s].progressbar : 0,
                    size: "xs"
                })) : Yy("div", {
                    className: "unit_progress_wrapper"
                }, t.courseStatus.hasOwnProperty("lock") && t.courseStatus.lock && !t.courseStatus.courseitems[s].status && s != t.current_unit_key ? Yy("span", {
                    className: "vicon vicon-lock"
                }) : Yy(Ii, {
                    progress: 100,
                    size: "xs"
                })) : "")
            }))) : Yy("div", {
                class: "message"
            }, window.wplms_course_data.translations.no_content_found))
        }, {
            createContext: nb
        } = wp.element, ib = nb({
            comments: {},
            update: e => {}
        }), {
            createElement: ob,
            useState: rb,
            useEffect: lb,
            Fragment: db,
            render: cb,
            useContext: ub
        } = wp.element, {
            dispatch: mb,
            select: pb
        } = wp.data, _b = e => {
            const [t, a] = rb({}), s = ub(ib);
            lb((() => {
                a(e.comment)
            }), [e.comment]);
            const n = e => {
                    s.update({
                        comment: t
                    }, e)
                },
                i = pb("vibebp").getUser();
            return t && Object.keys(t).length ? ob("li", {
                className: "unit_comment_wrapper " + (e.disable == t.comment_ID ? "disabled" : "")
            }, ob("div", {
                className: "unit_comment"
            }, t.user ? ob("div", {
                className: "comment_user"
            }, t.user.avatar ? ob("img", {
                src: t.user.avatar
            }) : "", t.user.name ? ob("span", {
                className: "username"
            }, t.user.name) : t.user.displayname ? ob("span", {
                className: "username"
            }, t.user.displayname) : ob("span", {
                className: "username"
            }, window.wplms_course_data.translations.anonymous)) : "", ob("div", {
                className: "unit_comment_content"
            }, ob("div", {
                className: "unit_comment_header"
            }, ob("span", null, ob(Ot, {
                timestamp: parseInt(t.comment_date)
            })), t.hasOwnProperty("comment_karma") && e.disable != t.comment_ID ? ob("div", {
                className: "comment_actions"
            }, i.id == t.user_id || t.hasOwnProperty("user") && t.user.id == i.id || Object.keys(i.caps).indexOf("manage_options") > -1 ? ob("span", {
                className: "vicon vicon-pencil",
                onClick: () => {
                    n("edit")
                }
            }) : "", "note" == t.type || t.hasOwnProperty("comment_type") && "note" == t.comment_type ? "" : ob("span", {
                className: "vicon vicon-share",
                onClick: () => {
                    n("reply")
                }
            }), i.id == t.user_id || t.hasOwnProperty("user") && t.user.id == i.id ? ob(db, null, parseInt(t.comment_parent) || "note" == t.type ? "" : t.question ? ob("span", {
                className: "vicon vicon-user active tip",
                title: window.wplms_course_data.translations.instructor_question
            }) : ob("span", {
                className: "vicon vicon-user tip",
                title: window.wplms_course_data.translations.ask_instructor,
                onClick: () => {
                    fetch(`${window.wplms_course_data.api_url}/student/askQuestion/?post`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            comment: t,
                            unit_id: s.unit_id,
                            course_id: s.course_id,
                            token: pb("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        a({
                            ...t,
                            question: !0
                        }), e ? e.hasOwnProperty("message") && mb("vibebp").addNotification({
                            icon: "vicon vicon-user",
                            text: e.message
                        }) : e.hasOwnProperty("message") && mb("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), mb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }
            }), i.id == t.user_id || t.hasOwnProperty("user") && t.user.id == i.id ? ob("span", {
                className: "vicon vicon-trash",
                onClick: () => {
                    n("delete")
                }
            }) : "") : "") : ""), ob("div", {
                dangerouslySetInnerHTML: {
                    __html: t.comment_content
                }
            }))), t.child && t.child.length ? ob("ul", null, t.child.map(((t, a) => ob(_b, {
                comment: t,
                disable: e.disable
            })))) : "") : ""
        }, wb = _b, {
            createElement: vb,
            useState: hb,
            useEffect: fb,
            Fragment: gb,
            render: yb
        } = wp.element, {
            dispatch: bb,
            select: kb
        } = wp.data;
        let xb = !1;
        const Nb = e => {
                const [t, a] = hb([]), [s, n] = hb(!1), [i, o] = hb(0), [r, l] = hb(!1), [d, c] = hb(!1), [u, m] = hb({}), [p, _] = hb(!0), [w, v] = hb("public"), h = kb("vibebp").getUser(), f = kb("vibebp").getToken(), g = {
                    type: w,
                    unit_id: e.unit_id,
                    course_id: e.course_id
                };
                fb((() => {
                    m(g)
                }), [e.unit_id]), fb((() => {
                    let t = {
                        type: w,
                        unit_id: e.unit_id,
                        course_id: e.course_id
                    };
                    m(t), _(!0), o(0), a([]), y(w, !0)
                }), [w]);
                const y = (s = null, r = null) => {
                        s || (s = "public"), xb && xb.abort();
                        let l = {},
                            d = new AbortController;
                        xb && (l = {
                            signal: d.signal
                        }), xb = d;
                        let c = i;
                        r && (c = 0), c || n(!0), fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${e.unit_id}?page=${c}&per_page=20&force`, {
                            method: "post",
                            ...l,
                            headers: window.vibebp.xnonce ? {
                                "X-WP-Nonce": window.vibebp.xnonce
                            } : {},
                            body: JSON.stringify({
                                token: f,
                                type: s
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((e => {
                            if (e) {
                                let s = [...t];
                                r && (s = []), e.length ? (e.map(((t, a) => {
                                    s.findIndex((e => e.comment_ID === t.comment_ID)) < 0 && s.push(N(t, e))
                                })), a(s), _(!1), n(!1), o(c + 1)) : (_(!0), n(!1))
                            }
                        })).catch((e => {
                            "AbortError" === e.name || (n(!1), console.error("Uh oh, an error!", e), bb("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            }))
                        }))
                    },
                    b = (e, t, a) => {
                        for (let s = 0; s < e.length; s++) e[s].comment_ID == t && (e[s].child && e[s].child.length ? e[s].child.unshift(a) : (e[s].child = [], e[s].child.push(a))), e[s].child && e[s].child.length && b(e[s].child, t, a);
                        return e
                    },
                    k = (e, t, a) => {
                        for (let s = 0; s < e.length; s++) e[s].comment_ID == t && (e[s] = a), e[s].child && e[s].child.length && k(e[s].child, t, a);
                        return e
                    },
                    x = (e, t, a) => {
                        for (let s = 0; s < e.length; s++) e[s].comment_ID == t && (e[s].comment_content = a.comment_content), e[s].child && e[s].child.length && k(e[s].child, t, a);
                        return e
                    },
                    N = (e, t) => (t.map(((a, s) => {
                        parseInt(e.comment_ID) === parseInt(a.comment_parent) && (e.hasOwnProperty("child") || (e.child = []), t.splice(s, 1), e.child.push(N(a, t)))
                    })), e),
                    q = () => Math.floor(1e9 * Math.random() + 1),
                    O = (e, t) => {
                        if (e.comment_ID && t.length)
                            for (var a = t.length - 1; a >= 0; a--) {
                                if (t[a].comment_ID == e.comment_ID) {
                                    t.splice(a, 1);
                                    break
                                }
                                t[a].hasOwnProperty("child") && t[a].child.length && (t[a].child = O(e, t[a].child))
                            }
                        return t
                    },
                    I = () => {
                        switch (u.ctype) {
                            case "new":
                            default:
                                return "public" == w ? window.wplms_course_data.translations.add_comment : window.wplms_course_data.translations.add_note;
                            case "new_question":
                                return window.wplms_course_data.translations.ask_question;
                            case "reply":
                                return window.wplms_course_data.translations.reply;
                            case "edit":
                                return "public" == w ? window.wplms_course_data.translations.edit_comment : window.wplms_course_data.translations.edit_note
                        }
                    },
                    C = (e, t) => "undefined" != typeof localforage && window.vibebp.api.sw_enabled && navigator.onLine ? t ? localforage.removeItem(e) : localforage.iterate((function(t, a, s) {
                        e.length && a.length && a.includes(e) && localforage.removeItem(a)
                    })) : new Promise((e => {
                        e(1)
                    })),
                    S = t => {
                        let a = `${window.wplms_course_data.api_url}/user/unitcomments/${e.unit_id}?page=${i-1}&per_page=20`;
                        "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(a).then((e => {
                            e && e.length && (e = t, localforage.setItem(a, JSON.stringify(e)))
                        }))
                    };
                let P = "";
                if (t.length && d) {
                    let e = t.findIndex((e => e.comment_ID === d));
                    P = e > -1 ? t[e].ctype : ""
                }
                return vb(ib.Provider, {
                    value: {
                        comments: t,
                        unit_id: e.unit_id,
                        course_id: e.course_id,
                        update: (s, n) => {
                            switch (n) {
                                case "edit":
                                    l(!0), s.comment.ctype = n, s.comment.user_id || (s.comment.user_id = h.id), s.comment.user || (s.comment.user = h), m(s.comment);
                                    break;
                                case "reply":
                                    l(!0), m({
                                        user_id: h.id,
                                        user: h,
                                        comment_ID: q(),
                                        comment_parent: s.comment.comment_ID,
                                        ctype: n
                                    });
                                    break;
                                case "delete":
                                    (i = s.comment).user.id && fetch(`${window.wplms_course_data.api_url}/user/unitcomments/delete/${i.comment_ID}?post`, {
                                        method: "post",
                                        headers: window.vibebp.xnonce ? {
                                            "X-WP-Nonce": window.vibebp.xnonce
                                        } : {},
                                        body: JSON.stringify({
                                            comment: i,
                                            token: kb("vibebp").getToken(),
                                            course_id: e.course_id
                                        })
                                    }).then((e => e.ok ? e.json() : {
                                        status: 0,
                                        message: window.wplms_course_data.translations.error_loading_data
                                    })).then((e => {
                                        if (e) {
                                            let s = O(i, [...t]);
                                            if (a(s), e.status) {
                                                let e = `${window.wplms_course_data.api_url}/student/comments/0`;
                                                C(e)
                                            }
                                            e.hasOwnProperty("message") && e.message.length && bb("vibebp").addNotification({
                                                text: e.message
                                            }), S(s)
                                        }
                                    })).catch((e => {
                                        console.error("Uh oh, an error!", e), bb("vibebp").addNotification({
                                            text: window.wplms_course_data.translations.error_loading_data
                                        })
                                    }))
                            }
                            var i
                        }
                    }
                }, vb("div", {
                    className: "unit_comments_enclosure"
                }, vb("div", {
                    className: r ? "unit_comments_wrapper active" : "unit_comments_wrapper"
                }, vb("span", null, vb("span", {
                    onClick: e.back
                }, vb("span", {
                    className: "vicon vicon-arrow-left"
                })), vb("strong", null, window.wplms_course_data.translations[w]), vb("span", {
                    onClick: e.expand
                }, vb("span", {
                    className: "vicon vicon-align-right"
                }))), vb("div", {
                    className: "vibe_tabs"
                }, vb("span", {
                    className: "vibe_tab " + ("public" == w ? "active" : ""),
                    onClick: () => {
                        v("public")
                    }
                }, window.wplms_course_data.translations.comments), vb("span", {
                    className: "vibe_tab " + ("note" == w ? "active" : ""),
                    onClick: () => {
                        v("note")
                    }
                }, window.wplms_course_data.translations.notes)), s ? vb(wl, null) : vb(gb, null, vb("div", {
                    className: "unit_comments"
                }, t && t.length ? vb("ul", null, t.map(((e, t) => vb(wb, {
                    comment: e,
                    disable: d
                })))) : vb("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_comments), vb("div", {
                    className: "loadmore_wrapper"
                }, p ? "" : vb("a", {
                    className: "link",
                    onClick: () => {
                        y(w)
                    }
                }, window.wplms_course_data.translations.load_more))), vb("div", {
                    className: "unit_comments_action"
                }, r ? vb("div", {
                    className: "addcomment"
                }, vb("textarea", {
                    value: u.comment_content,
                    onChange: e => {
                        let t = {
                            ...u
                        };
                        t.comment_content = e.target.value, m(t)
                    }
                }, u.comment_content), vb("div", {
                    className: "addcomment_buttons"
                }, vb("a", {
                    className: d ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        if (!u.ctype) return bb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.insufficientdata
                        }), !1;
                        if (!(u.comment_content && u.comment_content.length > 3)) return bb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.add_more_content
                        }), !1;
                        {
                            u.comment_ID || (u.comment_ID = q()), c(u.comment_ID), u.comment_post_ID || (u.comment_post_ID = e.unit_id);
                            let s = u.comment_ID,
                                n = [...t];
                            switch (u.ctype) {
                                case "new":
                                case "new_question":
                                    n.unshift(u), a(n), S(n), fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${e.unit_id}/new/0?post`, {
                                        method: "post",
                                        headers: window.vibebp.xnonce ? {
                                            "X-WP-Nonce": window.vibebp.xnonce
                                        } : {},
                                        body: JSON.stringify({
                                            ...u,
                                            token: kb("vibebp").getToken(),
                                            course_id: e.course_id
                                        })
                                    }).then((e => e.ok ? e.json() : {
                                        status: 0,
                                        message: window.wplms_course_data.translations.error_loading_data
                                    })).then((e => {
                                        if (e)
                                            if (e.comment_data) {
                                                let t = n.findIndex((e => parseInt(e.comment_ID) == u.comment_ID));
                                                t >= 0 && (e.comment_data.user = h, n.splice(t, 1, e.comment_data), a(n));
                                                let s = `${window.wplms_course_data.api_url}/student/comments/0`;
                                                C(s)
                                            } else bb("vibebp").addNotification({
                                                text: e.message
                                            });
                                        c(!1)
                                    })).catch((e => {
                                        console.error("Uh oh, an error!", e), bb("vibebp").addNotification({
                                            text: window.wplms_course_data.translations.error_loading_data
                                        })
                                    }));
                                    break;
                                case "edit":
                                    if (!u.comment_content || u.comment_content.length < 4) return void bb("vibebp").addNotification({
                                        text: window.wplms_course_data.translations.add_more_content
                                    });
                                    let t = x(n, s, u);
                                    a(t), S(n), u.comment_content, fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${e.unit_id}/edit/${s}?post`, {
                                        method: "post",
                                        headers: window.vibebp.xnonce ? {
                                            "X-WP-Nonce": window.vibebp.xnonce
                                        } : {},
                                        body: JSON.stringify({
                                            ...u,
                                            token: kb("vibebp").getToken(),
                                            course_id: e.course_id
                                        })
                                    }).then((e => e.ok ? e.json() : {
                                        status: 0,
                                        message: window.wplms_course_data.translations.error_loading_data
                                    })).then((e => {
                                        if (e)
                                            if (e.comment_data) {
                                                e.comment_data.hasOwnProperty("user") || (e.comment_data.user = h), t = x(n, s, e.comment_data), a(t);
                                                let i = `${window.wplms_course_data.api_url}/student/comments/0`;
                                                C(i)
                                            } else bb("vibebp").addNotification({
                                                text: window.wplms_course_data.translations.error
                                            });
                                        c(!1)
                                    })).catch((e => {
                                        console.error("Uh oh, an error!", e), bb("vibebp").addNotification({
                                            text: window.wplms_course_data.translations.error_loading_data
                                        })
                                    }));
                                    break;
                                case "reply":
                                    if (!u.comment_content || u.comment_content.length < 4) return void bb("vibebp").addNotification({
                                        text: window.wplms_course_data.translations.add_more_content
                                    });
                                    let i = b(n, u.comment_parent, u);
                                    a(i), S(n), fetch(`${window.wplms_course_data.api_url}/user/unitcomments/${e.unit_id}/reply/${u.comment_parent}?post`, {
                                        method: "post",
                                        headers: window.vibebp.xnonce ? {
                                            "X-WP-Nonce": window.vibebp.xnonce
                                        } : {},
                                        body: JSON.stringify({
                                            ...u,
                                            token: kb("vibebp").getToken(),
                                            course_id: e.course_id
                                        })
                                    }).then((e => e.ok ? e.json() : {
                                        status: 0,
                                        message: window.wplms_course_data.translations.error_loading_data
                                    })).then((e => {
                                        if (e)
                                            if (e.comment_data) {
                                                e.comment_data.hasOwnProperty("user") || (e.comment_data.user = h), i = k(n, s, e.comment_data), a(i);
                                                let t = `${window.wplms_course_data.api_url}/student/comments/0`;
                                                C(t)
                                            } else bb("vibebp").addNotification({
                                                text: window.wplms_course_data.translations.error
                                            });
                                        c(!1)
                                    })).catch((e => {
                                        console.error("Uh oh, an error!", e), bb("vibebp").addNotification({
                                            text: window.wplms_course_data.translations.error_loading_data
                                        })
                                    }))
                            }
                            m(g), l(!1)
                        }
                    }
                }, I()), vb("a", {
                    className: "link",
                    onClick: () => {
                        m(g), l(!1)
                    }
                }, window.wplms_course_data.translations.cancel))) : vb(gb, null, vb("a", {
                    className: "new" == P && d ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        let e = {
                            ...u
                        };
                        e.ctype = "new", r && (e = {}), e.user_id = h.id, e.user = h, m(e), l(!r)
                    }
                }, vb("span", {
                    className: "public" == w ? "vicon vicon-comments" : "vicon vicon-note"
                }), vb("span", null, I())), "public" == w ? vb("a", {
                    className: "new_question" == P && d ? "button is-primary is-loading" : "button is-primary",
                    onClick: () => {
                        let e = {
                            ...u
                        };
                        e.ctype = "new_question", r && (e = {}), e.user_id = h.id, e.user = h, m(e), l(!r)
                    }
                }, vb("span", {
                    className: "vicon vicon-help"
                }), vb("span", null, window.wplms_course_data.translations.ask_question)) : ""))))))
            },
            {
                createElement: qb,
                useState: Ob,
                useEffect: Ib,
                Fragment: Cb,
                render: Sb,
                useContext: Pb
            } = wp.element,
            {
                dispatch: Eb,
                select: zb
            } = wp.data,
            Tb = e => {
                const [t, a] = Ob(0), [s, n] = Ob(0), i = Pb(dc), o = () => {
                    const e = document.querySelector(".course_content_content");
                    if (!e) return;
                    let t = e.clientHeight - (e.offsetTop - 240) - window.innerHeight,
                        a = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
                    if (document.querySelector("body").classList && document.querySelector("body").classList.contains("course_status_fullscreen") && document.querySelector(".course_status") && (a = document.querySelector(".course_status").scrollTop, t = e.clientHeight - e.offsetTop - window.innerHeight), 0 !== a) return a > t ? (i.update({
                        progress: 100
                    }, "updateprogress"), void i.update({}, "progresscompleted")) : void i.update({
                        progress: a / t * 100
                    }, "updateprogress");
                    i.update({
                        progress: 0
                    }, "updateprogress")
                }, r = e => {
                    n(Math.random())
                };
                return Ib((() => (document.addEventListener("course_status_fullscreen_toggle", r), () => {
                    document.removeEventListener("course_status_fullscreen_toggle", r)
                })), []), Ib((() => (document.querySelector(".course_status") && (document.querySelector("body").classList && document.querySelector("body").classList.contains("course_status_fullscreen") ? document.querySelector(".course_status").addEventListener("scroll", o) : window.addEventListener("scroll", o)), () => {
                    document.querySelector(".course_status") && (document.querySelector("body").classList && document.querySelector("body").classList.contains("course_status_fullscreen") ? document.querySelector(".course_status").removeEventListener("scroll", o) : window.removeEventListener("scroll", o))
                }))), ""
            };
        var Lb = function() {
                function e() {}
                return e.prototype.expandToken = function(e) {
                    for (var t = [], a = "", s = 0, n = e.length; s < n; ++s) a += e.charAt(s), t.push(a);
                    return t
                }, e
            }(),
            Mb = function() {
                function e() {}
                return e.prototype.sanitize = function(e) {
                    return e ? e.toLocaleLowerCase().trim() : ""
                }, e
            }();

        function $b(e, t) {
            t = t || [];
            for (var a = e = e || {}, s = 0; s < t.length; s++)
                if (null == (a = a[t[s]])) return null;
            return a
        }
        var jb = function() {
                function e(e) {
                    this._uidFieldName = e, this._tokenToIdfCache = {}, this._tokenMap = {}
                }
                var t = e.prototype;
                return t.indexDocument = function(e, t, a) {
                    this._tokenToIdfCache = {};
                    var s, n = this._tokenMap;
                    "object" != typeof n[e] ? n[e] = s = {
                        $numDocumentOccurrences: 0,
                        $totalNumOccurrences: 1,
                        $uidMap: {}
                    } : (s = n[e]).$totalNumOccurrences++;
                    var i = s.$uidMap;
                    "object" != typeof i[t] ? (s.$numDocumentOccurrences++, i[t] = {
                        $document: a,
                        $numTokenOccurrences: 1
                    }) : i[t].$numTokenOccurrences++
                }, t.search = function(e, t) {
                    for (var a = {}, s = 0, n = e.length; s < n; s++) {
                        var i, o = e[s],
                            r = this._tokenMap[o];
                        if (!r) return [];
                        if (0 === s)
                            for (var l = 0, d = (i = Object.keys(r.$uidMap)).length; l < d; l++) a[c = i[l]] = r.$uidMap[c].$document;
                        else
                            for (l = 0, d = (i = Object.keys(a)).length; l < d; l++) {
                                var c = i[l];
                                "object" != typeof r.$uidMap[c] && delete a[c]
                            }
                    }
                    var u = [];
                    for (var c in a) u.push(a[c]);
                    var m = this._createCalculateTfIdf();
                    return u.sort((function(a, s) {
                        return m(e, s, t) - m(e, a, t)
                    }))
                }, t._createCalculateIdf = function() {
                    var e = this._tokenMap,
                        t = this._tokenToIdfCache;
                    return function(a, s) {
                        if (!t[a]) {
                            var n = void 0 !== e[a] ? e[a].$numDocumentOccurrences : 0;
                            t[a] = 1 + Math.log(s.length / (1 + n))
                        }
                        return t[a]
                    }
                }, t._createCalculateTfIdf = function() {
                    var e = this._tokenMap,
                        t = this._uidFieldName,
                        a = this._createCalculateIdf();
                    return function(s, n, i) {
                        for (var o = 0, r = 0, l = s.length; r < l; ++r) {
                            var d, c = s[r],
                                u = a(c, i);
                            u === 1 / 0 && (u = 0), d = t instanceof Array ? n && $b(n, t) : n && n[t], o += (void 0 !== e[c] && void 0 !== e[c].$uidMap[d] ? e[c].$uidMap[d].$numTokenOccurrences : 0) * u
                        }
                        return o
                    }
                }, e
            }(),
            Ab = /[^a-zа-яё0-9\-']+/i,
            Db = function() {
                function e() {}
                return e.prototype.tokenize = function(e) {
                    return e.split(Ab).filter((function(e) {
                        return e
                    }))
                }, e
            }();

        function Hb(e, t) {
            for (var a = 0; a < t.length; a++) {
                var s = t[a];
                s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, s.key, s)
            }
        }
        var Ub = function() {
            function e(e) {
                if (!e) throw Error("js-search requires a uid field name constructor parameter");
                this._uidFieldName = e, this._indexStrategy = new Lb, this._searchIndex = new jb(e), this._sanitizer = new Mb, this._tokenizer = new Db, this._documents = [], this._searchableFields = []
            }
            var t, a, s = e.prototype;
            return s.addDocument = function(e) {
                this.addDocuments([e])
            }, s.addDocuments = function(e) {
                this._documents = this._documents.concat(e), this.indexDocuments_(e, this._searchableFields)
            }, s.addIndex = function(e) {
                this._searchableFields.push(e), this.indexDocuments_(this._documents, [e])
            }, s.search = function(e) {
                var t = this._tokenizer.tokenize(this._sanitizer.sanitize(e));
                return this._searchIndex.search(t, this._documents)
            }, s.indexDocuments_ = function(e, t) {
                this._initialized = !0;
                for (var a = this._indexStrategy, s = this._sanitizer, n = this._searchIndex, i = this._tokenizer, o = this._uidFieldName, r = 0, l = e.length; r < l; r++) {
                    var d, c = e[r];
                    d = o instanceof Array ? $b(c, o) : c[o];
                    for (var u = 0, m = t.length; u < m; u++) {
                        var p, _ = t[u];
                        if (null != (p = _ instanceof Array ? $b(c, _) : c[_]) && "string" != typeof p && p.toString && (p = p.toString()), "string" == typeof p)
                            for (var w = i.tokenize(s.sanitize(p)), v = 0, h = w.length; v < h; v++)
                                for (var f = w[v], g = a.expandToken(f), y = 0, b = g.length; y < b; y++) {
                                    var k = g[y];
                                    n.indexDocument(k, d, c)
                                }
                    }
                }
            }, t = e, (a = [{
                key: "indexStrategy",
                set: function(e) {
                    if (this._initialized) throw Error("IIndexStrategy cannot be set after initialization");
                    this._indexStrategy = e
                },
                get: function() {
                    return this._indexStrategy
                }
            }, {
                key: "sanitizer",
                set: function(e) {
                    if (this._initialized) throw Error("ISanitizer cannot be set after initialization");
                    this._sanitizer = e
                },
                get: function() {
                    return this._sanitizer
                }
            }, {
                key: "searchIndex",
                set: function(e) {
                    if (this._initialized) throw Error("ISearchIndex cannot be set after initialization");
                    this._searchIndex = e
                },
                get: function() {
                    return this._searchIndex
                }
            }, {
                key: "tokenizer",
                set: function(e) {
                    if (this._initialized) throw Error("ITokenizer cannot be set after initialization");
                    this._tokenizer = e
                },
                get: function() {
                    return this._tokenizer
                }
            }]) && Hb(t.prototype, a), e
        }();

        function Fb(e, t, a, s) {
            const n = e * (Math.PI / 180),
                i = t * (Math.PI / 180);
            return {
                x: 0,
                y: 0,
                wobble: 10 * s(),
                wobbleSpeed: .1 + .1 * s(),
                velocity: .5 * a + s() * a,
                angle2D: -n + (.5 * i - s() * i),
                angle3D: -Math.PI / 4 + s() * (Math.PI / 2),
                tiltAngle: s() * Math.PI,
                tiltAngleSpeed: .1 + .3 * s()
            }
        }
        const Jb = {
            angle: 90,
            spread: 45,
            startVelocity: 45,
            elementCount: 50,
            width: "10px",
            height: "10px",
            colors: ["#a864fd", "#29cdff", "#78ff44", "#ff718d", "#fdff6a"],
            duration: 3e3,
            stagger: 0,
            dragFriction: .1,
            random: Math.random
        };

        function Rb(e, t = {}) {
            const {
                elementCount: a,
                colors: s,
                width: n,
                height: i,
                angle: o,
                spread: r,
                startVelocity: l,
                decay: d,
                dragFriction: c,
                duration: u,
                stagger: m,
                random: p
            } = Object.assign({}, Jb, function(e) {
                return !e.stagger && e.delay && (e.stagger = e.delay), e
            }(t)), _ = function(e, t, a, s, n) {
                return Array.from({
                    length: t
                }).map(((t, i) => {
                    const o = document.createElement("div"),
                        r = a[i % a.length];
                    return o.style["background-color"] = r, o.style.width = s, o.style.height = n, o.style.position = "absolute", o.style.willChange = "transform, opacity", o.style.visibility = "hidden", e && e.appendChild(o), o
                }))
            }(e, a, s, n, i), w = _.map((e => ({
                element: e,
                physics: Fb(o, r, l, p)
            })));
            return function(e, t, a, s, n, i) {
                let o;
                return new Promise((r => {
                    requestAnimationFrame((function l(d) {
                        o || (o = d);
                        const c = d - o,
                            u = o === d ? 0 : (d - o) / n;
                        t.slice(0, Math.ceil(c / i)).forEach((e => {
                            ! function(e, t, a, s) {
                                e.physics.x += Math.cos(e.physics.angle2D) * e.physics.velocity, e.physics.y += Math.sin(e.physics.angle2D) * e.physics.velocity, e.physics.z += Math.sin(e.physics.angle3D) * e.physics.velocity, e.physics.wobble += e.physics.wobbleSpeed, s ? e.physics.velocity *= s : e.physics.velocity -= e.physics.velocity * a, e.physics.y += 3, e.physics.tiltAngle += e.physics.tiltAngleSpeed;
                                const {
                                    x: n,
                                    y: i,
                                    tiltAngle: o,
                                    wobble: r
                                } = e.physics, l = `translate3d(${n+10*Math.cos(r)}px, ${i+10*Math.sin(r)}px, 0) rotate3d(1, 1, 1, ${o}rad)`;
                                e.element.style.visibility = "visible", e.element.style.transform = l, e.element.style.opacity = 1 - t
                            }(e, u, a, s)
                        })), d - o < n ? requestAnimationFrame(l) : (t.forEach((t => {
                            if (e && t.element.parentNode === e) return e.removeChild(t.element)
                        })), r())
                    }))
                }))
            }(e, w, c, d, u, m)
        }
        const {
            createElement: Bb,
            render: Vb,
            useState: Xb,
            useEffect: Wb,
            Fragment: Yb,
            useRef: Qb
        } = wp.element, {
            dispatch: Kb,
            select: Gb
        } = wp.data, Zb = e => {
            const [t, a] = Xb(!1), [s, n] = Xb(!1), [i, o] = Xb(!1), r = Qb(null), l = Qb(null), [d, c] = Xb(!1), [u, m] = Xb(!1), [p, _] = Xb(""), [w, v] = Xb(!1), [h, f] = Xb(e.course), [g, y] = Xb({}), [b, k] = Xb({
                prev: 0,
                next: 0
            }), [x, N] = Xb(!1), [q, O] = Xb(!1), [I, C] = Xb({}), [S, P] = Xb(!1), [E, z] = Xb(!0), [T, L] = Xb(!0), [M, $] = Xb([]), [j, A] = Xb(null), [D, H] = Xb(!1), [U, F] = Xb(null), [J, R] = Xb(null), [B, V] = Xb([]), [X, W] = Xb([]), [Y, Q] = Xb([]), [K, G] = Xb(!1);
            let Z = Gb("vibebp").getUser();
            Z.token = Gb("vibebp").getToken(), Wb((() => {
                T ? document.querySelector(".vibebp_myprofile") && document.querySelector(".vibebp_myprofile").classList.add("popup_active") : document.querySelector(".vibebp_myprofile") && document.querySelector(".vibebp_myprofile").classList.remove("popup_active")
            }), [T]), Wb((() => {
                e.hasOwnProperty("download") && e.download && localforage.getItem("coursestatus_" + e.course_id).then((t => {
                    if (t && t.length) try {
                        t = JSON.parse(t), W(t)
                    } catch (e) {
                        console.log(e)
                    } - 1 == B.indexOf(e.course_id) && V([...B, e.course_id])
                })), f(e.course)
            }), [e.course]), Wb((() => {
                h && (e.hasOwnProperty("download") && e.download || te())
            }), [h]), Wb((() => {
                d && (async () => {
                    if (!navigator.onLine) return Kb("vibebp").addNotification({
                        text: window.wplms_course_data.translations.could_not_refresh
                    }), await pe(1e3), void c(!1);
                    g.hasOwnProperty("courseitems") && g.courseitems && g.courseitems.length ? localforage.removeItem(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}`).then((() => {
                        g.courseitems.map(((e, t) => {
                            let a = _e(e);
                            localforage.removeItem(a).then((async () => {
                                e.hasOwnProperty("id") && 0 != e.id && await Oe(`${window.wplms_course_data.api_url}/user/unitcomments/${e.id}`), t == g.courseitems.length - 1 && te(!0)
                            }))
                        }))
                    })) : localforage.removeItem(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}`).then((() => {
                        te(!0)
                    }))
                })()
            }), [d]), Wb((() => {
                (async () => {
                    if (await pe(500), document.querySelector(".course_package_wrapper") && !d) {
                        let e = new Draggabilly(document.querySelector(".course_package_wrapper"), {
                            axis: "y",
                            handle: ".course_package_header"
                        });
                        e.on("dragStart", (() => {})), e.on("dragMove", ((e, t, a) => {
                            a.y >= 90 && c(!0)
                        })), e.on("dragEnd", (() => {
                            e.setPosition(0, 0)
                        }))
                    } else if (document.querySelector(".course_content") && !d) {
                        let e = new Draggabilly(document.querySelector(".course_content"), {
                            axis: "y",
                            handle: ".course_content_header"
                        });
                        e.on("dragStart", (() => {})), e.on("dragMove", ((e, t, a) => {
                            a.y >= 90 && c(!0)
                        })), e.on("dragEnd", (() => {
                            e.setPosition(0, 0)
                        }))
                    }
                })()
            }), [d, g]), Wb((() => {
                B.length && localforage.removeItem(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}`).then((() => {
                    te()
                }))
            }), [B]), Wb((() => {
                if (X.length && Object.keys(g).length && g.hasOwnProperty("courseitems") && g.courseitems && g.courseitems.length) {
                    let t = "coursestatus_" + e.course_id;
                    localforage.setItem(t, JSON.stringify(X));
                    let a = J;
                    for (let e = J + 1; e < g.courseitems.length; e++) void 0 !== g.courseitems[e] && g.courseitems[e] && 0 != g.courseitems[e].id && a <= J && (a = e);
                    ce(a, {
                        ...g
                    }), g.courseitems[J].downloaded = 1;
                    let s = 0,
                        n = 0,
                        i = 0;
                    g.courseitems.map(((e, t) => {
                        e.downloaded && s++, e.id && i++
                    })), n = s / i, n = Math.round(100 * n), e.update({
                        progress: n,
                        index: e.index
                    }, "progresschanged")
                }
            }), [X]), Wb((() => {
                localforage.setItem("coursestatus_curriculum_item_video_urls_" + e.course_id, JSON.stringify(Y))
            }), [Y]);
            const ee = e => {
                if (e.detail.hasOwnProperty("action") && (console.log(e.detail), "unitfinished" == e.detail.action)) {
                    let t = e.detail.coursestatus.courseitems.findIndex((t => t.id == e.detail.id));
                    t > -1 && ye(t)
                }
            };
            Wb((() => (document.addEventListener("custom_unit_action", ee), () => {
                document.removeEventListener("custom_unit_action", ee)
            }))), Wb((() => (window.innerWidth < 480 && O(!0), document.addEventListener("wplms_change_coursestatus", (e => {
                let t = e.detail.coursestatus;
                n(!0), y(t), n(!1)
            })), document.addEventListener("custom_quiz_action", (t => {
                if (t.detail.hasOwnProperty("action")) {
                    console.log(t.detail);
                    let a = t.detail.coursestatus;
                    if ("quizsubmitted" == t.detail.action) {
                        let s = a.courseitems.findIndex((e => e.id == t.detail.id));
                        if (s > -1) {
                            if (a.courseitems[s].hasOwnProperty("status") && parseInt(a.courseitems[s].status)) return a.courseitems[s].progressbar = 100, !1;
                            a.courseitems[s].status = 1, a.courseitems[s].progressbar = 100;
                            let t = 0,
                                n = 0,
                                i = 0;
                            a.courseitems.map(((e, a) => {
                                e.status && t++, e.id && i++
                            })), n = t / i, n = Math.round(100 * n), e.update({
                                progress: n,
                                index: e.index
                            }, "progresschanged"), y(a), a.courseitems[s] && "unit" == a.courseitems[s].type ? fetch(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}/item/${a.courseitems[s].id}/markcomplete?post`, {
                                method: "post",
                                headers: window.vibebp.xnonce ? {
                                    "X-WP-Nonce": window.vibebp.xnonce
                                } : {},
                                body: JSON.stringify({
                                    token: Z.token,
                                    progress: n
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((t => {
                                t && (t.status ? (Kb("vibebp").addNotification({
                                    icon: t.icon,
                                    text: t.message
                                }), n && n >= 100 && re(), document.dispatchEvent(new CustomEvent("course_item_completed", {
                                    detail: {
                                        course_id: e.course_id,
                                        item_id: a.courseitems[s].id
                                    }
                                }))) : t.hasOwnProperty("message") && Kb("vibebp").addNotification({
                                    text: t.message
                                }), ne(a, J))
                            })).catch((e => {
                                console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                })
                            })) : (a.courseitems[s].status = 1, y(a), n && n >= 100 && re(), document.dispatchEvent(new CustomEvent("course_item_completed", {
                                detail: {
                                    course_id: e.course_id,
                                    item_id: a.courseitems[s].id
                                }
                            }))), ne(a, s)
                        }
                    }
                    if ("retake_quiz" == t.detail.action) {
                        let t = a.current_unit_key;
                        if (a.courseitems[t] && a.courseitems[t].status) {
                            a.courseitems[t].status = 0;
                            let s = 0,
                                n = 0,
                                i = 0;
                            a.courseitems.map(((e, t) => {
                                e.status && s++, e.id && i++
                            })), n = s / i, n = Math.round(100 * n), e.update({
                                progress: n,
                                index: e.index
                            }, "progresschanged"), y(a), ne(a, t), new CustomEvent("item_retake", {
                                detail: {
                                    coursestatus: {
                                        ...g
                                    },
                                    item_id: g.courseitems[t].id,
                                    course_id: e.course_id
                                }
                            })
                        }
                    }
                }
            })), e.hasOwnProperty("download") && e.download || (document.querySelector("body").classList.add("course_status_fullscreen"), document.querySelector("body").classList.add("wplms_course_status")), window.wplms_course_data.disable_contextmenu && document.addEventListener("contextmenu", ie, !1), () => {
                if (document.querySelector("body").classList.remove("wplms_course_status"), document.querySelector("body").classList.remove("course_status_fullscreen"), document.querySelector("body").classList.remove("course_status_loaded"), B.indexOf(e.course_id) > -1) {
                    let t = [...B];
                    t.splice(B.indexOf(e.course_id), 1), V(t)
                }
                window.wplms_course_data.disable_contextmenu && document.removeEventListener("contextmenu", ie);
                var t = new CustomEvent("course_status_left", {
                    detail: {
                        coursestatus: g,
                        course_id: e.course_id
                    }
                });
                document.dispatchEvent(t)
            })), []), Wb((() => {
                let e = {
                    ...g
                };
                if (p && p.length > 3) {
                    if (e && e.courseitems) {
                        var t = new Ub("key");
                        t.addIndex("title"), t.addIndex("content"), t.addDocuments(e.courseitems);
                        var a = t.search(p);
                        e.filtered_items = a, e.keyword = p, y(e), a && a.length && ce(a[0].key, e)
                    }
                } else e.filtered_items = [], e.keyword = "", y(e)
            }), [p]);
            const te = t => {
                t || a(!0), m(!1), oe(e.course_id), fetch(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}`, {
                    method: "post",
                    headers: window.vibebp.xnonce ? {
                        "X-WP-Nonce": window.vibebp.xnonce
                    } : {},
                    body: JSON.stringify({
                        token: Z.token
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((async s => {
                    if (s) {
                        s.hasOwnProperty("error_code") && (Kb("vibebp").addNotification({
                            icon: s.icon,
                            text: s.hasOwnProperty("error_message") && s.error_message.length ? s.error_message : window.wplms_course_data.translations.error
                        }), e.back(!0));
                        let o = null,
                            r = [],
                            l = null;
                        if (s.courseitems && s.courseitems.length)
                            if (s.courseitems.map(((t, a) => {
                                    t.status && (t.progressbar = 100, L(!1)), t.hasOwnProperty("id") && 0 != s.courseitems[a].id && (null === o && (o = a, l = a), r.push(_e(s.courseitems[a])), e.hasOwnProperty("startUnit") && e.startUnit && parseInt(s.courseitems[a].id) === parseInt(e.startUnit) && (o = a))
                                })), document.querySelector("body").classList.contains("course_status_loaded") || document.querySelector("body").classList.add("course_status_loaded"), e.hasOwnProperty("download") && e.download && B.indexOf(e.course_id) > -1) {
                                if (localforage.setItem("coursestatus_curriculum_item_urls_" + e.course_id, JSON.stringify(r)), e.hasOwnProperty("startUnit") && e.startUnit && l !== o)
                                    for (var n = 0; n < o; n++) void 0 !== s.courseitems[n] && s.courseitems[n] && 0 != s.courseitems[n].id && (s.courseitems[n].downloaded = 1);
                                s.current_unit_key = o, y(s), R(o), ce(o, s), ve(s.current_unit_key, s)
                            } else y(s), R(s.current_unit_key), ce(s.current_unit_key, s), ve(s.current_unit_key, s);
                        if (s.hasOwnProperty("package") && s.package.length)
                            if (m(!0), s.hasOwnProperty("package_details") && s.package_details && s.package_details.hasOwnProperty("package_type") && "xapi" == s.package_details.package_type) {
                                let t = s.package_details.path;
                                t += "?endpoint=" + encodeURIComponent(window.wplms_course_data.xapi_endpoint + "/" + e.course_id), t += "&auth=" + encodeURIComponent("Basic " + Z.token), t += "&actor=" + encodeURIComponent(JSON.stringify({
                                    objectType: "Agent",
                                    mbox: Z.email,
                                    name: Z.displayname
                                })), y({
                                    package: '<div class="iframecontent"><iframe src="' + t + '" width="100%" allowFullScreen="true" webkitallowfullscreen="true" mozallowfullscreen="true"></iframe></div>'
                                })
                            } else window.scorm_page_type = "course", window.scorm_wplms_data = {}, window.scorm_wplms_data.user_email = Z.email, window.scorm_wplms_data.user_name = Z.username, window.scorm_wplms_data.token = Z.token, window.scorm_wplms_data.course_id = e.course_id, window.is_take_course = !0, window.scorm_wplms_data.type = "course", y({
                                package: s.package
                            }), s.hasOwnProperty("package_type") && s.package_type && "1.1" == s.package_type && setTimeout((() => {
                                var e = new CustomEvent("unit_content_loaded", {
                                    detail: {
                                        coursestatus: {
                                            package: s.package
                                        }
                                    }
                                });
                                document.dispatchEvent(e)
                            }), 200);
                        var i = new CustomEvent("course_status_loaded", {
                            detail: {
                                coursestatus: s,
                                course_id: e.course_id
                            }
                        });
                        document.dispatchEvent(i), t || a(!1)
                    }
                    t && (await pe(500), c(!1))
                })).catch((e => {
                    c(!1), console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))
            };
            Wb((() => {
                if (g) return document.addEventListener("course_item_completed", ae), () => {
                    document.removeEventListener("course_item_completed", ae)
                }
            }), [g]);
            const ae = e => {
                    e.detail && e.detail.course_id && e.detail.item_id && se(e.detail.course_id, e.detail.item_id)
                },
                se = (e, t) => {
                    g.hasOwnProperty("gamification") && g.gamification.type && "curriculum" == g.gamification.type && g.gamification.value && g.gamification.value.hasOwnProperty(t) && fetch(`${window.wplms_course_data.api_url}/user/coursestatus/${e}/item/${t}/assignbadges?post`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            token: Z.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status && (e.hasOwnProperty("message") && Kb("vibebp").addNotification({
                            iconUrl: window.wplms_course_data.coin_image,
                            backgroundColor: "var(--success)",
                            textColor: "var(--gray-dark)",
                            text: e.message
                        }), e.hasOwnProperty("badges") && Array.isArray(e.badges) && e.badges.length && (G(!0), setTimeout((() => {
                            G(!1)
                        }), 5e3), iziToast ? e.badges.map((e => {
                            iziToast.show({
                                message: `${window.wplms_course_data.translations.you_have_got_badge} ${e.name}`,
                                image: e.image,
                                position: "topCenter"
                            })
                        })) : e.badges.map((e => {
                            Kb("vibebp").addNotification({
                                text: `${window.wplms_course_data.translations.you_have_got_badge} ${e.name}`
                            })
                        }))))
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                },
                ne = (t, a) => {
                    "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}`).then((s => {
                        s && s.length && (s = JSON.parse(s)).hasOwnProperty("courseitems") && (s.courseitems = t.courseitems, s.current_unit_key = a, localforage.setItem(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}`, JSON.stringify(s)))
                    }))
                },
                ie = e => (console.log("You've tried to open context menu"), e.preventDefault(), !1),
                oe = e => {
                    window.wplms_course_data.gamification && window.wplms_course_data.gamification && fetch(`${window.wplms_course_data.api_url}/user/coursestatus/${e}/gamification`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            token: Z.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status && e.active && e.gamification && (y((t => ({
                            ...t,
                            gamification: e.gamification
                        }))), Kb("vibebp").addNotification({
                            text: e.message
                        }))
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                },
                re = () => {
                    e.hasOwnProperty("download") && e.download || g.hasOwnProperty("auto_finish") && g.auto_finish && h.user_progress >= 100 && fetch(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}/checkcomplete`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            token: Z.token,
                            course: g,
                            course_id: e.course
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e && e.status && ke(!0)
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                },
                le = e => {
                    let t = {
                        ...g
                    };
                    t && t.courseitems && t.courseitems[J] && "unit" == t.courseitems[J].type && (t.courseitems[J].hasOwnProperty("progressbar") || (t.courseitems[J].progressbar = 0), e > 100 && (e = 100), t.courseitems[J].progressbar = e, y(t))
                },
                de = (e, t) => {
                    let a = document.scrollingElement || document.documentElement;
                    document.querySelector("body").classList && document.querySelector("body").classList.length && document.querySelector("body").classList.contains("course_status_fullscreen") && r.current && (e = 0, a = r.current);
                    const s = a.scrollTop,
                        n = e - s,
                        i = +new Date,
                        o = function() {
                            const r = +new Date - i;
                            var l, d, c;
                            a.scrollTop = parseInt((l = r, d = s, c = n, (l /= t / 2) < 1 ? c / 2 * l * l + d : -c / 2 * (--l * (l - 2) - 1) + d)), r < t ? requestAnimationFrame(o) : a.scrollTop = e
                        };
                    o()
                },
                ce = async (t, a = null, s = null) => {
                    if (null == a && (a = {
                            ...g
                        }), a.hasOwnProperty("lock") && a.lock && (!e.hasOwnProperty("download") || !e.download) && a.courseitems && a.courseitems.length)
                        for (let e = 0; e < t; e++)
                            if ("section" != a.courseitems[e].type && !a.courseitems[e].status) return !1;
                    if (a.courseitems[t].id && "unit" == a.courseitems[t].type)
                        if (s || !a.courseitems[t].content || a.courseitems[t].content.length < 3 || !a.courseitems[t].meta.hasOwnProperty("access") || !a.courseitems[t].meta.access || a.courseitems[t].meta.hasOwnProperty("no_cache") && a.courseitems[t].meta.no_cache) {
                            n(!0), U && U.abort();
                            let i = {},
                                o = new AbortController;
                            U && (i = {
                                signal: o.signal
                            }), F(o), a.current_unit_key = t, R(t), y(a), ve(t, a);
                            let l = `${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}/item/${a.courseitems[t].id}`;
                            (s || a.courseitems[t].meta.hasOwnProperty("no_cache") && a.courseitems[t].meta.no_cache) && (l += "?force"), fetch(l, {
                                method: "post",
                                headers: window.vibebp.xnonce ? {
                                    "X-WP-Nonce": window.vibebp.xnonce
                                } : {},
                                ...i,
                                body: JSON.stringify({
                                    token: Z.token
                                })
                            }).then((e => e.json())).then((async s => {
                                if (F(null), s) {
                                    a.courseitems[t].content = s.content, a.courseitems[t].meta = s.meta;
                                    let o = 1;
                                    Array.isArray(s.scripts) && s.scripts.map((e => {
                                        if (!document.getElementById(e.key)) {
                                            let t = document.createElement("script");
                                            t.src = e.src, t.id = e.key, document.body.appendChild(t), t.onload = () => {
                                                o++, console.log("loaded"), o == s.scripts.length && document.body.dispatchEvent(new Event("post-load"))
                                            }
                                        }
                                    })), y(a), ne(a, t), n(!1), document.querySelector(".course_status") && document.querySelector(".course_status").scroll({
                                        top: r.current.getBoundingClientRect().top,
                                        left: 0,
                                        behavior: "smooth"
                                    }), s.meta.hasOwnProperty("scorm_type") && s.meta.scorm_type && setTimeout((() => {
                                        var e = new CustomEvent("unit_content_loaded", {
                                            detail: {
                                                coursestatus: a
                                            }
                                        });
                                        document.dispatchEvent(e)
                                    }), 200);
                                    var i = new CustomEvent("unit_loaded", {
                                        detail: {
                                            coursestatus: a,
                                            course: e.course_id,
                                            user: Gb("vibebp").getUser(),
                                            currentUnitKey: t
                                        }
                                    });
                                    if (document.dispatchEvent(i), document.dispatchEvent(new Event("VibeBP_Editor_Content")), e.hasOwnProperty("download") && e.download && B.indexOf(e.course_id) > -1) {
                                        await pe(4e3), await ue(a.courseitems[t]);
                                        let e = _e(a.courseitems[t]);
                                        W([...X, e])
                                    }
                                }
                            })).catch((e => {
                                "AbortError" === e.name ? console.log("Fetch aborted") : (F(null), n(!1), console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                }))
                            }))
                        } else {
                            R(t), a.current_unit_key = t, y(a), ne(a, t), ve(t, a), a.hasOwnProperty("courseitems") && a.courseitems[t] && a.courseitems[t].hasOwnProperty("meta") && a.courseitems[t].meta.hasOwnProperty("scorm_type") && a.courseitems[t].meta.scorm_type && setTimeout((() => {
                                var e = new CustomEvent("unit_content_loaded", {
                                    detail: {
                                        coursestatus: a
                                    }
                                });
                                document.dispatchEvent(e)
                            }), 200), document.querySelector(".course_status") && document.querySelector(".course_status").scroll({
                                top: r.current.getBoundingClientRect().top,
                                left: 0,
                                behavior: "smooth"
                            });
                            var i = new CustomEvent("unit_loaded", {
                                detail: {
                                    coursestatus: a,
                                    course: e.course_id,
                                    currentUnitKey: t,
                                    user: Gb("vibebp").getUser()
                                }
                            });
                            document.dispatchEvent(i), document.dispatchEvent(new Event("VibeBP_Editor_Content")), e.hasOwnProperty("download") && e.download || r.current && window.hasOwnProperty("innerWidth") && window.innerWidth > 768 && de(r.current.scrollTop, 800)
                        }
                    else {
                        if (n(!0), R(t), a.current_unit_key = t, y(a), ve(t, a), n(!1), ne(a, t), e.hasOwnProperty("download") && e.download || r.current && window.hasOwnProperty("innerWidth") && window.innerWidth > 768 && de(r.current.scrollTop, 800), e.hasOwnProperty("download") && e.download && B.indexOf(e.course_id) > -1) {
                            await pe(4e3), await ue(a.courseitems[t]);
                            let e = _e(a.courseitems[t]);
                            W([...X, e])
                        }
                        document.querySelector(".course_status") && document.querySelector(".course_status").scroll({
                            top: r.current.getBoundingClientRect().top,
                            left: 0,
                            behavior: "smooth"
                        })
                    }
                    o(!1)
                }, ue = async e => new Promise((async (t, a) => {
                    if (e.meta.hasOwnProperty("video"))
                        if ("object" == typeof e.meta.video && "video" == e.meta.video.type) await me(e.meta.video.url), t();
                        else if (Array.isArray(e.meta.video) && e.meta.video.length)
                        for (let a = 0; a < e.meta.video.length; a++) console.log(e.meta.video[a]), await me(e.meta.video[a]), e.meta.video.length - 1 === a && t();
                    else t();
                    else if (e.meta.hasOwnProperty("audio"))
                        if ("object" == typeof e.meta.audio && "audio" == e.meta.audio.type) await me(e.meta.audio.url), t();
                        else if (Array.isArray(e.meta.audio) && e.meta.audio.length)
                        for (let a = 0; a < e.meta.audio.length; a++) await me(e.meta.audio[a]), e.meta.audio.length - 1 === a && t();
                    else t();
                    else t()
                })), me = async (t, a = null) => new Promise((async (s, n) => {
                    fetch(t).then((e => e.blob())).then((e => {
                        a && (t = a), localforage.setItem(t, e), Y.indexOf(t) < 0 && Q([...Y, t]), s(t)
                    })).catch((t => {
                        console.log(t), Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.some_error_downloading_video
                        }), e.update("", "pause")
                    }))
                })), pe = e => new Promise((t => setTimeout(t, e))), _e = t => {
                    let a = "";
                    return a = "unit" == t.type ? `${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}/item/${t.id}` : "quiz" == t.type ? `${window.wplms_course_data.api_url}/user/quiz/${t.id}` : "wplms-assignment" == t.type ? `${window.wplms_course_data.api_url}/user/content/assignmentId/${t.id}` : `${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}/item/${t.id}`, a
                }, we = t => {
                    let a = J;
                    if ("prev" == t) {
                        for (let e = a - 1; e >= 0; e--)
                            if (g.courseitems[e] && 0 != g.courseitems[e].id) {
                                a = g.courseitems[e].key;
                                break
                            }
                    } else
                        for (let t = a + 1; t < g.courseitems.length; t++)
                            if (g.courseitems[t] && 0 != g.courseitems[t].id) {
                                a = g.courseitems[t].key, 1 == e.course.user_status && e.update({
                                    index: e.index,
                                    user_status: 2
                                }, "statuschanged");
                                break
                            } ce(a)
                }, ve = (e, t = null) => {
                    null === t && (t = g);
                    let a = {
                        prev: 0,
                        next: 0
                    };
                    for (let s = e - 1; s >= 0; s--)
                        if (t.courseitems[s] && 0 != t.courseitems[s].id) {
                            a.prev = 1;
                            break
                        } for (let s = e + 1; s < t.courseitems.length; s++)
                        if (t.courseitems[s] && 0 != t.courseitems[s].id) {
                            a.next = 1;
                            break
                        } k(a)
                }, he = (t = null, a = null) => {
                    if ("quizsubmitted" == t && ye(), "retake_quiz" == t) {
                        let t = {
                            ...g
                        };
                        if (t.courseitems[J] && t.courseitems[J].status) {
                            t.courseitems[J].status = 0, t.courseitems[J].user_marks = 0, t.courseitems[J].total_marks = 0;
                            let a = 0,
                                n = 0,
                                i = 0;
                            t.courseitems.map(((e, t) => {
                                e.status && a++, e.id && i++
                            })), n = a / i, n = Math.round(100 * n), e.update({
                                progress: n,
                                index: e.index
                            }, "progresschanged"), y(t), ne(t, J);
                            var s = new CustomEvent("item_retake", {
                                detail: {
                                    coursestatus: {
                                        ...g
                                    },
                                    item_id: g.courseitems[J].id,
                                    course_id: e.course_id
                                }
                            });
                            document.dispatchEvent(s)
                        }
                    }
                    if ("update_quiz_marks" == t) {
                        let e = {
                                ...g
                            },
                            t = {
                                ...e.courseitems[J]
                            };
                        t.hasOwnProperty("user_marks") || (t.user_marks = 0), t.hasOwnProperty("total_marks") || (t.total_marks = 0), t.user_marks += parseInt(a.user_marks), t.total_marks += parseInt(a.total_marks), e.courseitems[J] = t, y(e)
                    }
                }, fe = (t, a) => {
                    let s = {
                        ...g
                    };
                    "submitassignment" == a && (t.hasOwnProperty("unitIndex") || (s.courseitems[J].status = 1, y(s), ne(s, J), document.dispatchEvent(new CustomEvent("course_item_completed", {
                        detail: {
                            course_id: e.course_id,
                            item_id: g.courseitems[J].id,
                            courseStatus: {
                                ...g
                            }
                        }
                    })))), "retookassignment" == a && (t.hasOwnProperty("unitIndex") || (s.courseitems[J].status = 0, y(s), ne(s, J), document.dispatchEvent(new CustomEvent("item_retake", {
                        detail: {
                            course_id: e.course_id,
                            item_id: g.courseitems[J].id,
                            courseStatus: {
                                ...g
                            }
                        }
                    }))))
                }, ge = e => Rb(e, {
                    colors: ["#a864fd", "#29cdff", "#78ff44", "#ff718d", "#fdff6a"],
                    angle: 90,
                    spread: 90,
                    startVelocity: 45,
                    elementCount: 100,
                    dragFriction: .1,
                    duration: 5e3,
                    stagger: 2,
                    width: "12px",
                    height: "12px"
                }), ye = (t = null, a = null) => new Promise((s => {
                    e.hasOwnProperty("download") && e.download && s();
                    let n = {
                        ...g
                    };
                    if (null == t && (t = J), n.courseitems[t].hasOwnProperty("status") && parseInt(n.courseitems[t].status)) return n.courseitems[t].progressbar = 100, s(), !1;
                    n.courseitems[t].status = 1, n.courseitems[t].progressbar = 100;
                    let i = 0,
                        o = 0,
                        r = 0;
                    n.courseitems.map(((e, t) => {
                        e.status && i++, e.id && r++
                    })), o = i / r, o = Math.round(100 * o), e.update({
                        progress: o,
                        index: e.index
                    }, "progresschanged"), n.courseitems[t] && "unit" == n.courseitems[t].type ? fetch(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}/item/${n.courseitems[t].id}/markcomplete?post`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            token: Z.token,
                            progress: o
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((i => {
                        i && (i.status && (o && o >= 100 && null == a && re(), document.dispatchEvent(new CustomEvent("course_item_completed", {
                            detail: {
                                course_id: e.course_id,
                                item_id: n.courseitems[t].id,
                                courseStatus: n
                            }
                        }))), Kb("vibebp").addNotification({
                            icon: i.icon,
                            text: i.message
                        }), y(n), ne(n, J), s())
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })) : (n.courseitems[t].status = 1, y(n), o && o >= 100 && null == a && re(), document.dispatchEvent(new CustomEvent("course_item_completed", {
                        detail: {
                            course_id: e.course_id,
                            item_id: n.courseitems[t].id,
                            courseStatus: n
                        }
                    })), y(n), ne(n, t), s())
                })), be = () => {
                    if (g.hasOwnProperty("package") && g.package || ye(), P(!0), H(!0), !g.hasOwnProperty("comments_open") || !g.comments_open) return ke(!0), !1;
                    I.hasOwnProperty("comment_ID") || fetch(`${window.wplms_course_data.api_url}/user/getreview/${e.course_id}`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            token: Z.token,
                            course_id: e.course_id
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e && e.comment_ID && C(e), z(!1)
                    })).catch((e => {
                        z(!1), console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }, ke = (t = null) => {
                    if (!t) {
                        if (!(I && I.hasOwnProperty("title") && I.hasOwnProperty("review") && I.hasOwnProperty("rating") && I.title.length > 3 && I.review.length > 3 && I.rating >= 1)) return alert(window.wplms_course_data.translations.please_check_review_form), z(!1), !1;
                        z(!0), I.comment_post_ID = e.course_id, I.course_id = e.course_id, I.token = Z.token, fetch(`${window.wplms_course_data.api_url}/updatecourse/addreview?post`, {
                            method: "post",
                            headers: window.vibebp.xnonce ? {
                                "X-WP-Nonce": window.vibebp.xnonce
                            } : {},
                            body: JSON.stringify(I)
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            if (!t) return alert(window.wplms_course_data.translations.error_review_form), z(!1), !1;
                            if (t.status) z(!1), t.hasOwnProperty("comment_id") && t.comment_id && "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(`${window.wplms_course_data.api_url}/user/getreview/${e.course_id}`).then((a => {
                                a && a.length && "object" == typeof(a = JSON.parse(a)) && (a.comment_ID = t.comment_id, a.rating = I.rating, a.review = I.review, a.title = I.title, localforage.setItem(`${window.wplms_course_data.api_url}/user/getreview/${e.course_id}`, JSON.stringify(a)))
                            }));
                            else if (t.message) return alert(t.message), z(!1), !1
                        })).catch((e => {
                            z(!1), console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    }
                    z(!0), fetch(`${window.wplms_course_data.api_url}/user/finishcourse?post`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify({
                            course_id: e.course_id,
                            token: Z.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        if (t) {
                            if (t.status && (P(!1), z(!1), t.finished)) {
                                if (A(t.finished), t.finished.hasOwnProperty("course_status")) {
                                    e.update({
                                        index: e.index,
                                        user_status: t.finished.course_status
                                    }, "statuschanged");
                                    let a = {
                                        ...g
                                    };
                                    a.course_status = t.finished.course_status, y(a)
                                }
                                t.finished.status && xe().then((() => {
                                    e.update({
                                        progress: 100,
                                        index: e.index
                                    }, "progresschanged"), "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}`).then((t => {
                                        t && t.length && (t = g, localforage.setItem(`${window.wplms_course_data.api_url}/user/coursestatus/${e.course_id}`, JSON.stringify(t)))
                                    }))
                                }))
                            }
                        } else Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_finishing_course
                        }), z(!1)
                    })).catch((e => {
                        z(!1), console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }, xe = () => {
                    let e = [],
                        t = {
                            ...g
                        };
                    return t.hasOwnProperty("courseitems") && t.courseitems && t.courseitems.length && t.courseitems.map(((a, s) => {
                        let n = new Promise((function(e) {
                            a && a.hasOwnProperty("status") && parseInt(a.status) ? e() : a && a.hasOwnProperty("id") && parseInt(a.id) ? (t.courseitems[s].status = 1, t.courseitems[s].progressbar = 100, e()) : e()
                        }));
                        e.push(n)
                    })), y(t), Promise.all(e)
                }, Ne = (e, t) => {
                    if ("loadunit" == t && e.hasOwnProperty("index") && ce(e.index, null, !0), g.hasOwnProperty("assignment_locking") && g.assignment_locking && "completeUnitAssigmnent" == t || "retakeUnitAssigmnent" == t) {
                        let a = {
                                ...g
                            },
                            s = a.courseitems[J];
                        if (parseInt(a.assignment_locking) > 1) {
                            if ("completeUnitAssigmnent" == t && s.meta.hasOwnProperty("assignments") && s.meta.assignments.length && (s.meta.assignments[e.assignmentIndex].status = 1), "retakeUnitAssigmnent" == t) {
                                let t = g.courseitems[J];
                                t.meta.hasOwnProperty("assignments") && t.meta.assignments.length && (t.meta.assignments[e.assignmentIndex].status = 0)
                            }
                            let n = 0;
                            s.meta.assignments.map(((e, t) => {
                                e.status && n++
                            }));
                            let i = n / s.meta.assignments.length * 100;
                            i >= 100 ? ye() : 1 == s.status && (a.courseitems[J].status = 0), i = Math.round(i), le(i), y(a)
                        }
                    }
                    if ("mediaended" == t && ye(), "videosended" == t) {
                        let t = {
                            ...g
                        };
                        if (t.courseitems[J] && t.courseitems[J].hasOwnProperty("meta") && t.courseitems[J].meta.hasOwnProperty("video") && t.courseitems[J].meta.video.length) {
                            t.courseitems[J].meta.hasOwnProperty("completion") || (t.courseitems[J].meta.completion = []), t.courseitems[J].meta.completion[e.index] || (t.courseitems[J].meta.completion[e.index] = {
                                url: t.courseitems[J].meta.completion[e.index],
                                status: 0
                            }), t.courseitems[J].meta.completion[e.index].status = 1;
                            let a = 0;
                            t.courseitems[J].meta.completion.map(((e, t) => {
                                e && e.status && a++
                            }));
                            let s = Math.round(a / t.courseitems[J].meta.video.length * 100);
                            t.courseitems[J].hasOwnProperty("progressbar") || (t.courseitems[J].progressbar = 0), s >= 100 ? (s = 100, ye()) : (t.courseitems[J].progressbar = s, y(t))
                        }
                    }
                }, qe = () => {
                    if (window.wplms_course_data.hide_complete_course && g && g.hasOwnProperty("courseitems") && g.courseitems && g.courseitems.length)
                        for (var e = 0; e < g.courseitems.length; e++)
                            if (g.courseitems[e].hasOwnProperty("type") && "section" != g.courseitems[e].type && (!g.courseitems[e].hasOwnProperty("status") || !g.courseitems[e].status)) return !1;
                    return !0
                }, Oe = (e, t = null) => "undefined" != typeof localforage && window.vibebp.api.sw_enabled && navigator.onLine ? t ? localforage.removeItem(e) : localforage.iterate((function(t, a, s) {
                    e.length && a.length && a.includes(e) && localforage.removeItem(a)
                })) : new Promise((e => {
                    e(1)
                }));
            return Bb(Yb, null, t ? Bb(wl, null) : g ? Bb(dc.Provider, {
                value: {
                    courseStatus: g,
                    current_unit_key: J,
                    update: (e, t) => {
                        switch (t) {
                            case "loadunit":
                                e.hasOwnProperty("index") && ce(e.index);
                                break;
                            case "updateprogress":
                                e.hasOwnProperty("progress") && le(e.progress);
                                break;
                            case "progresscompleted":
                                ye();
                                break;
                            case "directmarkcomplete":
                                e.hasOwnProperty("index") && (g.hasOwnProperty("assignment_locking") && g.assignment_locking && g.courseitems[J].meta.hasOwnProperty("assignments") && g.courseitems[J].meta.assignments.length ? Kb("vibebp").addNotification({
                                    icon: "vicon-bookmark-alt",
                                    text: window.wplms_course_data.translations.complete_unit_assignments
                                }) : ye(e.index))
                        }
                    }
                }
            }, Bb("div", {
                className: "course_status course_id_" + e.course_id + " " + (q ? "moveonside" : "")
            }, T && g.hasOwnProperty("instructions") && g.instructions.length ? Bb("div", {
                className: "course_instructions_wrapper",
                onClick: e => {
                    document.querySelector(".course_instructions_wrapper") && e.target === document.querySelector(".course_instructions_wrapper") && (e.preventDefault(), L(!1))
                }
            }, Bb("div", {
                className: "course_instructions"
            }, Bb("div", {
                className: "close",
                onClick: () => {
                    L(!1)
                }
            }, Bb("span", {
                className: "vicon vicon-close"
            })), Bb("h1", null, window.wplms_course_data.translations.course_instructions), Bb("div", {
                dangerouslySetInnerHTML: {
                    __html: g.instructions
                }
            }))) : "", j ? Bb("div", {
                className: "reviewpopup_wrapper"
            }, Bb("div", {
                className: "reviewpopup_content"
            }, Bb("div", {
                className: "finish-course-content"
            }, j.hasOwnProperty("percentage") ? Bb("span", {
                className: "finished_percentage",
                ref: ge
            }, Bb("span", null, Bb("span", null, Bb("strong", null, j.percentage), Bb("span", null, "%")), Bb("span", null, j.title))) : "", j.awards ? Bb("div", {
                className: "awards"
            }, Object.keys(j.awards).map((e => "badge" == e ? Bb("div", {
                className: "badge"
            }, Bb("img", {
                src: j.awards[e].url
            }), Bb("span", null, j.awards[e].title)) : "certificate" == e ? Bb("div", {
                className: "certificate"
            }, Bb("a", {
                href: j.awards[e].url,
                target: "_blank"
            }, Bb("svg", {
                xmlns: "http://www.w3.org/2000/svg",
                width: "160",
                height: "160",
                viewBox: "0 0 24 24"
            }, Bb("path", {
                d: "M14.969 9.547l.031.191c0 .193-.096.379-.264.496-.538.372-.467.278-.67.885-.084.253-.33.424-.605.424h-.002c-.664-.002-.549-.038-1.083.338-.112.08-.244.119-.376.119s-.264-.039-.376-.118c-.534-.376-.419-.34-1.083-.338h-.002c-.275 0-.521-.171-.605-.424-.203-.607-.133-.513-.669-.885-.169-.118-.265-.304-.265-.497l.031-.19c.207-.604.208-.488 0-1.094l-.031-.191c0-.193.096-.379.265-.497.536-.372.465-.277.669-.885.084-.253.33-.424.605-.424h.002c.662.002.544.041 1.083-.338.112-.08.244-.119.376-.119s.264.039.376.118c.534.376.419.34 1.083.338h.002c.275 0 .521.171.605.424.203.607.132.513.67.885.168.118.264.304.264.497l-.031.191c-.207.604-.208.488 0 1.094zm-1.469-1.198l-.465-.464-1.41 1.446-.66-.627-.465.464 1.125 1.091 1.875-1.91zm4.5 4.651h-12v1h12v-1zm-1 2h-10v1h10v-1zm1 2h-12v1h12v-1zm1-15h-19v20h24v-20h-5zm3 15.422c-1.151.504-2.074 1.427-2.578 2.578h-14.844c-.504-1.151-1.427-2.074-2.578-2.578v-10.844c1.151-.504 2.074-1.427 2.578-2.578h14.844c.504 1.151 1.427 2.074 2.578 2.578v10.844z"
            })), Bb("span", null, window.wplms_course_data.translations.achievement_certificate))) : "points" == e ? Bb("div", {
                className: "points"
            }, Bb("svg", {
                xmlns: "http://www.w3.org/2000/svg",
                width: "24",
                height: "24",
                viewBox: "0 0 24 24"
            }, Bb("path", {
                d: "M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm0 3c-4.971 0-9 4.029-9 9s4.029 9 9 9 9-4.029 9-9-4.029-9-9-9zm1 13.947v1.053h-1v-.998c-1.035-.018-2.106-.265-3-.727l.455-1.644c.956.371 2.229.765 3.225.54 1.149-.26 1.385-1.442.114-2.011-.931-.434-3.778-.805-3.778-3.243 0-1.363 1.039-2.583 2.984-2.85v-1.067h1v1.018c.725.019 1.535.145 2.442.42l-.362 1.648c-.768-.27-1.616-.515-2.442-.465-1.489.087-1.62 1.376-.581 1.916 1.711.804 3.943 1.401 3.943 3.546.002 1.718-1.344 2.632-3 2.864z"
            })), Bb("span", null, j.awards[e].amount)) : void 0))) : "", Bb("div", {
                className: "post_completion_message"
            }, Bb("div", {
                className: "completion_message",
                dangerouslySetInnerHTML: {
                    __html: j.message
                }
            }), Bb("div", {
                dangerouslySetInnerHTML: {
                    __html: j.post_message
                }
            })), Bb("div", {
                className: "popup-footer"
            }, Bb("a", {
                className: "link",
                onClick: () => A(!1)
            }, window.wplms_course_data.translations.cancel), Bb("a", {
                className: "button is-primary",
                onClick: e.back
            }, window.wplms_course_data.translations.back_to_my_courses, Bb("span", {
                className: "vicon vicon-arrow-right"
            })))))) : "", S ? Bb("div", {
                className: "reviewpopup_wrapper",
                onClick: e => {
                    e.preventDefault(), document.querySelector(".reviewpopup_wrapper") && e.target === document.querySelector(".reviewpopup_wrapper") && P(!1)
                }
            }, Bb("div", {
                className: "reviewpopup_content"
            }, Bb("div", {
                className: "close",
                onClick: () => {
                    P(!1)
                }
            }, Bb("span", {
                className: "vicon vicon-close"
            })), E ? Bb(wl, null) : g.hasOwnProperty("comments_open") && g.comments_open ? Bb(Yb, null, Bb("div", {
                className: "reviewform"
            }, Bb("label", null, window.wplms_course_data.translations.rating), Bb(ww, {
                update: (e, t) => {
                    if ("ratingchanged" == t) {
                        let t = 0;
                        e && (t = e.length);
                        let a = {
                            ...I
                        };
                        a.rating = t, C(a)
                    }
                },
                rating: I.rating
            }), Bb("input", {
                type: "text",
                onChange: e => {
                    let t = {
                        ...I
                    };
                    t.title = e.target.value, C(t)
                },
                value: I.title,
                placeholder: window.wplms_course_data.translations.review_title
            }), Bb("textarea", {
                onChange: e => {
                    let t = {
                        ...I
                    };
                    t.review = e.target.value, C(t)
                },
                value: I.review,
                placeholder: window.wplms_course_data.translations.your_review
            })), Bb("div", {
                className: "popup-footer"
            }, D ? Bb(Yb, null, Bb("a", {
                href: "#",
                onClick: () => {
                    ke(!0)
                }
            }, Bb("span", {
                className: "vicon vicon-angle-left"
            }), " ", window.wplms_course_data.translations.skip_review_and_finish_course), Bb("a", {
                href: "#",
                className: E ? "button is-primary is-loading" : "button is-primary",
                onClick: () => {
                    ke()
                }
            }, window.wplms_course_data.translations.submit_review_and_finish_course, " ", Bb("span", {
                className: "vicon vicon-arrow-right"
            }))) : Bb(Yb, null, Bb("a", {
                className: "link",
                onClick: () => P(!1)
            }, window.wplms_course_data.translations.cancel), Bb("a", {
                className: "button is-primary",
                onClick: () => {
                    I && I.hasOwnProperty("title") && I.hasOwnProperty("review") && I.hasOwnProperty("rating") && I.title.length > 3 && I.review.length > 3 && I.rating >= 1 ? (z(!0), I.comment_post_ID = e.course_id, I.course_id = e.course_id, I.token = Z.token, fetch(`${window.wplms_course_data.api_url}/updatecourse/addreview?post`, {
                        method: "post",
                        headers: window.vibebp.xnonce ? {
                            "X-WP-Nonce": window.vibebp.xnonce
                        } : {},
                        body: JSON.stringify(I)
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((t => {
                        t ? t.status ? (z(!1), t.hasOwnProperty("comment_id") && t.comment_id && "undefined" != typeof localforage && window.vibebp.api.sw_enabled && localforage.getItem(`${window.wplms_course_data.api_url}/user/getreview/${e.course_id}`).then((a => {
                            a && a.length && "object" == typeof(a = JSON.parse(a)) && (a.comment_ID = t.comment_id, a.rating = I.rating, a.review = I.review, a.title = I.title, localforage.setItem(`${window.wplms_course_data.api_url}/user/getreview/${e.course_id}`, JSON.stringify(a)))
                        }))) : t.message && (alert(t.message), z(!1)) : (alert(window.wplms_course_data.translations.error_review_form), z(!1)), P(!1)
                    })).catch((e => {
                        z(!1), console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))) : (alert(window.wplms_course_data.translations.please_check_review_form), z(!1))
                }
            }, window.wplms_course_data.translations.submit_review, " ", Bb("span", {
                className: "vicon vicon-arrow-right"
            }))))) : "")) : "", (() => {
                let e = 0;
                if (g && g.courseitems && g.courseitems.length && g.courseitems[J] && "unit" == g.courseitems[J].type && !g.courseitems[J].status && g.courseitems[J].hasOwnProperty("meta") && g.courseitems[J].meta.hasOwnProperty("access") && g.courseitems[J].meta.access && (e = 1, g.hasOwnProperty("assignment_locking") && g.assignment_locking && g.courseitems[J].meta.hasOwnProperty("assignments") && g.courseitems[J].meta.assignments.length && (e = 0), g.courseitems[J].meta.hasOwnProperty("video") && (g.courseitems[J].meta.video.hasOwnProperty("url") || Array.isArray(g.courseitems[J].meta.video) && g.courseitems[J].meta.video.length) && (e = 0), g.courseitems[J].meta.hasOwnProperty("audio") && g.courseitems[J].meta.audio.hasOwnProperty("url") && (e = 0), g.courseitems[J].meta.hasOwnProperty("disableprogress") && g.courseitems[J].meta.disableprogress && (e = 0)), g && g.hasOwnProperty("disablescrollprogress") && g.disablescrollprogress && (e = 0), e) return Bb(Tb, null)
            })(), g.package ? d ? Bb(wl, null) : Bb("div", {
                className: "course_package_wrapper"
            }, Bb("div", {
                className: "course_package_header"
            }, Bb("div", {
                className: "vicon vicon-arrow-left",
                onClick: () => {
                    e.back(u)
                }
            }), u || t ? "" : Bb("div", {
                className: "finish_course button is-primary small",
                onClick: () => {
                    be()
                }
            }, window.wplms_course_data.translations.complete)), Bb("div", {
                className: "course_package"
            }, Bb("div", {
                dangerouslySetInnerHTML: {
                    __html: g.package
                }
            }))) : Bb(Yb, null, Bb("div", {
                className: x ? "course_timeline expand " + (i ? "comments_shown" : "") : "course_timeline " + (i ? "comments_shown" : "")
            }, Bb("div", {
                className: "course_action_points"
            }, Bb("div", {
                className: "action_points"
            }, Bb("a", {
                className: "vicon vicon-arrow-left",
                onClick: e.back,
                title: window.wplms_course_data.translations.back
            }), !s && !qd(g) && g.hasOwnProperty("courseitems") && g.courseitems.length ? Bb(Yb, null, Bb("a", {
                className: "vicon vicon-search",
                onClick: () => {
                    v(!0)
                },
                title: window.wplms_course_data.translations.search_unit
            }), g.courseitems[J].hasOwnProperty("meta") && g.courseitems[J].meta.hasOwnProperty("access") && g.courseitems[J].meta.access ? Bb(Yb, null, Bb("a", {
                className: "vicon vicon-comments",
                onClick: () => {
                    o(!i)
                },
                title: window.wplms_course_data.translations.comments
            })) : "") : "", document.querySelector("body").classList.contains("single-course") ? "" : Bb("a", {
                title: document.querySelector("body").classList.contains("course_status_fullscreen") ? window.wplms_course_data.translations.minimise_screen : window.wplms_course_data.translations.maximise_screen,
                className: "vicon vicon-fullscreen",
                onClick: () => {
                    document.querySelector("body").classList.contains("course_status_fullscreen") ? document.querySelector("body").classList.remove("course_status_fullscreen") : document.querySelector("body").classList.add("course_status_fullscreen");
                    var t = new CustomEvent("course_status_fullscreen_toggle", {
                        detail: {
                            coursestatus: g,
                            course_id: e.course_id
                        }
                    });
                    document.dispatchEvent(t)
                }
            })), w ? Bb("div", {
                className: "search-course " + (w ? "active" : "")
            }, Bb("input", {
                type: "text",
                placeholder: window.wplms_course_data.translations.search_course_elements,
                onChange: e => {
                    _(e.target.value)
                },
                value: p
            }), Bb("span", null, g.filtered_items && p.length > 3 ? g.filtered_items.length + " " + window.wplms_course_data.translations.results_found : ""), Bb("span", {
                onClick: () => {
                    v(!1), _("")
                },
                className: "vicon vicon-close"
            })) : ""), g && g.courseitems && g.courseitems[J] && "unit" == g.courseitems[J].type && i ? Bb(Nb, {
                unit_id: g.courseitems[J].id,
                course_id: e.course_id,
                back: () => {
                    o(!1)
                },
                expand: () => N(!x)
            }) : "", e.hasOwnProperty("course") ? Bb("div", {
                className: "course_heading",
                ref: l
            }, Bb("h2", {
                dangerouslySetInnerHTML: {
                    __html: h.name
                }
            }), Bb("div", {
                class: "course_progress_wrapper"
            }, Bb("div", {
                className: "course_progress"
            }, Bb("span", {
                style: {
                    width: h.user_progress + "%"
                }
            })), Bb("span", null, h.user_progress, "%"))) : "", d ? Bb(wl, null) : Bb(sb, {
                courseHeadingRef: l
            })), Bb("div", {
                className: "course_content",
                ref: r
            }, Bb("div", {
                className: "course_content_header"
            }, Bb("span", {
                className: "toggle_timeline_wrapper",
                onClick: () => {
                    O(!q)
                }
            }, Bb("span", {
                className: q ? window.innerWidth < 480 ? "vicon vicon-angle-double-down" : "vicon vicon-angle-double-right" : window.innerWidth < 480 ? "vicon vicon-angle-double-up" : "vicon vicon-angle-double-left"
            }), Bb("span", null, q ? window.wplms_course_data.translations.show_panel : window.wplms_course_data.translations.hide_panel), Bb("span", {
                dangerouslySetInnerHTML: {
                    __html: window.wplms_course_data.translations.drag_to_refresh
                }
            })), Bb("div", {
                className: "right_block"
            }, g.hasOwnProperty("comments_open") ? Bb("span", {
                className: "review_block",
                onClick: () => (P(!0), void(I.hasOwnProperty("comment_ID") || fetch(`${window.wplms_course_data.api_url}/user/getreview/${e.course_id}`, {
                    method: "post",
                    headers: window.vibebp.xnonce ? {
                        "X-WP-Nonce": window.vibebp.xnonce
                    } : {},
                    body: JSON.stringify({
                        token: Z.token,
                        course_id: e.course_id
                    })
                }).then((e => e.ok ? e.json() : {
                    status: 0,
                    message: window.wplms_course_data.translations.error_loading_data
                })).then((e => {
                    e && e.comment_ID && C(e), z(!1)
                })).catch((e => {
                    z(!1), console.error("Uh oh, an error!", e), Kb("vibebp").addNotification({
                        text: window.wplms_course_data.translations.error_loading_data
                    })
                }))))
            }, Bb("span", {
                className: "vicon vicon-star"
            }), Bb("span", null, window.wplms_course_data.translations.leave_rating)) : "", g && g.courseitems && g.courseitems.length ? Bb("div", {
                className: "unit_prevnext"
            }, Bb("div", {
                className: "unit_prev navigate_unit",
                onClick: () => {
                    we("prev")
                }
            }, b.prev ? Bb(Yb, null, Bb("span", {
                className: "vicon vicon-arrow-left"
            }), Bb("span", null, window.wplms_course_data.translations.previous_unit)) : ""), Bb("div", {
                className: "unit_next navigate_unit",
                onClick: () => {
                    we("next")
                }
            }, b.next ? Bb(Yb, null, Bb("span", null, window.wplms_course_data.translations.next_unit), Bb("span", {
                className: "vicon vicon-arrow-right"
            })) : "")) : "")), s || d ? Bb(wl, null) : g && g.courseitems && g.courseitems.length ? (() => {
                let t = 0,
                    a = 0;
                g.courseitems.map(((e, s) => {
                    e.id && t++, s <= J && e.id && a++
                }));
                let s = "next_curriculum_item unlocked";
                switch (g.hasOwnProperty("lock") && g.lock && !g.courseitems[J].status && (s = "next_curriculum_item locked"), g.courseitems[J].type) {
                    case "quiz":
                        return Bb("div", {
                            className: "course_content_content_wrapper"
                        }, Bb("div", {
                            className: "course_content_content"
                        }, Bb("span", {
                            className: "lesson_info"
                        }, Bb("span", null, window.wplms_course_data.reports.module.quiz, " ", a + "/" + t), Bb(Ot, {
                            timestamp: g.courseitems[J].duration,
                            notimediff: 1
                        })), Bb("h2", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J].title
                            }
                        }), g.courseitems[J].hasOwnProperty("quiz_type") ? Bb("div", null, (() => {
                            var t = {
                                coursestatus: g,
                                type: g.courseitems[J].quiz_type,
                                id: g.courseitems[J].id,
                                course_id: e.course_id
                            };
                            g.courseitems[J].hasOwnProperty("content_id") && (t.content_id = g.courseitems[J].content_id);
                            var a = new CustomEvent("custom_quiz_type", {
                                detail: t
                            });
                            return document.dispatchEvent(a), Bb("div", {
                                id: g.courseitems[J].quiz_type,
                                quizid: g.courseitems[J].id
                            })
                        })()) : Bb(id, {
                            quizid: g.courseitems[J].id,
                            update: he,
                            course: e.course_id
                        })), J + 1 < g.courseitems.length ? Bb("div", {
                            className: s,
                            onClick: () => {
                                we("next")
                            }
                        }, g.courseitems[J + 1].icon ? g.courseitems[J + 1].icon.length > 200 ? Bb("span", null, Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].icon
                            }
                        }), Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].title
                            }
                        })) : Bb("span", null, Bb("span", {
                            className: g.courseitems[J + 1].icon
                        }), Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].title
                            }
                        })) : Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].title
                            }
                        })) : g.hasOwnProperty("course_status") && parseInt(g.course_status) < 3 && qe() ? Bb("div", {
                            className: "finish_course"
                        }, Bb("a", {
                            className: "button is-primary is-fullwidth",
                            onClick: () => {
                                be()
                            }
                        }, Bb("span", {
                            className: "vicon vicon-check-box",
                            style: {
                                margin: "0 1rem"
                            }
                        }), window.wplms_course_data.translations.complete_course)) : "");
                    case "wplms-assignment":
                        return Bb("div", {
                            className: "course_content_content_wrapper"
                        }, Bb("div", {
                            className: "course_content_content"
                        }, Bb("span", {
                            className: "lesson_info"
                        }, Bb("span", null, window.wplms_course_data.reports.module.assignment, " ", a + "/" + t), Bb(Ot, {
                            timestamp: g.courseitems[J].duration,
                            notimediff: 1
                        })), Bb("h2", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J].title
                            }
                        }), Bb(Ld, {
                            assignment: g.courseitems[J].meta,
                            update: fe,
                            course: e.course_id
                        })), J + 1 < g.courseitems.length ? Bb("div", {
                            className: s,
                            onClick: () => {
                                we("next")
                            }
                        }, Bb("span", null, Bb("span", {
                            className: g.courseitems[J + 1].icon ? g.courseitems[J + 1].icon : ""
                        }), Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].title
                            }
                        }))) : g.hasOwnProperty("course_status") && parseInt(g.course_status) < 3 && qe() ? Bb("div", {
                            className: "finish_course"
                        }, Bb("a", {
                            className: "button is-primary is-fullwidth",
                            onClick: () => {
                                be()
                            }
                        }, Bb("span", {
                            className: "vicon vicon-check-box",
                            style: {
                                margin: "0 1rem"
                            }
                        }), window.wplms_course_data.translations.complete_course)) : "");
                    default:
                        return Bb("div", {
                            className: "course_content_content_wrapper"
                        }, g.courseitems[J].hasOwnProperty("custom_unit_type") ? Bb("div", null, (() => {
                            var t = {
                                coursestatus: g,
                                type: g.courseitems[J].custom_unit_type,
                                id: g.courseitems[J].id,
                                course_id: e.course_id
                            };
                            g.courseitems[J].hasOwnProperty("content_id") && (t.content_id = g.courseitems[J].content_id);
                            var a = new CustomEvent("custom_unit_type", {
                                detail: t
                            });
                            return document.dispatchEvent(a), Bb("div", {
                                id: g.courseitems[J].unit_type,
                                quizid: g.courseitems[J].id
                            })
                        })()) : Bb(fc, {
                            curriculumItem: g.courseitems[J],
                            update: Ne,
                            index: J,
                            item_number: a,
                            total_item_count: t,
                            coursestatus: g,
                            course: e.course_id
                        }), J + 1 < g.courseitems.length ? Bb("div", {
                            className: s,
                            onClick: () => {
                                we("next");
                                let e = 0;
                                g && g.courseitems && g.courseitems.length && g.courseitems[J] && "unit" == g.courseitems[J].type && !g.courseitems[J].status && g.courseitems[J].hasOwnProperty("meta") && g.courseitems[J].meta.hasOwnProperty("access") && g.courseitems[J].meta.access && (e = 1, g.hasOwnProperty("assignment_locking") && g.assignment_locking && g.courseitems[J].meta.hasOwnProperty("assignments") && g.courseitems[J].meta.assignments.length && (e = 0), g.unit_media_lock && (g.courseitems[J].meta.hasOwnProperty("video") && Array.isArray(g.courseitems[J].meta.video) && g.courseitems[J].meta.video.length || "video" == g.courseitems[J].unit_type) && (e = 0), "unit" !== g.courseitems[J].type && (e = 0), g.courseitems[J] && g.courseitems[J].hasOwnProperty("meta") && g.courseitems[J].meta.hasOwnProperty("disableprogress") && g.courseitems[J].meta.disableprogress && (e = 0)), e && ye(J)
                            }
                        }, g.courseitems[J + 1].icon ? g.courseitems[J + 1].icon.length > 200 ? Bb("span", null, Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].icon
                            }
                        }), Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].title
                            }
                        })) : Bb("span", null, Bb("span", {
                            className: g.courseitems[J + 1].icon
                        }), Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].title
                            }
                        })) : Bb("span", {
                            dangerouslySetInnerHTML: {
                                __html: g.courseitems[J + 1].title
                            }
                        })) : g.hasOwnProperty("course_status") && parseInt(g.course_status) < 3 && qe() ? Bb("div", {
                            className: "finish_course"
                        }, Bb("a", {
                            className: "button is-primary is-fullwidth",
                            onClick: () => {
                                be()
                            }
                        }, Bb("span", {
                            className: "vicon vicon-check-box",
                            style: {
                                margin: "0 1rem"
                            }
                        }), window.wplms_course_data.translations.complete_course)) : "")
                }
            })() : "", K ? Bb("span", {
                className: "vibebp_content_show_fireworks finished_percentage",
                ref: ge
            }) : "")))) : "")
        }, {
            createElement: ek,
            useState: tk,
            useEffect: ak,
            Fragment: sk,
            render: nk
        } = wp.element, {
            dispatch: ik,
            select: ok
        } = wp.data, rk = e => {
            const [t, a] = tk([]), [s, n] = tk(!0);
            return ak((() => {
                Array.isArray(e.curriculum) && e.curriculum.length && e.curriculum.findIndex(((e, t) => "section" == e.type)) < 0 && e.curriculum.map(((t, a) => {
                    e.curriculum[a].show = !0
                })), a(e.curriculum), n(!1)
            }), [e.curriculum]), s ? ek(wl, null) : t && Array.isArray(t) && t.length ? t.map(((e, s) => "section" == e.type ? ek("div", {
                className: "curriculum_section",
                onClick: () => {
                    ((e, s) => {
                        if (t && t.length) {
                            let n = [...t],
                                i = n.findIndex(((e, t) => t > s && "section" == e.type));
                            i < 0 ? i = n.length - 1 : i -= 1;
                            for (let t = s; t <= i; t++) n[t].show = e;
                            a(n)
                        }
                    })(!e.hasOwnProperty("show") || !e.show, s)
                }
            }, ek("span", {
                dangerouslySetInnerHTML: {
                    __html: e.label
                }
            }), window.wplms_course_data.curriculum_accordion ? ek(sk, null, e.hasOwnProperty("show") && e.show ? ek("a", {
                className: "vicon vicon-minus"
            }) : ek("a", {
                className: "vicon vicon-plus"
            })) : "") : e.hasOwnProperty("show") && e.show || !window.wplms_course_data.curriculum_accordion ? ek("div", {
                className: "curriculum_item"
            }, ek("span", null, ek("strong", null, e.icon.length > 200 ? ek("span", {
                dangerouslySetInnerHTML: {
                    __html: e.icon
                }
            }) : ek("span", {
                className: e.icon
            }), ek("em", {
                dangerouslySetInnerHTML: {
                    __html: e.label
                }
            })), e.hasOwnProperty("duration") && e.duration ? ek(Ot, {
                notimediff: 1,
                timestamp: e.duration
            }) : ""), ek("span", {
                className: e.progress ? "done" : ""
            }, ek(Ii, {
                size: "xs",
                progress: e.progress
            }))) : void 0)) : ek("div", {
                className: "vbp_message"
            }, window.wplms_course_data.translations.no_curriculum)
        }, {
            createElement: lk,
            render: dk,
            useState: ck,
            useEffect: uk,
            Fragment: mk
        } = wp.element, {
            dispatch: pk,
            select: _k
        } = wp.data;
        Math.floor((new Date).getTime() / 1e3);
        const wk = e => {
                const [t, a] = ck(!1), [s, n] = ck(!1), [i, o] = ck([{
                    key: "overview",
                    label: window.wplms_course_data.translations.course_overview
                }]), [r, l] = ck("overview"), [d, c] = ck({}), [u, m] = ck(e.course.description), [_, w] = ck(e.course), [v, h] = ck("");
                return uk((() => {
                    w(e.course), l("overview")
                }), [e.course]), uk((() => {
                    n(!0), fetch(`${window.wplms_course_data.api_url}/student/getcourseTabs/${_.id}`, {
                        method: "post",
                        body: JSON.stringify({
                            tab: r,
                            token: _k("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        n(!1), e.status && c(e.tabs)
                    })).catch((e => {
                        "AbortError" === e.name ? console.log("Fetch aborted") : (n(!1), console.error("Uh oh, an error!", e), pk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), []), p((() => {
                    ("curriculum" == r || r.indexOf("internal__") > -1) && (n(!0), fetch(`${window.wplms_course_data.api_url}/student/courseTab/${_.id}?args=${r}`, {
                        method: "post",
                        body: JSON.stringify({
                            tab: r,
                            token: _k("vibebp").getToken()
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        n(!1), e.status && m("curriculum" == r ? e.curriculum : e.data)
                    })).catch((e => {
                        "AbortError" === e.name ? console.log("Fetch aborted") : (n(!1), console.error("Uh oh, an error!", e), pk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    })))
                }), 500, [r]), lk("div", {
                    className: "course_overview_wrapper"
                }, lk("div", {
                    className: "course_overview"
                }, lk("span", null, lk("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: e.back
                }), lk("span", null, lk(Ot, {
                    timestamp: parseInt(_.user_expiry) - parseInt(window.wplms_course_data.timestamp),
                    notimediff: 1
                }), lk("a", {
                    href: _.link,
                    target: "_blank",
                    className: "vicon vicon-link"
                }))), lk("div", {
                    className: "course_header"
                }, lk("div", {
                    className: "course_featured"
                }, lk("img", {
                    src: _.featured_image,
                    alt: _.name,
                    width: "100%"
                })), lk("div", {
                    className: "course_header_description"
                }, lk("span", null, window.wplms_course_data.translations.course_overview), lk("h1", {
                    dangerouslySetInnerHTML: {
                        __html: _.name
                    }
                }), lk("div", {
                    class: "course_progress_wrapper"
                }, lk("div", {
                    className: "course_progress"
                }, lk("span", {
                    style: {
                        width: _.user_progress + "%"
                    }
                })), lk("span", null, _.user_progress, "%")), lk(mk, null, _.hasOwnProperty("error") && _.error.hasOwnProperty("error_message") ? lk(mk, null, _.user_expiry > (new Date).getTime() / 1e3 ? lk("a", {
                    className: "button is-primary"
                }, window.wplms_course_data.course.admin.status[_.user_status]) : lk("a", {
                    href: _.link,
                    className: "button is-primary"
                }, window.wplms_course_data.translations.expired), lk("div", {
                    className: "vbp_message error"
                }, lk("span", {
                    className: "vicon " + _.error.icon,
                    style: {
                        margin: "0 0.2rem"
                    }
                }), lk("span", {
                    dangerouslySetInnerHTML: {
                        __html: _.error.error_message
                    }
                }))) : lk(mk, null, _.user_expiry > (new Date).getTime() / 1e3 ? !window.wplms_course_data.course.admin.finished_access && parseInt(_.user_status) > 3 ? lk("a", {
                    className: "button is-primary"
                }, window.wplms_course_data.course.admin.status[_.user_status]) : _.hasOwnProperty("start_date") && _.start_date > (new Date).getTime() / 1e3 && parseInt(_.user_status) <= 1 ? lk(mk, null, lk("a", {
                    className: "button is-primary"
                }, window.wplms_course_data.course.admin.status[_.user_status]), lk("div", {
                    className: "vbp_message error"
                }, lk("span", {
                    className: "vicon vicon-lock",
                    style: {
                        margin: "0 0.2rem"
                    }
                }), lk("span", null, window.wplms_course_data.translations.course_starts_on, " ", _.display_start_date))) : lk("a", {
                    className: "button is-primary",
                    onClick: e.setCourseStatus
                }, window.wplms_course_data.course.admin.status[_.user_status]) : lk("a", {
                    href: _.link,
                    className: "button is-primary"
                }, window.wplms_course_data.translations.expired))), lk("div", {
                    className: "course_short_description",
                    dangerouslySetInnerHTML: {
                        __html: _.excerpt
                    }
                }))), lk("div", {
                    className: "course_manage"
                }, lk("div", {
                    className: "course_tabs"
                }, d && Object.keys(d).length ? lk("div", {
                    className: "instructor_tabs"
                }, Object.keys(d).map((e => lk("span", {
                    className: r == e ? "active" : "",
                    onClick: () => l(e)
                }, d[e])))) : ""), lk("div", {
                    className: "course_tab_content"
                }, s ? lk(wl, null) : "curriculum" == r ? lk("div", {
                    className: "course_curriculum_wrapper"
                }, lk(rk, {
                    curriculum: u
                })) : "qna" == r ? lk(tv, {
                    course: _.id
                }) : "notes" == r ? lk(Mw, {
                    course: _.id,
                    tabs: ["notes"]
                }) : "announcementsnews" == r ? lk(Oh, {
                    course: _.id
                }) : "overview" == r ? lk(mk, null, lk("div", {
                    className: "course_description",
                    dangerouslySetInnerHTML: {
                        __html: e.course.description
                    }
                }), lk("div", {
                    className: "about_instructor"
                }), lk("div", null, void document.dispatchEvent(new Event("VibeBP_Editor_Content")))) : r.indexOf("external__") > -1 ? (() => {
                    let e = r.split("external__")[1].split("_");
                    pk("vibebp").setId(e[2]), pk("vibebp").setAction(e[1]), pk("vibebp").setComponent(e[0])
                })() : r.indexOf("internal__") > -1 ? lk("div", {
                    dangerouslySetInnerHTML: {
                        __html: u
                    }
                }) : lk("div", null, (setTimeout((() => {
                    var e = new CustomEvent("fullcourse_external_tab", {
                        detail: {
                            tab: r,
                            course: _
                        }
                    });
                    document.dispatchEvent(e)
                }), 200), lk("div", {
                    className: r
                })))))))
            },
            {
                createElement: vk,
                render: hk,
                useState: fk,
                useEffect: gk,
                Fragment: yk
            } = wp.element,
            {
                dispatch: bk,
                select: kk
            } = wp.data,
            xk = e => {
                const [t, a] = fk(!1), [s, n] = fk(!1), [i, o] = fk(null), [r, l] = fk(0), [d, c] = fk({}), [u, m] = fk(""), [p, _] = fk(!1);
                gk((() => {
                    c(e.course)
                }), [e.course]), gk((() => {
                    let e = "coursestatus_curriculum_item_urls_" + d.id;
                    localforage.getItem(e).then((e => {
                        e && e.length ? localforage.getItem("coursestatus_" + d.id).then((t => {
                            if (e = JSON.parse(e), t && t.length) {
                                t = JSON.parse(t);
                                let a = 0;
                                if (e && e.length && e.map((e => {
                                        t.indexOf(e) > -1 && a++
                                    })), a > 0)
                                    if (a == e.length) o(!0);
                                    else {
                                        o(!1), l(Math.floor(a / e.length * 100));
                                        let t = e[a].split("/");
                                        _(t[t.length - 1])
                                    }
                                else o(!1), l(0)
                            } else o(!1)
                        })) : o(!1)
                    }))
                }), [d]);
                const w = () => {
                        if (e.downloadingCourse) bk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.only_one_course_can_be_downloaded
                        });
                        else {
                            let t = "coursestatus_curriculum_item_urls_" + d.id;
                            localforage.getItem(t).then((t => {
                                t && t.length ? localforage.getItem("coursestatus_" + d.id).then((a => {
                                    if (t = JSON.parse(t), a && a.length) {
                                        a = JSON.parse(a);
                                        let e = 0;
                                        if (t && t.length && t.map((t => {
                                                a.indexOf(t) > -1 && e++
                                            })), e > 0)
                                            if (e == t.length);
                                            else {
                                                l(Math.floor(e / t.length * 100));
                                                let a = t[e].split("/");
                                                _(a[a.length - 1])
                                            }
                                        else l(0)
                                    }
                                    n(!0), e.update(d.id, "downloading")
                                })) : (n(!0), e.update(d.id, "downloading"))
                            }))
                        }
                    },
                    v = () => {
                        n(!1), e.update(!1, "downloading")
                    };
                return d && Object.keys(d).length && null !== i ? vk("div", {
                    className: "course_download_wrapper"
                }, s ? vk(yk, null, i ? vk("span", {
                    style: {
                        border: "1px solid",
                        "border-radius": "50%",
                        padding: "0.2rem",
                        "font-size": "0.8rem"
                    },
                    className: "vicon vicon-check"
                }) : vk("div", {
                    className: "download_progress"
                }, vk(Ii, {
                    progress: r,
                    size: "s"
                }), vk("span", {
                    className: "downloadaction vicon vicon-control-pause",
                    onClick: v
                })), i ? "" : ReactDOM.createPortal(vk(Zb, {
                    course_id: d.id,
                    course: d,
                    back: (e = null) => {},
                    exit: () => {
                        n(!1)
                    },
                    index: e.index,
                    update: (t, a) => {
                        "progresschanged" == a && t.hasOwnProperty("index") && (l(t.progress), t.progress >= 100 && (o(!0), e.update(!1, "downloading"))), "pause" == a && v()
                    },
                    download: 1,
                    startUnit: p
                }), document.querySelector("#download_course_popup"))) : i ? vk("span", {
                    className: "vicon vicon-eraser",
                    onClick: () => {
                        let e = "coursestatus_" + d.id;
                        localforage.getItem(e).then((t => {
                            t && t.length && (t = JSON.parse(t), Array.isArray(t) && t.map(((a, s) => {
                                localforage.removeItem(a), t.length - 1 == s && (localforage.getItem("coursestatus_curriculum_item_video_urls_" + d.id).then((e => {
                                    e && (e = JSON.parse(e), Array.isArray(e) && e.length && e.map(((t, a) => {
                                        localforage.removeItem(t), e.length - 1 == a && localforage.removeItem("coursestatus_curriculum_item_video_urls_" + d.id)
                                    })))
                                })), localforage.removeItem(e), o(!1), localforage.removeItem("coursestatus_curriculum_item_urls_" + d.id))
                            })))
                        }))
                    }
                }) : r > 0 ? vk("div", {
                    className: "download_progress"
                }, vk(Ii, {
                    progress: r,
                    size: "s"
                }), vk("span", {
                    className: "downloadaction vicon vicon-control-play",
                    onClick: w
                })) : vk("span", {
                    className: "vicon vicon-cloud-down",
                    onClick: w
                })) : ""
            },
            {
                createElement: Nk,
                render: qk,
                useState: Ok,
                useEffect: Ik,
                Fragment: Ck
            } = wp.element,
            {
                dispatch: Sk,
                select: Pk
            } = wp.data;
        Math.floor((new Date).getTime() / 1e3);
        const Ek = e => {
                const [t, a] = Ok(!1), [s, n] = Ok(!1), [i, o] = Ok(!1), [r, l] = Ok(!1), [d, c] = Ok([]), [u, m] = Ok({
                    per_page: window.wplms_course_data.courses_per_page,
                    paged: 1,
                    s: "",
                    access: "active"
                }), [_, w] = Ok(""), [h, f] = Ok(!1), [g, y] = Ok(!1), [b, k] = Ok(!1), [x, N] = Ok(!0), [q, O] = Ok(!1), [I, C] = Ok(!1), [S, P] = Ok(null);
                let E = Pk("vibebp").getUser();
                E.token = Pk("vibebp").getToken(), Ik((() => {
                    if ("course" == Pk("vibebp").getAction() && Pk("vibebp").getId()) {
                        let e = Pk("vibebp").getId();
                        e && m({
                            ...u,
                            post__in: [e],
                            paged: 1
                        })
                    }
                }), []);
                const z = e => {
                    O(!1), m({
                        ...u,
                        paged: 1
                    })
                };
                Ik((() => (g ? document.removeEventListener("vibebp_component_reload", z) : document.addEventListener("vibebp_component_reload", z), () => {
                    document.removeEventListener("vibebp_component_reload", z)
                }))), p((() => {
                    if (q && !s) return;
                    S && S.abort();
                    let e = {},
                        t = new AbortController;
                    S && (e = {
                        signal: t.signal
                    }), P(t), o(!0);
                    let a = {
                            ...u
                        },
                        i = 0,
                        r = 0;
                    a && (a.hasOwnProperty("s") && void 0 !== a.s && a.s.length && (delete a.s, i = 1), a.hasOwnProperty("force") && void 0 !== a.force && a.force && (delete u.force, r = 1));
                    let l = `${window.wplms_course_data.api_url}/student/courses?args=${encodeURIComponent(JSON.stringify(a))}`;
                    !q && i && (l += "&nocache"), r && (l += "&force"), fetch(l, {
                        method: "post",
                        ...e,
                        body: JSON.stringify({
                            ...u,
                            token: E.token
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (o(!1), n(!1), N(!1), e.status && e.courses.length)
                            if (b) {
                                let t = [...d, ...e.courses];
                                c(t), k(!1), t.length < parseInt(e.total) ? N(!0) : u.s.length || u.hasOwnProperty("post__in") || O(!0)
                            } else c(e.courses), u.post__in && 1 == u.post__in.length && y(e.courses[0]), e.courses.length < parseInt(e.total) ? N(!0) : u.s.length || u.hasOwnProperty("post__in") || O(!0);
                        else c([])
                    })).catch((e => {
                        "AbortError" === e.name ? console.log("Fetch aborted") : (o(!1), N(!1), n(!1), console.error("Uh oh, an error!", e), Sk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [u]);
                const T = (e, t) => {
                        "downloading" == t && C(e)
                    },
                    L = e => {
                        if ("undefined" != typeof localforage && window.vibebp.api.sw_enabled) {
                            let t = `${window.wplms_course_data.api_url}/student/courses?args=${encodeURIComponent(JSON.stringify(u))}`;
                            localforage.getItem(t).then((a => {
                                a && a.length && (a = JSON.parse(a)).hasOwnProperty("courses") && (a.courses = e, localforage.setItem(t, JSON.stringify(a)))
                            }))
                        }
                    };
                let M = [...d];
                !v(_) && parseInt(_) && (M = M.filter((e => e.user_status == _))), u.s.length && (M = M.filter((e => e.name.toLowerCase().includes(u.s.toLowerCase()))));
                let $ = [];
                return M.length && M.map(((e, t) => {
                    e.instructor.map(((e, t) => {
                        $.indexOf(parseInt(e)) < 0 && $.push(parseInt(e))
                    }))
                })), t ? Nk(wl, null) : h ? Nk(Zb, {
                    course_id: h,
                    course: d[d.findIndex((e => e.id == h))],
                    back: (e = null) => {
                        if (y(!1), f(!1), u.hasOwnProperty("post__in")) {
                            let e = {
                                ...u
                            };
                            delete e.post__in, m(e)
                        }
                        Sk("vibebp").setId(!1), !0 === e && (O(!1), m({
                            per_page: window.wplms_course_data.courses_per_page,
                            paged: 1,
                            s: "",
                            access: "active",
                            force: 1
                        }))
                    },
                    exit: () => {
                        y(!1)
                    },
                    index: d.findIndex((e => e.id == h)),
                    update: (e, t) => {
                        if ("progresschanged" == t && e.hasOwnProperty("index")) {
                            let t = [...d];
                            t[e.index].user_progress = e.progress, c(t), L(t)
                        }
                        if ("statuschanged" == t && e.hasOwnProperty("index")) {
                            let t = [...d];
                            t[e.index].user_status = e.user_status, c(t), L(t)
                        }
                    }
                }) : Nk("div", {
                    className: "mycourses"
                }, g ? Nk(wk, {
                    course: g,
                    back: () => {
                        if (y(!1), u.hasOwnProperty("post__in")) {
                            let e = {
                                ...u
                            };
                            delete e.post__in, m(e)
                        }
                        Sk("vibebp").setId(!1)
                    },
                    setCourseStatus: () => {
                        f(g.id)
                    }
                }) : "", Nk("div", {
                    style: g ? {
                        display: "none"
                    } : {}
                }, Nk("div", {
                    className: "mycourses_header"
                }, Nk("div", {
                    className: "mycourses_access_tabs"
                }, Object.keys(window.wplms_course_data.course.admin.access).map((e => {
                    if ("" != e) return Nk("a", {
                        onClick: t => {
                            n(!0), O(!1), m({
                                ...u,
                                access: e,
                                paged: 1
                            })
                        },
                        className: u.access == e ? "active button is-primary" : "link"
                    }, window.wplms_course_data.course.admin.access[e])
                }))), Nk("div", {
                    className: "flex2"
                }, Nk("div", {
                    class: "vibebp_form_field"
                }, Nk("input", {
                    type: "text",
                    value: u.s,
                    onChange: e => {
                        m({
                            ...u,
                            s: e.target.value,
                            paged: 1
                        })
                    },
                    placeholder: window.wplms_course_data.translations.search_courses
                }), Nk("span", {
                    className: "vicon vicon-search"
                })), Nk("select", {
                    onChange: e => {
                        w(e.target.value)
                    },
                    value: _
                }, Object.keys(window.wplms_course_data.course.admin.status).map((e => Nk("option", {
                    value: e
                }, window.wplms_course_data.course.admin.status[e])))))), Nk(Ck, null, s || !i || b ? "" : Nk(wl, null), s && i && !b ? Nk(wl, null) : M.length && $.length ? Nk("div", {
                    className: "course_blocks"
                }, Nk(Al, {
                    user_ids: $,
                    type: "member"
                }, M.map(((e, t) => Nk("div", {
                    className: "course_block_wrap course_block_wrap_" + e.id
                }, Nk("div", {
                    className: "course_block"
                }, Nk("div", {
                    className: "course_featured_image"
                }, Nk("img", {
                    src: e.featured_image,
                    alt: e.name,
                    width: "460",
                    height: "300",
                    onClick: () => {
                        y(e), Sk("vibebp").setAction("course"), Sk("vibebp").setId(e.id)
                    }
                }), Nk("div", {
                    class: "course_featured_image_over"
                }, Nk("div", {
                    className: "course_label",
                    onClick: () => {
                        y(e), Sk("vibebp").setAction("course"), Sk("vibebp").setId(e.id)
                    }
                }, e.hasOwnProperty("user_expiry") ? parseInt(e.user_expiry) >= parseInt(window.wplms_course_data.timestamp) ? Nk("span", {
                    className: "active"
                }, window.wplms_course_data.course.admin.access.active) : Nk("span", {
                    className: "expired"
                }, window.wplms_course_data.course.admin.access.expired) : ""))), Nk("div", {
                    className: "course_block_content_wrapper"
                }, Nk("div", {
                    className: "course_title_wrapper"
                }, Nk("div", {
                    className: "course_title"
                }, Nk("h3", {
                    dangerouslySetInnerHTML: {
                        __html: e.name
                    },
                    onClick: () => {
                        y(e), Sk("vibebp").setAction("course"), Sk("vibebp").setId(e.id)
                    }
                }), "undefined" != typeof localforage && window.vibebp.api.sw_enabled && e.hasOwnProperty("can_download_offline") && e.can_download_offline ? Nk(xk, {
                    course: e,
                    index: t,
                    downloadingCourse: I,
                    update: T
                }) : ""), Nk("div", {
                    className: "course_info"
                }, Nk("div", {
                    className: "course_instructor"
                }, e.instructor.map((e => Nk(jl, {
                    type: "member",
                    id: {
                        user_id: e
                    }
                })))), Nk("span", {
                    className: "joined_date"
                }, Nk(Ot, {
                    timestamp: parseInt(e.user_expiry) - parseInt(e.duration)
                })))), Nk("div", {
                    className: "course_meta_data"
                }, Nk("div", {
                    class: "course_progress_wrapper"
                }, Nk("div", {
                    className: "course_progress"
                }, Nk("span", {
                    style: {
                        width: e.user_progress + "%"
                    }
                })), Nk("span", null, e.user_progress, "%")), e.hasOwnProperty("user_status") ? Nk(Ck, null, Nk("a", {
                    className: "button is-primary small",
                    onClick: () => {
                        y(e), Sk("vibebp").setAction("course"), Sk("vibebp").setId(e.id)
                    }
                }, window.wplms_course_data.course.admin.status[e.user_status]), e && e.user_status >= 4 && e.hasOwnProperty("course_retakes") && e.hasOwnProperty("user_retakes") && e.course_retakes - e.user_retakes > 0 ? Nk("div", {
                    className: "course_retake"
                }, Nk("a", {
                    className: r ? "button is-primary small is-loading" : "button is-primary small",
                    onClick: () => {
                        ((e, t) => {
                            e.hasOwnProperty("id") && e.id && (l(!0), fetch(`${window.wplms_course_data.api_url}/user/retake_course/${e.id}?post`, {
                                method: "post",
                                body: JSON.stringify({
                                    token: E.token
                                })
                            }).then((e => e.ok ? e.json() : {
                                status: 0,
                                message: window.wplms_course_data.translations.error_loading_data
                            })).then((t => {
                                if (l(!1), t.status) {
                                    let t = [...d],
                                        a = t.findIndex((t => t.id === e.id));
                                    a > -1 && (t[a].user_retakes = e.user_retakes + 1, t[a].user_status = 1, t[a].user_progress = 0, c(t))
                                }
                                Sk("vibebp").addNotification({
                                    icon: t.icon,
                                    text: t.hasOwnProperty("message") && t.message.length ? t.message : window.wplms_course_data.translations.error
                                })
                            })).catch((e => {
                                "AbortError" === e.name ? console.log("Fetch aborted") : (console.error("Uh oh, an error!", e), l(!1), Sk("vibebp").addNotification({
                                    text: window.wplms_course_data.translations.error_loading_data
                                }))
                            })))
                        })(e)
                    }
                }, window.wplms_course_data.translations.retake_course, " "), Nk("span", {
                    className: "course_retakes"
                }, Nk("span", null, e.user_retakes), "/", e.course_retakes)) : "") : "")))))))) : Nk("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_courses_found), s || i || !x ? i && b ? Nk(wl, null) : "" : Nk("a", {
                    className: "link",
                    onClick: () => {
                        k(!0), m({
                            ...u,
                            paged: u.paged + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more))))
            },
            {
                createElement: zk,
                useState: Tk,
                useEffect: Lk,
                Fragment: Mk,
                render: $k
            } = wp.element,
            {
                dispatch: jk,
                select: Ak
            } = wp.data,
            Dk = e => {
                const [t, a] = Tk(!1), [s, n] = Tk(e.course), [i, o] = Tk([]), [r, l] = Tk([]), [d, c] = Tk(!1), [u, m] = Tk(!1), [_, w] = Tk([]), [v, h] = Tk(0), [f, g] = Tk({
                    filter: "course",
                    primary_id: e.course.id,
                    search: "",
                    sorter: "",
                    page: 1
                }), [y, b] = Tk(!1), [k, x] = Tk(!1), N = (Ak("vibebp").getUser(), Ak("vibebp").getToken());
                Lk((() => {
                    n(e.course), fetch(`${window.wplms_course_data.api_url}/student/finishedCourseDetails`, {
                        method: "post",
                        body: JSON.stringify({
                            token: N,
                            course_id: e.course.id
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        e.status ? (l(e.curriculum), e.hasOwnProperty("retakes") && c(e.retakes)) : e.hasOwnProperty("message") && jk("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), jk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), [e.course]), p((() => {
                    fetch(`${window.vibebp.api.url}/${window.vibebp.api.endpoints.activity}`, {
                        method: "post",
                        body: JSON.stringify({
                            token: N,
                            ...f
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (e.status) {
                            let t = [];
                            k ? (t = [..._], e.data.activities.map((e => {
                                t.push(e)
                            })), x(!1)) : t = e.data.activities, b(e.data.has_more_items), w(t)
                        }
                    })).catch((e => {
                        console.error("Uh oh, an error!", e), jk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                }), 500, [f]);
                let q = 0;
                return zk("div", {
                    className: "fullcoursereport portal"
                }, zk("span", {
                    onClick: () => e.close(),
                    className: "vicon vicon-close"
                }), t ? zk(wl, null) : zk(Mk, null, zk("div", {
                    className: "student_vitals"
                }, zk("img", {
                    src: s.img
                }), zk("div", {
                    className: "course_vitals"
                }, zk("h2", {
                    dangerouslySetInnerHTML: {
                        __html: s.title
                    }
                }), zk("ul", null, zk("li", null, zk("label", null, window.wplms_course_data.translations.total_marks), zk("strong", null, zk("span", {
                    className: "grade " + s.grade.key
                }, zk("span", null, s.grade.value, "%"), s.grade.label ? zk("span", null, s.grade.label) : ""))), d ? zk("li", null, zk("label", null, window.wplms_course_data.translations.retake_course), zk("strong", null, d.total > d.consumed ? zk("a", {
                    onClick: () => {
                        m(!0), fetch(`${window.wplms_course_data.api_url}/user/retake_course/${e.course.id}`, {
                            method: "post",
                            body: JSON.stringify({
                                token: N
                            })
                        }).then((e => e.ok ? e.json() : {
                            status: 0,
                            message: window.wplms_course_data.translations.error_loading_data
                        })).then((t => {
                            m(!1), t.status && (e.remove(), e.close())
                        })).catch((e => {
                            m(!1), console.error("Uh oh, an error!", e), jk("vibebp").addNotification({
                                text: window.wplms_course_data.translations.error_loading_data
                            })
                        }))
                    },
                    className: u ? "button is-primary is-loading" : "button is-primary"
                }, window.wplms_course_data.translations.retake_course) : "", window.wplms_course_data.translations.remaining_retakes, d.total - d.consumed, "/", d.total)) : ""))), zk("div", {
                    className: "student_course_timeline"
                }, r.length ? zk("ul", {
                    className: "courseCurriculum"
                }, r.map(((e, t) => {
                    "section" == e.type && (q = t);
                    let a = e.type + " " + (e.status ? "done" : "");
                    return "section" != e.type && v > -1 && (a += v == q ? " open_lesson" : " collapsed_lesson"), zk("li", {
                        className: a
                    }, zk("p", null, e.icon && e.icon.length > 200 ? zk("span", {
                        dangerouslySetInnerHTML: {
                            __html: e.icon
                        }
                    }) : zk("span", {
                        className: e.icon
                    }), zk("span", {
                        className: "lesson_title",
                        dangerouslySetInnerHTML: {
                            __html: e.title
                        },
                        onClick: () => h(t)
                    })), "section" == e.type ? zk("i", t == v ? {
                        className: "vicon vicon-minus",
                        onClick: () => h(t)
                    } : {
                        className: "vicon vicon-plus",
                        onClick: () => h(t)
                    }) : "", "section" != e.type ? "unit" === e.type ? zk("div", {
                        className: "unit_progress_wrapper"
                    }, zk(Ii, {
                        progress: r[t] && "unit" == r[t].type && r[t].hasOwnProperty("progressbar") ? r[t].progressbar : 0,
                        size: "xs"
                    })) : zk("div", {
                        className: "unit_progress_wrapper"
                    }, e.max ? e.marks + "/" + e.max : "") : "")
                }))) : ""), zk("div", {
                    className: "course_activity portal_body"
                }, _.length ? zk("div", {
                    className: "activity_list"
                }, _.map((e => zk("div", {
                    className: "activity_item",
                    "data-activity-id": e.id
                }, zk("div", {
                    className: "activity_avatar"
                }, zk("img", {
                    src: e.avatar
                })), zk("div", {
                    className: "activity_body"
                }, zk("div", {
                    className: "activity_header"
                }, zk("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.action
                    }
                })), e.hasOwnProperty("content") && e.content.length ? zk("div", {
                    className: "activity_content"
                }, zk("span", {
                    dangerouslySetInnerHTML: {
                        __html: e.content
                    }
                }), zk("div", {
                    className: "activity_attachments"
                }, e.hasOwnProperty("meta") && Object.keys(e.meta).length ? Object.keys(e.meta).map((t => zk(Mk, null, e.meta[t].map((e => {
                    if (e.length > 3) {
                        if ("image" == t) return zk("img", {
                            src: e,
                            className: "activity_meta image"
                        });
                        if ("video" == t) return zk("div", {
                            className: "video_wrapper"
                        }, zk("video", {
                            className: "activity_meta video",
                            ref: e => {
                                e && new Plyr(e)
                            }
                        }, zk("source", {
                            src: e,
                            type: "video/mp4"
                        })));
                        if ("audio" == t) return zk("audio", {
                            className: "activity_meta audio",
                            ref: e => {
                                e && new Plyr(e)
                            }
                        }, zk("source", {
                            src: e,
                            type: "audio/mp3"
                        }));
                        if ("attachment" == t) return zk("a", {
                            href: e,
                            target: "_blank",
                            className: "vicon vicon-clip activity_meta"
                        })
                    }
                }))))) : "")) : "", zk(Ot, {
                    timestamp: e.date_recorded
                }))))), y ? zk("a", {
                    className: "link",
                    onClick: () => {
                        let e = {
                            ...f
                        };
                        e.page = f.page + 1, x(!0), g(e)
                    }
                }, window.vibebp.translations.more) : "") : "")))
            },
            {
                createElement: Hk,
                useState: Uk,
                useEffect: Fk,
                Fragment: Jk,
                render: Rk
            } = wp.element,
            {
                dispatch: Bk,
                select: Vk
            } = wp.data,
            Xk = e => {
                const [t, a] = Uk(!1), [s, n] = Uk([]), [i, o] = Uk([]), [r, l] = Uk([]), [d, c] = Uk({
                    s: "",
                    orderby: "",
                    order: "",
                    paged: 999,
                    per_page: 1
                }), [u, m] = Uk(""), [p, _] = Uk(!1), [w, v] = Uk(!0), [h, f] = Uk(!1), [g, y] = Uk(!1), [b, k] = Uk(!1);
                Vk("vibebp").getUser();
                let x = Vk("vibebp").getToken();
                const [N, q] = Uk(null);
                Fk((() => (document.addEventListener("vibebp_component_reload", O, !1), () => {
                    document.removeEventListener("vibebp_component_reload", O)
                })));
                const O = () => {
                    k(!1), c({
                        ...d,
                        paged: 1
                    }), I()
                };
                Fk((() => {
                    I()
                }), []), Fk((() => {
                    a(!0), N && N.abort();
                    let e = {},
                        t = new AbortController;
                    if (N && (e = {
                            signal: t.signal
                        }), q(t), b) return;
                    let s = {
                            ...d
                        },
                        n = 0;
                    s && s.hasOwnProperty("s") && void 0 !== s.s && s.s.length && (delete s.s, n = 1);
                    let i = `${window.wplms_course_data.api_url}/student/finishedCourses?args=${encodeURIComponent(JSON.stringify(s))}`;
                    w && n && (i += "&nocache"), fetch(i, {
                        method: "post",
                        ...e,
                        body: JSON.stringify({
                            ...d,
                            token: x
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (a(!1), e.status)
                            if (p) {
                                let t = [...r, ...e.courses];
                                l(t), _(!1), t.length < e.total ? v(!0) : (v(!1), d.s.length || k(!0))
                            } else e.hasOwnProperty("courses") && e.courses.length ? (l(e.courses), e.courses.length < e.total ? v(!0) : (v(!1), d.s.length || k(!0))) : m(e.message);
                        else e.hasOwnProperty("message") && (m(e.message), Bk("vibebp").addNotification({
                            text: e.message
                        }))
                    })).catch((e => {
                        "AbortError" === e.name ? console.log("Fetch aborted") : (a(!1), console.error("Uh oh, an error!", e), Bk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), [d]);
                const I = () => {
                    a(!0), fetch(`${window.wplms_course_data.api_url}/student/badges`, {
                        method: "post",
                        body: JSON.stringify({
                            token: x
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        a(!1), e.status && n(e.badges)
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), Bk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    })), a(!0), fetch(`${window.wplms_course_data.api_url}/student/certificates`, {
                        method: "post",
                        body: JSON.stringify({
                            token: x
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        a(!1), e.status && o(e.certificates)
                    })).catch((e => {
                        a(!1), console.error("Uh oh, an error!", e), Bk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        })
                    }))
                };
                let C = [...r];
                d.s.length && (C = C.filter((e => e.title.toLowerCase().includes(d.s.toLowerCase()))));
                let S = [];
                return C.length && C.map(((e, t) => {
                    e.instructor.map(((e, t) => {
                        S.indexOf(parseInt(e)) < 0 && S.push(parseInt(e))
                    }))
                })), Hk("div", {
                    className: "my_achievements_wrapper"
                }, s.length ? Hk("div", {
                    className: "my_badges_wrapper"
                }, Hk("h3", null, window.wplms_course_data.translations.my_badges), Hk("div", {
                    className: "my_badges course_blocks"
                }, s.map((e => Hk("div", {
                    className: "my_badge"
                }, Hk("img", {
                    src: e.value
                }), Hk("span", null, e.label)))))) : "", i.length ? Hk("div", {
                    className: "my_certificates_wrapper"
                }, Hk("h3", null, window.wplms_course_data.translations.my_certificates), Hk("div", {
                    className: "my_certificates course_blocks"
                }, i.map((e => Hk("div", {
                    className: "my_certificate",
                    onClick: () => window.open(e.value, "_blank")
                }, Hk("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "160",
                    height: "160",
                    viewBox: "0 0 24 24"
                }, Hk("path", {
                    d: "M14.969 9.547l.031.191c0 .193-.096.379-.264.496-.538.372-.467.278-.67.885-.084.253-.33.424-.605.424h-.002c-.664-.002-.549-.038-1.083.338-.112.08-.244.119-.376.119s-.264-.039-.376-.118c-.534-.376-.419-.34-1.083-.338h-.002c-.275 0-.521-.171-.605-.424-.203-.607-.133-.513-.669-.885-.169-.118-.265-.304-.265-.497l.031-.19c.207-.604.208-.488 0-1.094l-.031-.191c0-.193.096-.379.265-.497.536-.372.465-.277.669-.885.084-.253.33-.424.605-.424h.002c.662.002.544.041 1.083-.338.112-.08.244-.119.376-.119s.264.039.376.118c.534.376.419.34 1.083.338h.002c.275 0 .521.171.605.424.203.607.132.513.67.885.168.118.264.304.264.497l-.031.191c-.207.604-.208.488 0 1.094zm-1.469-1.198l-.465-.464-1.41 1.446-.66-.627-.465.464 1.125 1.091 1.875-1.91zm4.5 4.651h-12v1h12v-1zm-1 2h-10v1h10v-1zm1 2h-12v1h12v-1zm1-15h-19v20h24v-20h-5zm3 15.422c-1.151.504-2.074 1.427-2.578 2.578h-14.844c-.504-1.151-1.427-2.074-2.578-2.578v-10.844c1.151-.504 2.074-1.427 2.578-2.578h14.844c.504 1.151 1.427 2.074 2.578 2.578v10.844z"
                })), Hk("strong", {
                    dangerouslySetInnerHTML: {
                        __html: e.label
                    }
                })))))) : "", r.length ? Hk("div", {
                    className: "my_achievements_wrapper"
                }, g ? Hk(Dk, {
                    course: g,
                    close: () => y(!1),
                    remove: () => {
                        let e = [...r];
                        e.splice(e.findIndex((e => e.id == g.id)), 1), l(e)
                    }
                }) : Hk(Jk, null, Hk("h3", null, window.wplms_course_data.translations.my_courses), Hk("div", {
                    class: "mycourses_header vibebp_form"
                }, Hk("div", null, Hk("div", {
                    class: "vibebp_form_field"
                }, Hk("input", {
                    type: "text",
                    value: d.s,
                    onChange: e => {
                        c({
                            ...d,
                            s: e.target.value
                        })
                    },
                    placeholder: window.wplms_course_data.translations.search_courses
                }), Hk("span", {
                    className: "vicon vicon-search"
                }))), Hk("select", {
                    onChange: e => {
                        c({
                            ...d,
                            orderby: e.target.value
                        })
                    },
                    value: d.orderby
                }, Object.keys(window.wplms_course_data.orderby).map((e => Hk("option", {
                    value: e
                }, window.wplms_course_data.orderby[e]))))), Hk("div", {
                    className: "course_blocks"
                }, C.length ? Hk(Al, {
                    user_ids: S
                }, C.map((e => Hk("div", {
                    className: "finished_course",
                    onClick: () => y(e)
                }, Hk("img", {
                    src: e.img
                }), Hk("div", {
                    className: "finished_course_content"
                }, Hk("h3", null, Hk("div", {
                    dangerouslySetInnerHTML: {
                        __html: e.title
                    }
                }), Hk(jl, {
                    type: "user",
                    id: {
                        user_id: e.instructor
                    }
                })), Hk("div", {
                    className: "course_meta"
                }, e.certificate ? Hk("span", {
                    className: "course_certificate"
                }, Hk("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "24",
                    height: "24",
                    viewBox: "0 0 24 24"
                }, Hk("path", {
                    d: "M14.969 13.547l.031.191c0 .193-.096.379-.264.496-.538.372-.467.278-.67.885-.084.253-.33.424-.605.424h-.002c-.664-.002-.549-.038-1.083.338-.112.08-.244.119-.376.119s-.264-.039-.376-.118c-.534-.376-.419-.34-1.083-.338h-.002c-.275 0-.521-.171-.605-.424-.203-.607-.133-.513-.669-.885-.169-.118-.265-.304-.265-.497l.031-.19c.207-.604.208-.488 0-1.094l-.031-.191c0-.193.096-.379.265-.497.536-.372.466-.277.669-.885.084-.253.33-.424.605-.424h.002c.662.002.544.041 1.083-.338.112-.08.244-.119.376-.119s.264.039.376.118c.534.376.419.34 1.083.338h.002c.275 0 .521.171.605.424.203.607.132.513.67.885.168.118.264.304.264.497l-.031.191c-.207.604-.208.488 0 1.094zm-1.469-1.198l-.465-.464-1.41 1.446-.66-.627-.465.464 1.125 1.091 1.875-1.91zm8.5-4.349v14h-20v-14h20zm2-2h-24v18h24v-18zm-5 11h-14v1h14v-1zm0 2h-14v1h14v-1zm-7-19c-.828 0-1.5.671-1.5 1.5s.672 1.5 1.5 1.5 1.5-.671 1.5-1.5-.672-1.5-1.5-1.5zm-4.74 5l2.771-1.979c-.206-.267-.36-.574-.446-.91l-4.045 2.889h1.72zm11.2 0l-4.044-2.889c-.086.336-.24.643-.446.91l2.77 1.979h1.72z"
                }))) : "", Hk("div", {
                    className: "course_grade " + e.grade.key
                }, Hk(Ii, {
                    size: "xs",
                    progress: e.grade.value
                }), Hk("span", {
                    className: "grade " + e.grade.key
                }, Hk("span", null, e.grade.value, "%"), e.grade.label ? Hk("span", null, e.grade.label) : "")), e.badge ? Hk("span", {
                    className: "course_badge"
                }, Hk("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "24",
                    height: "24",
                    viewBox: "0 0 24 24"
                }, Hk("path", {
                    d: "M11.25 9.541l-2.25-2.182.929-.929 1.321 1.253 2.821-2.892.929.93-3.75 3.82zm7.676-3.819c-.482 1.41-.484 1.139 0 2.555.05.147.074.297.074.445 0 .449-.222.883-.615 1.156-1.256.87-1.09.651-1.562 2.067-.198.591-.77.99-1.415.99h-.003c-1.549-.005-1.28-.088-2.528.789-.262.184-.569.276-.877.276s-.615-.092-.876-.275c-1.249-.878-.98-.794-2.528-.789h-.004c-.645 0-1.216-.399-1.413-.99-.473-1.417-.311-1.198-1.562-2.067-.395-.274-.617-.708-.617-1.157 0-.148.024-.298.074-.444.483-1.411.484-1.139 0-2.555-.05-.147-.074-.297-.074-.445 0-.45.222-.883.616-1.157 1.251-.868 1.089-.648 1.562-2.067.197-.591.769-.99 1.413-.99h.004c1.545.005 1.271.095 2.528-.79.262-.183.569-.274.877-.274s.615.091.876.274c1.248.878.98.795 2.528.79h.003c.646 0 1.217.399 1.415.99.473 1.416.307 1.197 1.562 2.067.394.273.616.707.616 1.156 0 .148-.024.299-.074.445zm-2.176 1.278c0-2.623-2.127-4.75-4.75-4.75s-4.75 2.127-4.75 4.75 2.127 4.75 4.75 4.75 4.75-2.128 4.75-4.75zm-7.385 7.931c-.766 0-1.371-.074-1.873-.213-.308 3.068-1.359 5.37-3.492 7.592.854.107 1.95-.094 2.833-.56.317.636.65 1.43.767 2.25 2.009-2.299 3.266-5.054 3.734-8.071-.943-.181-1.234-.496-1.969-.998zm5.27 0c-.737.507-1.043.82-1.968.998.47 3.017 1.726 5.772 3.733 8.071.116-.82.449-1.614.767-2.25.883.465 1.979.667 2.833.56-2.13-2.219-3.168-4.531-3.479-7.595-.503.141-1.112.216-1.886.216z"
                }))) : "")))))) : ""))) : Hk("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_finished_courses))
            },
            {
                createElement: Wk,
                useState: Yk,
                useEffect: Qk,
                Fragment: Kk,
                render: Gk
            } = wp.element,
            {
                dispatch: Zk,
                select: ex
            } = wp.data,
            tx = e => {
                const [t, a] = Yk(!1), [s, n] = Yk([]), [i, o] = Yk({
                    s: "",
                    orderby: "",
                    order: "DESC",
                    paged: 1,
                    per_page: 12,
                    quiz_status: "attempted"
                }), [r, l] = Yk(""), [d, c] = Yk(!1), [u, m] = Yk(!1), [_, w] = Yk(!0), [v, h] = Yk("view"), [f, g] = Yk(!1), [y, b] = Yk(0), [k, x] = Yk(!1);
                let N = ex("vibebp").getUser(),
                    q = ex("vibebp").getToken();
                const [O, I] = Yk(null);
                Qk((() => (document.addEventListener("vibebp_component_reload", C, !1), () => {
                    document.removeEventListener("vibebp_component_reload", C)
                })));
                const C = () => {
                    if (f) {
                        let e = f;
                        g(!1), g(e)
                    } else x(!1), o({
                        ...i,
                        paged: 1
                    })
                };
                p((() => {
                    O && O.abort();
                    let e = {},
                        t = new AbortController;
                    if (O && (e = {
                            signal: t.signal
                        }), k) return;
                    a(!0), I(t);
                    let o = {
                            ...i
                        },
                        r = 0;
                    o && o.hasOwnProperty("s") && void 0 !== o.s && o.s.length && (delete o.s, r = 1);
                    let m = `${window.wplms_course_data.api_url}/student/quiz?args=${encodeURIComponent(JSON.stringify(o))}`;
                    !k && r && (m += "&nocache"), d && n([]), fetch(m, {
                        method: "POST",
                        ...e,
                        body: JSON.stringify({
                            ...i,
                            token: q
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (w(!1), a(!1), c(!1), e.status)
                            if (u) {
                                let t = [...s];
                                e.hasOwnProperty("quizzes") && e.quizzes && e.quizzes.length && (e.quizzes.map(((e, a) => {
                                    t.push(e)
                                })), n(t)), t.length < parseInt(e.total) ? w(!0) : i.s.length || x(!0)
                            } else Array.isArray(e.quizzes) ? (n(e.quizzes), e.quizzes.length < parseInt(e.total) ? w(!0) : i.s.length || x(!0)) : u || n([]);
                        else l(e.message);
                        e.hasOwnProperty("assigned_quizzes") && b(e.assigned_quizzes)
                    })).catch((e => {
                        "AbortError" === e.name ? console.log("Fetch aborted") : (a(!1), c(!1), console.error("Uh oh, an error!", e), Zk("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [i]);
                let S = [...s];
                if (i.s.length && (S = S.filter((e => e.title.toLowerCase().includes(i.s.toLowerCase())))), i.orderby.length && i.order) switch (i.orderby) {
                    case "date":
                    default:
                        "DESC" == i.order ? S.sort((function(e, t) {
                            return new Date(t.attempted_date).getTime() - new Date(e.attempted_date).getTime()
                        })) : S.sort((function(e, t) {
                            return new Date(e.attempted_date).getTime() - new Date(t.attempted_date).getTime()
                        }));
                        break;
                    case "title":
                        "DESC" == i.order ? S.sort((function(e, t) {
                            return t.title.localeCompare(e.title)
                        })) : S.sort((function(e, t) {
                            return e.title.localeCompare(t.title)
                        }));
                        break;
                    case "comment_count":
                        "DESC" == i.order ? S.sort((function(e, t) {
                            return t.count - e.count
                        })) : S.sort((function(e, t) {
                            return e.count - t.count
                        }))
                }
                return Wk("div", {
                    className: "wplms_manage_quizzes_wrapper"
                }, f ? Wk("div", {
                    className: "quiz_wrapper"
                }, Wk("div", {
                    className: "quiz_header"
                }, Wk("span", {
                    className: "header_links"
                }, Wk("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        g(!1)
                    }
                })), Wk("h2", {
                    dangerouslySetInnerHTML: {
                        __html: f.title
                    }
                }), Wk("div", {
                    className: "quiz_info"
                }, Wk("div", null, Wk("span", null, Wk("span", {
                    className: "vicon vicon-calendar"
                }), Wk(Ot, {
                    timestamp: f.attempted_date
                })), Wk("div", {
                    className: "wplms_quiz-type"
                }, f["quiz-type"].length ? f["quiz-type"].map((e => Wk("span", null, e))) : "")), Wk("div", null, Wk("span", null, Wk("span", {
                    className: "vicon vicon-cup"
                }), " ", f.marks, " / ", f.max), (() => {
                    if (N.hasOwnProperty("caps")) switch (window.wplms_course_data.course.stats_visibility) {
                        case 0:
                        case 1:
                            return !0;
                        case 2:
                            return !(!N.caps.hasOwnProperty("edit_posts") || !N.caps.edit_posts);
                        case 3:
                            return !(!N.caps.hasOwnProperty("manage_options") || !N.caps.manage_options);
                        default:
                            return !1
                    }
                })() ? Wk("div", {
                    className: "myquiz_tabs buttons has-addons small"
                }, Wk("a", {
                    className: "view" == v ? "is-focused button" : "button",
                    onClick: () => {
                        h("view")
                    }
                }, Wk("span", {
                    className: "vicon vicon-eye"
                })), Wk("a", {
                    className: "stats" == v ? "is-focused button" : "button",
                    onClick: () => {
                        h("stats")
                    }
                }, Wk("span", {
                    className: "vicon vicon-clipboard"
                }))) : ""))), "view" == v ? f.hasOwnProperty("quiz_type") ? Wk("div", null, (() => {
                    var e = {
                        coursestatus: {},
                        type: f.quiz_type,
                        id: f.id,
                        course_id: 0
                    };
                    f.hasOwnProperty("content_id") && (e.content_id = f.content_id);
                    var t = new CustomEvent("custom_quiz_type", {
                        detail: e
                    });
                    return document.dispatchEvent(t), Wk("div", {
                        id: f.quiz_type,
                        quizid: f.id
                    })
                })()) : Wk(id, {
                    quizid: f.id,
                    update: () => {}
                }) : "stats" == v ? Wk(Df, {
                    cpt: "quiz",
                    id: f.id,
                    nodownload: 1
                }) : "") : Wk(Kk, null, Wk("div", {
                    className: "mycourses_header vibebp_form"
                }, Wk("div", null, window.wplms_course_data.enable_assign_quiz ? Wk("div", {
                    className: "vibebp_form_field quizzes_tabs no_border"
                }, Wk("a", {
                    onClick: e => {
                        c(!0), x(!1), o({
                            ...i,
                            quiz_status: "attempted",
                            paged: 1
                        })
                    },
                    className: "attempted" == i.quiz_status ? "active button is-primary" : "link"
                }, window.wplms_course_data.translations.attempted), Wk("a", {
                    onClick: e => {
                        c(!0), x(!1), o({
                            ...i,
                            quiz_status: "assigned",
                            paged: 1
                        })
                    },
                    className: "assigned" == i.quiz_status ? "active button is-primary" : "link"
                }, window.wplms_course_data.translations.assigned, Wk("span", {
                    className: "count"
                }, y))) : ""), Wk("div", {
                    className: "flex2"
                }, Wk("div", {
                    className: "vibebp_form_field"
                }, Wk("input", {
                    type: "text",
                    placeholder: window.vibebp.translations.search_text,
                    value: i.s,
                    onChange: e => {
                        o({
                            ...i,
                            s: e.target.value
                        })
                    }
                }), Wk("span", {
                    className: "vicon vicon-search"
                })), Wk("select", {
                    value: i.orderby,
                    onChange: e => {
                        o({
                            ...i,
                            orderby: e.target.value
                        })
                    }
                }, Wk("option", null, window.vibebp.translations.select_option), Object.keys(window.wplms_course_data.orderby).map((e => Wk("option", {
                    value: e
                }, window.wplms_course_data.orderby[e])))), Wk("span", null, Wk("span", {
                    className: "ASC" == i.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                    onClick: () => {
                        o({
                            ...i,
                            order: "ASC"
                        })
                    }
                }), Wk("span", {
                    className: "DESC" == i.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                    onClick: () => {
                        o({
                            ...i,
                            order: "DESC"
                        })
                    }
                })))), Wk(Kk, null, d && !u || t && !u ? Wk(wl, null) : S.length ? Wk("div", {
                    className: "vibebp_quizzes"
                }, S.map((e => Wk("div", {
                    className: "wplms_quiz",
                    onClick: () => g(e)
                }, Wk("div", null, Wk("h3", {
                    dangerouslySetInnerHTML: {
                        __html: e.title
                    }
                }), Wk("span", null, Wk(Ot, {
                    timestamp: e.attempted_date
                })), Wk("div", {
                    className: "wplms_quiz-type"
                }, e["quiz-type"].length ? e["quiz-type"].map((e => Wk("span", null, e))) : "")), Wk("div", {
                    className: "quiz_meta"
                }, Wk("span", null, Wk("span", {
                    className: "vicon vicon-time"
                }), " ", e.count), Wk("span", null, Wk("span", {
                    className: "vicon vicon-medall-alt"
                }), " ", e.marks, " /", e.max))))), !t && _ ? Wk("a", {
                    className: "link",
                    onClick: () => {
                        m(!0), w(!1), o({
                            ...i,
                            paged: i.paged + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : t && u ? Wk(wl, null) : "") : Wk("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_quizzes))))
            },
            {
                createElement: ax,
                useState: sx,
                useEffect: nx,
                Fragment: ix,
                render: ox
            } = wp.element,
            {
                dispatch: rx,
                select: lx
            } = wp.data,
            dx = e => {
                const [t, a] = sx(!1), [s, n] = sx([]), [i, o] = sx({
                    s: "",
                    orderby: "",
                    order: "DESC",
                    page: 1,
                    per_page: 12,
                    assignment_status: "attempted"
                }), [r, l] = sx(""), [d, c] = sx(0), [u, m] = sx(!1), [_, w] = sx(!0), [v, h] = sx(!1), [f, g] = sx(!1), [y, b] = sx(!1);
                lx("vibebp").getUser();
                let k = lx("vibebp").getToken();
                const [x, N] = sx(null), q = () => {
                    if (v) {
                        let e = v;
                        h(!1), h(e)
                    } else g(!1), o({
                        ...i,
                        page: 1
                    })
                };
                nx((() => (document.addEventListener("vibebp_component_reload", q), () => {
                    document.removeEventListener("vibebp_component_reload", q)
                }))), p((() => {
                    x && x.abort();
                    let e = {},
                        t = new AbortController;
                    if (x && (e = {
                            signal: t.signal
                        }), f) return;
                    a(!0), N(t);
                    let o = {
                            ...i
                        },
                        r = 0;
                    o && o.hasOwnProperty("s") && void 0 !== o.s && o.s.length && (delete o.s, r = 1);
                    let d = `${window.wplms_course_data.api_url}/student/assignments?args=${encodeURIComponent(JSON.stringify(o))}`;
                    _ && r && (d += "&nocache"), y && n([]), fetch(d, {
                        method: "post",
                        ...e,
                        body: JSON.stringify({
                            ...i,
                            token: k
                        })
                    }).then((e => e.ok ? e.json() : {
                        status: 0,
                        message: window.wplms_course_data.translations.error_loading_data
                    })).then((e => {
                        if (w(!1), a(!1), b(!1), e.status) {
                            if (u) {
                                let t = [...s, ...e.assignments];
                                n(t), m(!1), t.length < e.total ? w(!0) : (w(!1), i.s.length || g(!0))
                            } else e.hasOwnProperty("assignments") && e.assignments.length ? (n(e.assignments), e.assignments.length < e.total ? w(!0) : (w(!1), i.s.length || g(!0))) : l(e.message);
                            e.hasOwnProperty("assigned_assignments") && c(e.assigned_assignments)
                        } else e.hasOwnProperty("message") && rx("vibebp").addNotification({
                            text: e.message
                        })
                    })).catch((e => {
                        "AbortError" === e.name ? a(!0) : (b(!1), a(!1), console.error("Uh oh, an error!", e), rx("vibebp").addNotification({
                            text: window.wplms_course_data.translations.error_loading_data
                        }))
                    }))
                }), 500, [i]);
                let O = [...s];
                if (i.s.length && (O = O.filter((e => e.title.toLowerCase().includes(i.s.toLowerCase())))), i.orderby.length && i.order) switch (i.orderby) {
                    case "date":
                    default:
                        "DESC" == i.order ? O.sort((function(e, t) {
                            return new Date(t.attempted_date).getTime() - new Date(e.attempted_date).getTime()
                        })) : O.sort((function(e, t) {
                            return new Date(e.attempted_date).getTime() - new Date(t.attempted_date).getTime()
                        }));
                        break;
                    case "title":
                        "DESC" == i.order ? O.sort((function(e, t) {
                            return t.title.localeCompare(e.title)
                        })) : O.sort((function(e, t) {
                            return e.title.localeCompare(t.title)
                        }));
                        break;
                    case "comment_count":
                        "DESC" == i.order ? O.sort((function(e, t) {
                            return t.count - e.count
                        })) : O.sort((function(e, t) {
                            return e.count - t.count
                        }))
                }
                return ax("div", {
                    className: "wplms_manage_quizzes_wrapper"
                }, v ? ax("div", {
                    className: "quiz_wrapper"
                }, ax("div", {
                    className: "quiz_header"
                }, ax("span", {
                    className: "header_links"
                }, ax("span", {
                    className: "vicon vicon-arrow-left",
                    onClick: () => {
                        h(!1)
                    }
                })), ax("h2", null, v.title), ax("div", {
                    className: "quiz_info"
                }, ax("div", null, ax("span", null, ax("span", {
                    className: "vicon vicon-calendar"
                }), ax(Ot, {
                    timestamp: v.attempted_date
                })), ax("div", {
                    className: "wplms_quiz-type"
                }, v["assignment-type"].length ? v["assignment-type"].map((e => ax("span", null, e))) : "")), ax("div", null, ax("span", null, ax("span", {
                    className: "vicon vicon-cup"
                }), " ", v.marks, " / ", v.max)))), ax(Ld, {
                    assignment: v,
                    update: () => {}
                })) : ax(ix, null, ax("div", {
                    className: "mycourses_header vibebp_form"
                }, ax("div", null, window.wplms_course_data.enable_assign_quiz ? ax("div", {
                    className: "vibebp_form_field quizzes_tabs no_border"
                }, ax("a", {
                    onClick: e => {
                        b(!0), g(!1), o({
                            ...i,
                            assignment_status: "attempted",
                            paged: 1
                        })
                    },
                    className: "attempted" == i.assignment_status ? "active button is-primary" : "link"
                }, window.wplms_course_data.translations.attempted), ax("a", {
                    onClick: e => {
                        b(!0), g(!1), o({
                            ...i,
                            assignment_status: "assigned",
                            paged: 1
                        })
                    },
                    className: "assigned" == i.assignment_status ? "active button is-primary" : "link"
                }, window.wplms_course_data.translations.assigned, ax("span", {
                    className: "count"
                }, d))) : ""), ax("div", null, ax("div", {
                    className: "vibebp_form_field"
                }, ax("input", {
                    type: "text",
                    placeholder: window.vibebp.translations.search_text,
                    value: i.s,
                    onChange: e => {
                        o({
                            ...i,
                            s: e.target.value
                        })
                    }
                }), ax("span", {
                    className: "vicon vicon-search"
                }))), ax("div", null, ax("select", {
                    value: i.orderby,
                    onChange: e => {
                        o({
                            ...i,
                            orderby: e.target.value
                        })
                    }
                }, ax("option", null, window.vibebp.translations.select_option), Object.keys(window.wplms_course_data.orderby).map((e => ax("option", {
                    value: e
                }, window.wplms_course_data.orderby[e])))), ax("span", null, ax("span", {
                    className: "ASC" == i.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                    onClick: () => {
                        o({
                            ...i,
                            order: "ASC"
                        })
                    }
                }), ax("span", {
                    className: "DESC" == i.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                    onClick: () => {
                        o({
                            ...i,
                            order: "DESC"
                        })
                    }
                })))), !u && t ? ax(wl, null) : "", O.length ? ax("div", {
                    className: "vibebp_quizzes"
                }, O.map((e => ax("div", {
                    className: "wplms_quiz",
                    onClick: () => h(e)
                }, ax("div", null, ax("h3", null, e.title), ax(Ot, {
                    timestamp: e.attempted_date
                }), ax("div", {
                    className: "wplms_quiz-type"
                }, e["assignment-type"].length ? e["assignment-type"].map((e => ax("span", null, e))) : "")), ax("div", {
                    className: "quiz_meta"
                }, ax("span", null, ax("span", {
                    className: "vicon vicon-time"
                }), " ", e.count), ax("span", null, ax("span", {
                    className: "vicon vicon-medall-alt"
                }), " ", e.marks, " /", e.max))))), !t && _ ? ax("a", {
                    className: "link",
                    onClick: () => {
                        m(!0), o({
                            ...i,
                            page: i.page + 1
                        })
                    }
                }, window.wplms_course_data.translations.load_more) : t && u ? ax(wl, null) : "") : ax("div", {
                    className: "vbp_message"
                }, window.wplms_course_data.translations.no_assignments)))
            },
            {
                createElement: cx,
                useState: ux,
                useEffect: mx,
                Fragment: px,
                render: _x,
                useRef: wx
            } = wp.element,
            {
                dispatch: vx,
                select: hx
            } = wp.data,
            fx = e => {
                let t = hx("vibebp").getUser();
                t.token = hx("vibebp").getToken(), mx((() => {
                    window.scorm_page_type = "course", window.scorm_wplms_data = {}, window.scorm_wplms_data.user_email = t.email, window.scorm_wplms_data.user_name = t.username, window.scorm_wplms_data.token = t.token, window.scorm_wplms_data.course_id = e.course_id, window.scorm_wplms_data.module_id = e.quiz_id, window.is_take_course = !0, window.scorm_wplms_data.type = "quiz";
                    var s = new CustomEvent("unit_content_loaded", {
                        detail: {}
                    });
                    return document.dispatchEvent(s), document.addEventListener("scormquizsubmitted", a), () => {
                        document.removeEventListener("scormquizsubmitted", a)
                    }
                }), [e.quiz_id]);
                const a = t => {
                    var a = {
                            coursestatus: e.coursestatus,
                            action: "quizsubmitted",
                            id: e.quiz_id,
                            course_id: e.course_id
                        },
                        s = new CustomEvent("custom_quiz_action", {
                            detail: a
                        });
                    document.dispatchEvent(s)
                };
                return cx("div", {
                    className: "ScormQuiz"
                }, cx("div", {
                    className: "quiz_content"
                }, cx("div", {
                    className: "new_quiz_scorm_wrapper wplms_iframe_wrapper",
                    dangerouslySetInnerHTML: {
                        __html: e.content_id
                    }
                })))
            };
        document.addEventListener("custom_quiz_type", (e => {
            "scorm" === e.detail.type && setTimeout((() => {
                _x(cx(fx, {
                    quiz_id: e.detail.id,
                    course_id: e.detail.course_id,
                    content_id: e.detail.content_id,
                    coursestatus: e.detail.coursestatus
                }), document.querySelector("#scorm"))
            }), 200)
        }), !1);
        const {
            createElement: gx,
            useState: yx,
            useEffect: bx,
            Fragment: kx,
            render: xx,
            useContext: Nx
        } = wp.element, {
            select: qx
        } = wp.data, Ox = e => {
            const [t, a] = yx(!1), [s, n] = yx({}), [i, o] = yx(!1);
            return bx((() => {
                a(!0), fetch(`${window.wplms_course_data.api_url}/student/lmsbadge`, {
                    method: "post",
                    body: JSON.stringify({
                        badge_id: e.badge.id,
                        token: qx("vibebp").getToken()
                    })
                }).then((e => e.json())).then((t => {
                    a(!1), t.status && n({
                        ...e.badge,
                        ...t.data.badge
                    })
                }))
            }), []), gx("div", {
                className: "vibebp_showlmsbadge"
            }, gx("div", {
                className: "vibe_editor_modal"
            }, gx("span", {
                onClick: e.close
            }), gx("div", {
                className: "ve_modal-content"
            }, gx("div", {
                className: "ve_modal-header"
            }, gx("span", null), gx("span", {
                onClick: e.close
            }, gx("span", {
                className: "vicon vicon-close"
            }))), t ? gx(wl, null) : "", s && s.id ? gx(kx, null, gx("div", {
                className: "ve_modal-body"
            }, gx("div", {
                className: "badge_tab1"
            }, s.description.length < 100 || i ? gx("div", null, gx("div", null, s.description)) : gx("div", null, gx("div", null, s.description.substring(0, 99)), gx("span", {
                className: "link",
                onClick: () => o(!0)
            }, window.wplms_course_data.translations.read_more)), gx("div", {
                className: "badge_users"
            }, s.users.ids.map((e => gx("div", null, gx(jl, {
                type: "member",
                id: {
                    user_id: e
                }
            }))))), gx("div", {
                className: "more_badge_users"
            }, s.users.total_users - s.users.ids.length > 0 ? gx("span", null, "+", s.users.total_users - s.users.ids.length, " ", window.wplms_course_data.translations.more) : "")), gx("div", {
                className: "badge_tab2"
            }, gx("div", {
                className: "badge_details"
            }, s.image ? gx("img", {
                className: "badge_image",
                src: s.image,
                alt: "Badge Image"
            }) : gx("img", {
                className: "badge_image",
                src: window.wplms_course_data.default_badge,
                alt: "Badge Image"
            }), gx("div", {
                className: "badge_name"
            }, s.name), gx("div", null, s.subtitle), gx("div", {
                class: "course_progress_wrapper"
            }, gx("div", {
                class: "course_progress"
            }, s.point <= s.user_point ? gx("span", {
                style: {
                    width: "100%"
                }
            }) : gx("span", {
                style: {
                    width: 100 * s.user_point / s.point + "%"
                }
            })), gx("span", null, s.point, "/", s.user_point)))))) : "")))
        }, {
            createElement: Ix,
            useState: Cx,
            useEffect: Sx,
            Fragment: Px,
            render: Ex,
            useContext: zx
        } = wp.element, {
            select: Tx
        } = wp.data, Lx = e => {
            const [t, a] = Cx({
                s: "",
                starting_point: -1,
                direction: ""
            }), [s, n] = Cx({
                left: null,
                right: null
            }), [i, o] = Cx(!1), [r, l] = Cx({
                left: !1,
                right: !1
            }), [d, c] = Cx([]), [u, m] = Cx(!0), [_, w] = Cx(null), [v, h] = Cx(!1);
            Sx((() => (document.addEventListener("vibebp_component_reload", f), () => {
                document.removeEventListener("vibebp_component_reload", f)
            })), []);
            const f = () => {
                a({
                    ...t,
                    s: ""
                })
            };
            p((() => {
                if (t.starting_point > -1) {
                    r.left || r.right || o(!0);
                    let e = t.s.length ? "?nocache" : `?args=${encodeURIComponent(JSON.stringify(t))}`;
                    fetch(`${window.wplms_course_data.api_url}/student/lmsbadges${e}`, {
                        method: "post",
                        body: JSON.stringify({
                            filter: {
                                ...t
                            },
                            token: Tx("vibebp").getToken()
                        })
                    }).then((e => e.json())).then((e => {
                        if (o(!1), l({
                                left: !1,
                                right: !1
                            }), e.status) {
                            let a = [...d];
                            "<" == t.direction ? c([...e.badges, ...a]) : ">=" == t.direction ? c([...a, ...e.badges]) : c(e.badges), n({
                                ...s,
                                ...e.offset
                            })
                        } else n({
                            ...s,
                            ...e.offset
                        })
                    }))
                }
            }), 500, [t]), Sx((() => {
                m(!0), fetch(`${window.wplms_course_data.api_url}/student/gamification_point?nocache`, {
                    method: "post",
                    body: JSON.stringify({
                        token: Tx("vibebp").getToken()
                    })
                }).then((e => e.json())).then((e => {
                    m(!1), e.status && (w(e.points), a({
                        ...t,
                        starting_point: e.points
                    }))
                }))
            }), []);
            let g = [...d];
            return t.s.length && (g = d.filter((e => e.name.toLowerCase().indexOf(t.s.toLowerCase()) > -1))), Ix("div", {
                className: "vibebp_lmsbadges"
            }, Ix("div", {
                className: "vibebp_main_header vibebp_form"
            }, Ix("div", null), u ? Ix(wl, null) : Ix("div", {
                className: "user_poins"
            }, Ix("span", null, window.wplms_course_data.translations.total_points), Ix("span", null, _))), Ix("div", {
                className: "wplms_lmsbadges_wrapper"
            }, g && g.length ? Ix(Px, null, Ix("div", {
                className: "wplms_all_lmsbadges"
            }, Ix("div", {
                className: "scroll_left_right"
            }, r.left ? Ix(wl, null) : s.left ? Ix("span", {
                className: "left_button",
                onClick: () => {
                    a({
                        ...t,
                        direction: "<",
                        offset: s.left
                    }), l({
                        ...r,
                        left: !0
                    })
                }
            }, Ix("span", {
                className: "vicon vicon-arrow-left"
            })) : ""), g.map((e => Ix("div", {
                className: e.point <= _ ? "single_lmsbadge active" : "single_lmsbadge inactive",
                onClick: () => h(e)
            }, e.image ? Ix("img", {
                className: "badge_image",
                src: e.image,
                alt: "Badge Image"
            }) : Ix("img", {
                className: "badge_image",
                src: window.wplms_course_data.default_badge,
                alt: "Badge Image"
            }), Ix("div", null, Ix("div", null, Ix("div", {
                className: "badge_title"
            }, e.name), Ix("div", {
                className: "badge_point"
            }, Ix("span", null, e.point, " ", window.wplms_course_data.translations.point))))))), Ix("div", {
                className: "scroll_left_right"
            }, r.right ? Ix(wl, null) : s.right ? Ix("span", {
                className: "right_button",
                onClick: () => {
                    a({
                        ...t,
                        direction: ">=",
                        offset: s.right
                    }), l({
                        ...r,
                        right: !0
                    })
                }
            }, Ix("span", {
                className: "vicon vicon-arrow-right"
            })) : ""))) : Ix("div", {
                className: "vbp_message"
            }, window.wplms_course_data.translations.no_lmsbadge), i ? Ix(wl, null) : "", v ? Ix(Ox, {
                badge: v,
                close: () => h(!1)
            }) : ""))
        }, {
            createElement: Mx,
            useState: $x,
            useEffect: jx,
            Fragment: Ax,
            render: Dx
        } = wp.element, {
            dispatch: Hx,
            select: Ux
        } = wp.data, Fx = e => {
            const [t, a] = $x(e.activity), [s, n] = $x(!1);
            jx((() => {
                a(e.activity)
            }), [e.activity]), t.hasOwnProperty("date_recorded") || (t.date_recorded = (new Date).getTime());
            let i = "activity_item " + t.type + " " + t.component;
            return t.hasOwnProperty("content") && t.content.length && (i += " with_activity_content"), s && (i += " removed"), "string" == typeof t.date_recorded && (t.date_recorded = parseInt(new Date(new Date(t.date_recorded).getTime() - 1e3 * (new Date).getTimezoneOffset() * 60).getTime() / 1e3)), Mx("div", {
                className: i,
                "data-activity-id": t.id
            }, Mx("div", {
                className: "activity_avatar"
            }, Mx("img", {
                src: t.avatar
            })), Mx("div", {
                className: "activity_body"
            }, Mx("div", {
                className: "activity_header"
            }, Mx("span", {
                dangerouslySetInnerHTML: {
                    __html: t.action
                }
            })), t.hasOwnProperty("content") && t.content.length ? Mx("div", {
                className: "activity_content"
            }, Mx("span", {
                dangerouslySetInnerHTML: {
                    __html: t.content
                }
            }), Mx("div", {
                className: "activity_attachments"
            }, t.hasOwnProperty("meta") && Object.keys(t.meta).length ? Object.keys(t.meta).map((e => Mx(Ax, null, t.meta[e].map((t => {
                if (t.length > 3) {
                    if ("image" == e) return Mx("img", {
                        src: t,
                        className: "activity_meta image"
                    });
                    if ("video" == e) return Mx("video", {
                        className: "activity_meta video",
                        ref: e => {
                            e && new Plyr(e)
                        }
                    }, Mx("source", {
                        src: t,
                        type: "video/mp4"
                    }));
                    if ("audio" == e) return Mx("audio", {
                        className: "activity_meta audio",
                        ref: e => {
                            e && new Plyr(e)
                        }
                    }, Mx("source", {
                        src: videoUrl,
                        type: "audio/mp3"
                    }));
                    if ("attachment" == e) return Mx("a", {
                        href: t,
                        target: "_blank",
                        className: "vicon vicon-clip activity_meta"
                    })
                }
            }))))) : "")) : "", Mx("span", {
                className: "datetime"
            }, Mx(Ot, {
                timestamp: t.date_recorded
            }))))
        }, {
            createElement: Jx,
            useState: Rx,
            useEffect: Bx,
            Fragment: Vx,
            render: Xx
        } = wp.element, {
            dispatch: Wx,
            select: Yx
        } = wp.data, Qx = e => {
            const [t, a] = Rx({
                paged: 1,
                s: "",
                order: "DESC"
            }), [s, n] = Rx({
                ...t
            }), [i, o] = Rx(!1), [r, l] = Rx(!1), [d, c] = Rx([]);
            Bx((() => (document.addEventListener("vibebp_component_reload", u), () => {
                document.removeEventListener("vibebp_component_reload", u)
            })), []);
            const u = () => {
                a({
                    ...t,
                    s: "",
                    paged: 1
                })
            };
            p((() => {
                o(!0);
                let e = t.s.length ? "?nocache" : `?args=${encodeURIComponent(JSON.stringify({...t,s:""}))}`,
                    a = 1 != t.paged || t.s ? [...d] : [];
                m(a), l(!1), fetch(`${window.wplms_course_data.api_url}/student/lmsbadges_activitities${e}`, {
                    method: "post",
                    body: JSON.stringify({
                        filter: {
                            ...t
                        },
                        token: Yx("vibebp").getToken()
                    })
                }).then((e => e.json())).then((e => {
                    if (o(!1), e.status) {
                        a = 1 == t.paged ? [] : [...d];
                        let s = [...a, ...e.activities];
                        l(e.has_more_items), m(s)
                    }
                }))
            }), 500, [t]);
            const m = e => {
                c(e)
            };
            return Jx("div", {
                className: "lmsactivities_activities"
            }, Jx("div", {
                className: "portal"
            }, Jx("div", {
                className: "portal_header"
            }, Jx("div", {
                className: "header_links"
            }, Jx("div", {
                className: "searchbox active"
            }, Jx("span", {
                className: "vicon vicon-search"
            }), Jx("input", {
                type: "text",
                placeholder: window.wplms_course_data.translations.search,
                value: t.s,
                onChange: e => {
                    a({
                        ...t,
                        s: e.target.value,
                        paged: 1
                    })
                }
            }))), Jx("div", {
                className: "header_extras"
            }, Jx("div", {
                className: "filter_by"
            }, Jx("span", null, Jx("span", {
                className: "ASC" == t.order ? "vicon vicon-angle-up active" : "vicon vicon-angle-up",
                onClick: () => {
                    a({
                        ...t,
                        order: "ASC",
                        paged: 1
                    })
                }
            }), Jx("span", {
                className: "DESC" == t.order ? "vicon vicon-angle-down active" : "vicon vicon-angle-down",
                onClick: () => {
                    a({
                        ...t,
                        order: "DESC",
                        paged: 1
                    })
                }
            }))))), Jx("div", {
                className: "portal_body"
            }, d && d.length ? Jx("div", {
                className: "activity_list"
            }, d.map((e => Jx(Fx, {
                activity: e
            })))) : Jx("div", {
                className: "vbp_message"
            }, window.wplms_course_data.translations.no_activity), r ? Jx("a", {
                className: "link",
                onClick: () => {
                    a({
                        ...t,
                        paged: t.paged + 1
                    })
                }
            }, window.wplms_course_data.translations.load_more) : "", i ? Jx(wl, null) : "")))
        }, {
            createElement: Kx
        } = wp.element, Gx = e => Kx("div", {
            className: "vibebp_pointsbadges_wrapper"
        }, Kx("div", {
            className: "vibebp_lmsbadges_wrapper"
        }, Kx(Lx, null)), Kx("div", {
            className: "vibebp_lmsbadges_activities_wrapper"
        }, Kx(Qx, null))), {
            createElement: Zx,
            useState: eN,
            useEffect: tN,
            Fragment: aN,
            render: sN
        } = wp.element, {
            dispatch: nN,
            select: iN
        } = wp.data, oN = e => {
            const [t, a] = eN(!1), [s, n] = eN([]), [i, o] = eN([]), [r, l] = eN(!1), [d, c] = eN(!1), [u, m] = eN(!1), p = iN("vibebp").getUser();
            tN((() => {
                let e = iN("vibebp").getMenu().filter((e => "course" === e.parent)),
                    t = iN("vibebp").getAction();
                if (l(t || e[0].css_id), "on" == window.wplms_course_data.instructor_see_student_controls && p.caps.hasOwnProperty(window.wplms_course_data.instructor)) {
                    let t = [];
                    e.map(((e, a) => {
                        e.user_has_access && e.user_has_access == window.wplms_course_data.instructor && t.push(e)
                    })), l("manage_courses"), e = t
                }
                e.map(((a, s) => {
                    if (t) {
                        let a = e.findIndex((e => e.css_id == t));
                        a > -1 && -1 == e[a].class.indexOf("current-menu-item") && e[a].class.push("current-menu-item")
                    } else - 1 == e[0].class.indexOf("current-menu-item") && e[0].class.push("current-menu-item")
                })), -1 == document.querySelector("body").classList.value.indexOf("withsidebar") && document.querySelector("body").classList.add("withsidebar"), n(e.sort(((e, t) => e.position > t.position ? 1 : -1)))
            }), []);
            const _ = e => new Promise((t => setTimeout(t, e)));
            return Zx("div", {
                className: "vibebp_sidebars"
            }, Zx("div", {
                className: "vibebp_left_sidebar_wrapper"
            }, Zx("div", {
                className: "vibebp_left_sidebar"
            }, Zx("h3", null, window.wplms_course_data.translations.course), Array.isArray(p.caps) && p.caps.indexOf(window.wplms_course_data.instructor) > -1 || "object" == typeof p.caps && p.caps.hasOwnProperty(window.wplms_course_data.instructor) ? Zx("a", {
                className: "button is-primary new_mail",
                onClick: () => {
                    c(!d)
                }
            }, d ? Zx(aN, null, Zx("span", {
                className: "vicon vicon-arrow-left"
            }), " ", window.wplms_course_data.translations.back) : window.wplms_course_data.translations.create_course) : "", s.map(((e, t) => {
                let a = e.class.join(" ") + " " + e.css_id;
                if (!(t > s.findIndex((e => "instructor_controls" == e.css_id))) || Array.isArray(p.caps) && p.caps.indexOf(window.wplms_course_data.instructor) > -1 || "object" == typeof p.caps && p.caps.hasOwnProperty(window.wplms_course_data.instructor)) return "instructor_controls" == e.css_id ? Array.isArray(p.caps) && p.caps.indexOf(window.wplms_course_data.instructor) > -1 || "object" == typeof p.caps && p.caps.hasOwnProperty(window.wplms_course_data.instructor) ? Zx("strong", {
                    className: a
                }, e.name) : "" : Zx("a", {
                    className: a,
                    onClick: a => {
                        let r = {
                            ...i
                        };
                        r.filter = e.css_id, r.page = 1, i.css_id !== r.filter && (r.post__in = "", o(r)), l(e.css_id), nN("vibebp").setAction(e.css_id);
                        let d = [...s],
                            c = d.findIndex((e => e.class.indexOf("current-menu-item") > -1));
                        d[c].class.splice(d[c].class.indexOf("current-menu-item"), 1), -1 == d[t].class.indexOf("current-menu-item") && d[t].class.push("current-menu-item"), n(d), -1 == e.css_id.indexOf(["manage_courses", "manage_quizzes", "manage_assignments", "manage_reports", "manage_students", "course-stats", "quiz_results", "assignment_results", "course"]) && setTimeout((() => {
                            document.dispatchEvent(new CustomEvent("wplms_profile_course_loaded"))
                        }), 200)
                    },
                    dangerouslySetInnerHTML: {
                        __html: e.name
                    }
                })
            })))), Zx("div", {
                className: "vibebp_main"
            }, d ? Zx(kp, {
                back: async () => {
                    m(!0), l("manage_courses"), c(!1), await _(3e3), m(!1)
                },
                update: async (e, t) => {
                    "published" == t && (m(!0), l("manage_courses"), await _(3e3), m(!1))
                }
            }) : "manage_courses" === r ? Zx(Rh, {
                force: u
            }) : "manage_quizzes" === r ? Zx(sg, null) : "manage_units" === r ? Zx(Sg, null) : "manage_questions" === r ? Zx(Vg, null) : "manage_assignments" === r ? Zx(ly, null) : "manage_students" === r ? Zx(hy, null) : "manage_reports" === r ? Zx(Hy, null) : "course-stats" === r ? Zx(Xk, null) : "quiz_results" === r ? Zx(tx, null) : "assignment_results" === r ? Zx(dx, null) : "course" === r ? Zx(Ek, null) : "notes_reviews" === r ? Zx(Mw, null) : "qna" === r ? Zx(Wy, null) : "points_badges" === r ? Zx(Gx, null) : Zx("div", {
                className: r
            })))
        };
        document.addEventListener("component_loaded", (e => {
            "course" === e.detail.component && setTimeout((() => {
                sN(Zx(oN, null), document.querySelector("#course_component"))
            }), 200)
        }))
    })()
})();